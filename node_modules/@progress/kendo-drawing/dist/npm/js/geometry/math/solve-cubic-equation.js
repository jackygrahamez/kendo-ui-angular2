module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(189);


/***/ },

/***/ 166:
/***/ function(module, exports) {

	module.exports = require("./complex-number");

/***/ },

/***/ 169:
/***/ function(module, exports) {

	module.exports = require("../constants");

/***/ },

/***/ 170:
/***/ function(module, exports) {

	module.exports = require("../../common/round");

/***/ },

/***/ 189:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = solveCubicEquation;

	var _complexNumber = __webpack_require__(166);

	var _complexNumber2 = _interopRequireDefault(_complexNumber);

	var _constants = __webpack_require__(169);

	var _round = __webpack_require__(170);

	var _round2 = _interopRequireDefault(_round);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function numberSign(x) {
	    return x < 0 ? -1 : 1;
	}

	function solveQuadraticEquation(a, b, c) {
	    var squareRoot = Math.sqrt(Math.pow(b, 2) - 4 * a * c);
	    return [(-b + squareRoot) / (2 * a), (-b - squareRoot) / (2 * a)];
	}

	//Cardano's formula
	function solveCubicEquation(a, b, c, d) {
	    if (a === 0) {
	        return solveQuadraticEquation(b, c, d);
	    }

	    var p = (3 * a * c - Math.pow(b, 2)) / (3 * Math.pow(a, 2));
	    var q = (2 * Math.pow(b, 3) - 9 * a * b * c + 27 * Math.pow(a, 2) * d) / (27 * Math.pow(a, 3));
	    var Q = Math.pow(p / 3, 3) + Math.pow(q / 2, 2);
	    var i = new _complexNumber2.default(0, 1);
	    var b3a = -b / (3 * a);
	    var x1 = void 0,
	        x2 = void 0,
	        y1 = void 0,
	        y2 = void 0,
	        y3 = void 0,
	        z1 = void 0,
	        z2 = void 0;

	    if (Q < 0) {
	        x1 = new _complexNumber2.default(-q / 2, Math.sqrt(-Q)).nthRoot(3);
	        x2 = new _complexNumber2.default(-q / 2, -Math.sqrt(-Q)).nthRoot(3);
	    } else {
	        x1 = -q / 2 + Math.sqrt(Q);
	        x1 = new _complexNumber2.default(numberSign(x1) * Math.pow(Math.abs(x1), 1 / 3));
	        x2 = -q / 2 - Math.sqrt(Q);
	        x2 = new _complexNumber2.default(numberSign(x2) * Math.pow(Math.abs(x2), 1 / 3));
	    }

	    y1 = x1.add(x2);

	    z1 = x1.add(x2).multiplyConstant(-1 / 2);
	    z2 = x1.add(x2.negate()).multiplyConstant(Math.sqrt(3) / 2);

	    y2 = z1.add(i.multiply(z2));
	    y3 = z1.add(i.negate().multiply(z2));

	    var result = [];

	    if (y1.isReal()) {
	        result.push((0, _round2.default)(y1.real + b3a, _constants.PRECISION));
	    }
	    if (y2.isReal()) {
	        result.push((0, _round2.default)(y2.real + b3a, _constants.PRECISION));
	    }
	    if (y3.isReal()) {
	        result.push((0, _round2.default)(y3.real + b3a, _constants.PRECISION));
	    }

	    return result;
	}

/***/ }

/******/ });