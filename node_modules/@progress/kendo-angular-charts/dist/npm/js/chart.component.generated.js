(function(e, a) { for(var i in a) e[i] = a[i]; }(exports, /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(33);


/***/ },

/***/ 13:
/***/ function(module, exports) {

	module.exports = require("@angular/core");

/***/ },

/***/ 33:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(13);
	var core_2 = __webpack_require__(13);
	var copy_changes_1 = __webpack_require__(34);
	/**
	 * @hidden
	 */
	var ChartComponentGenerated = (function () {
	    function ChartComponentGenerated(configurationService) {
	        this.configurationService = configurationService;
	        /**
	         * Fired when the user clicks an axis label.
	         *
	         * The event handler function context (available via the `this` keyword) will be set to the widget
	         * instance.
	         */
	        this.axisLabelClick = new core_2.EventEmitter();
	        /**
	         * Fired as long as the user is dragging the Chart using the mouse or swipe gestures.
	         *
	         * The event handler function context (available via the `this` keyword) will be set to the widget
	         * instance.
	         */
	        this.drag = new core_2.EventEmitter();
	        /**
	         * Fired when the user stops dragging the Chart.
	         *
	         * The event handler function context (available via the this keyword) will be set to the widget
	         * instance.
	         */
	        this.dragEnd = new core_2.EventEmitter();
	        /**
	         * Fired when the user starts dragging the Chart.
	         *
	         * The event handler function context (available via the `this` keyword) will be set to the widget
	         * instance.
	         */
	        this.dragStart = new core_2.EventEmitter();
	        /**
	         * Fires when a legend item is hovered.
	         */
	        this.legendItemHover = new core_2.EventEmitter();
	        /**
	         * Fired when the user clicks one of the notes.
	         *
	         * The event handler function context (available via the `this` keyword) will be set to the widget
	         * instance.
	         */
	        this.noteClick = new core_2.EventEmitter();
	        /**
	         * Fired when the user hovers one of the notes.
	         *
	         * The event handler function context (available via the `this` keyword) will be set to the widget
	         * instance.
	         */
	        this.noteHover = new core_2.EventEmitter();
	        /**
	         * Fired when the user clicks the plot area.
	         *
	         * The click event will be triggered by the `tap` and `contextmenu` events. The `e.originalEvent.type` field can
	         * be inspected to distinguish between the original events.
	         */
	        this.plotAreaClick = new core_2.EventEmitter();
	        /**
	         * Fired when the user hovers the plot area.
	         */
	        this.plotAreaHover = new core_2.EventEmitter();
	        /**
	         * Fired when the Chart is ready to render on screen.
	         *
	         * For example, it is possible to use it to remove loading indicators.
	         * Changes to options will be ignored.
	         *
	         * The event handler function context (available via the `this` keyword) will be set to the widget
	         * instance.
	         */
	        this.render = new core_2.EventEmitter();
	        /**
	         * Fired when the user modifies the selection.
	         *
	         * The range units are:
	         *
	         * - Generic axis&mdash;Category index (0-based).
	         * - Date axis&mdash;Date instance.
	         *
	         * The event handler function context (available via the `this` keyword) will be set to the widget
	         * instance.
	         */
	        this.select = new core_2.EventEmitter();
	        /**
	         * Fired when the user completes modifying the selection.
	         *
	         * The range units are:
	         *
	         * - Generic axis&mdash;Category index (0-based).
	         * - Date axis&mdash;Date instance.
	         *
	         * The event handler function context (available via the this keyword) will be set to the widget
	         * instance.
	         */
	        this.selectEnd = new core_2.EventEmitter();
	        /**
	         * Fired when the user starts modifying the axis selection.
	         *
	         * The range units are:
	         *
	         * - Generic axis&mdash;Category index (0-based).
	         * - Date axis&mdash;Date instance.
	         *
	         * The event handler function context (available via the `this` keyword) will be set to the widget
	         * instance.
	         */
	        this.selectStart = new core_2.EventEmitter();
	        /**
	         * Fired when the user clicks the Chart series.
	         *
	         * The click event will be triggered by the `tap` and `contextmenu` events. To distinguish between the original events,
	         * inspect the `e.originalEvent.type` field.
	         */
	        this.seriesClick = new core_2.EventEmitter();
	        /**
	         * Fired when the user hovers the Chart series.
	         *
	         * The event handler function context (available via the `this` keyword) will be set to the widget
	         * instance.
	         */
	        this.seriesHover = new core_2.EventEmitter();
	        /**
	         * Fired as long as the user is zooming the Chart using the mousewheel operation.
	         *
	         * The event handler function context (available via the `this` keyword) will be set to the widget
	         * instance.
	         */
	        this.zoom = new core_2.EventEmitter();
	        /**
	         * Fired when the user stops zooming the Chart.
	         *
	         * The event handler function context (available via the `this` keyword) will be set to the widget
	         * instance.
	         */
	        this.zoomEnd = new core_2.EventEmitter();
	        /**
	         * Fired when the user uses the mousewheel to zoom the Chart.
	         *
	         * The event handler function context (available via the `this` keyword) will be set to the widget
	         * instance.
	         */
	        this.zoomStart = new core_2.EventEmitter();
	        this.handlers = {};
	    }
	    ChartComponentGenerated.prototype.ngOnChanges = function (changes) {
	        var store = this.configurationService.store;
	        copy_changes_1.copyChanges(changes, store);
	        this.configurationService.push(store);
	    };
	    ChartComponentGenerated.prototype.bindEvents = function () {
	        var _this = this;
	        this.bindHandler('axisLabelClick', function (e) { return _this.axisLabelClick.emit(e); });
	        this.bindHandler('drag', function (e) { return _this.drag.emit(e); });
	        this.bindHandler('dragEnd', function (e) { return _this.dragEnd.emit(e); });
	        this.bindHandler('dragStart', function (e) { return _this.dragStart.emit(e); });
	        this.bindHandler('legendItemHover', function (e) { return _this.legendItemHover.emit(e); });
	        this.bindHandler('noteClick', function (e) { return _this.noteClick.emit(e); });
	        this.bindHandler('noteHover', function (e) { return _this.noteHover.emit(e); });
	        this.bindHandler('plotAreaClick', function (e) { return _this.plotAreaClick.emit(e); });
	        this.bindHandler('plotAreaHover', function (e) { return _this.plotAreaHover.emit(e); });
	        this.bindHandler('render', function (e) { return _this.render.emit(e); });
	        this.bindHandler('select', function (e) { return _this.select.emit(e); });
	        this.bindHandler('selectEnd', function (e) { return _this.selectEnd.emit(e); });
	        this.bindHandler('selectStart', function (e) { return _this.selectStart.emit(e); });
	        this.bindHandler('seriesClick', function (e) { return _this.seriesClick.emit(e); });
	        this.bindHandler('seriesHover', function (e) { return _this.seriesHover.emit(e); });
	        this.bindHandler('zoom', function (e) { return _this.zoom.emit(e); });
	        this.bindHandler('zoomEnd', function (e) { return _this.zoomEnd.emit(e); });
	        this.bindHandler('zoomStart', function (e) { return _this.zoomStart.emit(e); });
	    };
	    ChartComponentGenerated.prototype.unbindEvents = function () {
	        this.unbindHandler('axisLabelClick');
	        this.unbindHandler('drag');
	        this.unbindHandler('dragEnd');
	        this.unbindHandler('dragStart');
	        this.unbindHandler('legendItemHover');
	        this.unbindHandler('noteClick');
	        this.unbindHandler('noteHover');
	        this.unbindHandler('plotAreaClick');
	        this.unbindHandler('plotAreaHover');
	        this.unbindHandler('render');
	        this.unbindHandler('select');
	        this.unbindHandler('selectEnd');
	        this.unbindHandler('selectStart');
	        this.unbindHandler('seriesClick');
	        this.unbindHandler('seriesHover');
	        this.unbindHandler('zoom');
	        this.unbindHandler('zoomEnd');
	        this.unbindHandler('zoomStart');
	    };
	    ChartComponentGenerated.prototype.bindHandler = function (name, handler) {
	        if (this[name].observers.length > 0) {
	            this.handlers[name] = handler;
	            this.instance.bind(name, handler);
	        }
	    };
	    ChartComponentGenerated.prototype.unbindHandler = function (name) {
	        var handler = this.handlers[name];
	        if (handler) {
	            this.instance.unbind(name, handler);
	            this.handlers[name] = undefined;
	        }
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], ChartComponentGenerated.prototype, "pannable", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], ChartComponentGenerated.prototype, "renderAs", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Array)
	    ], ChartComponentGenerated.prototype, "seriesColors", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], ChartComponentGenerated.prototype, "title", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], ChartComponentGenerated.prototype, "transitions", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], ChartComponentGenerated.prototype, "zoomable", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], ChartComponentGenerated.prototype, "axisDefaults", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], ChartComponentGenerated.prototype, "categoryAxis", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], ChartComponentGenerated.prototype, "chartArea", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], ChartComponentGenerated.prototype, "legend", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], ChartComponentGenerated.prototype, "panes", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], ChartComponentGenerated.prototype, "plotArea", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], ChartComponentGenerated.prototype, "series", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], ChartComponentGenerated.prototype, "seriesDefaults", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], ChartComponentGenerated.prototype, "tooltip", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], ChartComponentGenerated.prototype, "valueAxis", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], ChartComponentGenerated.prototype, "xAxis", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], ChartComponentGenerated.prototype, "yAxis", void 0);
	    __decorate([
	        core_2.Output(), 
	        __metadata('design:type', core_2.EventEmitter)
	    ], ChartComponentGenerated.prototype, "axisLabelClick", void 0);
	    __decorate([
	        core_2.Output(), 
	        __metadata('design:type', core_2.EventEmitter)
	    ], ChartComponentGenerated.prototype, "drag", void 0);
	    __decorate([
	        core_2.Output(), 
	        __metadata('design:type', core_2.EventEmitter)
	    ], ChartComponentGenerated.prototype, "dragEnd", void 0);
	    __decorate([
	        core_2.Output(), 
	        __metadata('design:type', core_2.EventEmitter)
	    ], ChartComponentGenerated.prototype, "dragStart", void 0);
	    __decorate([
	        core_2.Output(), 
	        __metadata('design:type', core_2.EventEmitter)
	    ], ChartComponentGenerated.prototype, "legendItemHover", void 0);
	    __decorate([
	        core_2.Output(), 
	        __metadata('design:type', core_2.EventEmitter)
	    ], ChartComponentGenerated.prototype, "noteClick", void 0);
	    __decorate([
	        core_2.Output(), 
	        __metadata('design:type', core_2.EventEmitter)
	    ], ChartComponentGenerated.prototype, "noteHover", void 0);
	    __decorate([
	        core_2.Output(), 
	        __metadata('design:type', core_2.EventEmitter)
	    ], ChartComponentGenerated.prototype, "plotAreaClick", void 0);
	    __decorate([
	        core_2.Output(), 
	        __metadata('design:type', core_2.EventEmitter)
	    ], ChartComponentGenerated.prototype, "plotAreaHover", void 0);
	    __decorate([
	        core_2.Output(), 
	        __metadata('design:type', core_2.EventEmitter)
	    ], ChartComponentGenerated.prototype, "render", void 0);
	    __decorate([
	        core_2.Output(), 
	        __metadata('design:type', core_2.EventEmitter)
	    ], ChartComponentGenerated.prototype, "select", void 0);
	    __decorate([
	        core_2.Output(), 
	        __metadata('design:type', core_2.EventEmitter)
	    ], ChartComponentGenerated.prototype, "selectEnd", void 0);
	    __decorate([
	        core_2.Output(), 
	        __metadata('design:type', core_2.EventEmitter)
	    ], ChartComponentGenerated.prototype, "selectStart", void 0);
	    __decorate([
	        core_2.Output(), 
	        __metadata('design:type', core_2.EventEmitter)
	    ], ChartComponentGenerated.prototype, "seriesClick", void 0);
	    __decorate([
	        core_2.Output(), 
	        __metadata('design:type', core_2.EventEmitter)
	    ], ChartComponentGenerated.prototype, "seriesHover", void 0);
	    __decorate([
	        core_2.Output(), 
	        __metadata('design:type', core_2.EventEmitter)
	    ], ChartComponentGenerated.prototype, "zoom", void 0);
	    __decorate([
	        core_2.Output(), 
	        __metadata('design:type', core_2.EventEmitter)
	    ], ChartComponentGenerated.prototype, "zoomEnd", void 0);
	    __decorate([
	        core_2.Output(), 
	        __metadata('design:type', core_2.EventEmitter)
	    ], ChartComponentGenerated.prototype, "zoomStart", void 0);
	    return ChartComponentGenerated;
	}());
	exports.ChartComponentGenerated = ChartComponentGenerated;


/***/ },

/***/ 34:
/***/ function(module, exports) {

	module.exports = require("./common/copy-changes");

/***/ }

/******/ })));
//# sourceMappingURL=chart.component.generated.js.map