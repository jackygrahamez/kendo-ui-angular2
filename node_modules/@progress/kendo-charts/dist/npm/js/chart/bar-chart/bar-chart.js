module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(70);


/***/ },

/***/ 5:
/***/ function(module, exports) {

	module.exports = require("../../common/constants");

/***/ },

/***/ 7:
/***/ function(module, exports) {

	module.exports = require("../../common/defined");

/***/ },

/***/ 13:
/***/ function(module, exports) {

	module.exports = require("../../common/is-function");

/***/ },

/***/ 23:
/***/ function(module, exports) {

	module.exports = require("@progress/kendo-drawing");

/***/ },

/***/ 24:
/***/ function(module, exports) {

	module.exports = require("../constants");

/***/ },

/***/ 25:
/***/ function(module, exports) {

	module.exports = require("../../common/set-default-options");

/***/ },

/***/ 70:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _kendoDrawing = __webpack_require__(23);

	var _bar = __webpack_require__(71);

	var _bar2 = _interopRequireDefault(_bar);

	var _categoricalChart = __webpack_require__(72);

	var _categoricalChart2 = _interopRequireDefault(_categoricalChart);

	var _clusterLayout = __webpack_require__(73);

	var _clusterLayout2 = _interopRequireDefault(_clusterLayout);

	var _stackWrap = __webpack_require__(74);

	var _stackWrap2 = _interopRequireDefault(_stackWrap);

	var _constants = __webpack_require__(24);

	var _anyHasZIndex = __webpack_require__(75);

	var _anyHasZIndex2 = _interopRequireDefault(_anyHasZIndex);

	var _constants2 = __webpack_require__(5);

	var _setDefaultOptions = __webpack_require__(25);

	var _setDefaultOptions2 = _interopRequireDefault(_setDefaultOptions);

	var _isFunction = __webpack_require__(13);

	var _isFunction2 = _interopRequireDefault(_isFunction);

	var _defined = __webpack_require__(7);

	var _defined2 = _interopRequireDefault(_defined);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var BarChart = function (_CategoricalChart) {
	    _inherits(BarChart, _CategoricalChart);

	    function BarChart() {
	        _classCallCheck(this, BarChart);

	        return _possibleConstructorReturn(this, (BarChart.__proto__ || Object.getPrototypeOf(BarChart)).apply(this, arguments));
	    }

	    _createClass(BarChart, [{
	        key: 'render',
	        value: function render() {
	            _get(BarChart.prototype.__proto__ || Object.getPrototypeOf(BarChart.prototype), 'render', this).call(this);
	            this.updateStackRange();
	        }
	    }, {
	        key: 'pointType',
	        value: function pointType() {
	            return _bar2.default;
	        }
	    }, {
	        key: 'clusterType',
	        value: function clusterType() {
	            return _clusterLayout2.default;
	        }
	    }, {
	        key: 'stackType',
	        value: function stackType() {
	            return _stackWrap2.default;
	        }
	    }, {
	        key: 'stackLimits',
	        value: function stackLimits(axisName, stackName) {
	            var limits = _get(BarChart.prototype.__proto__ || Object.getPrototypeOf(BarChart.prototype), 'stackLimits', this).call(this, axisName, stackName);

	            return limits;
	        }
	    }, {
	        key: 'createPoint',
	        value: function createPoint(data, fields) {
	            var categoryIx = fields.categoryIx;
	            var category = fields.category;
	            var series = fields.series;
	            var seriesIx = fields.seriesIx;
	            var options = this.options;
	            var children = this.children;

	            var isStacked = options.isStacked;
	            var value = this.pointValue(data);
	            var pointOptions = this.pointOptions(series, seriesIx);

	            var labelOptions = pointOptions.labels;
	            if (isStacked) {
	                if (labelOptions.position === _constants.OUTSIDE_END) {
	                    labelOptions.position = _constants.INSIDE_END;
	                }
	            }

	            pointOptions.isStacked = isStacked;

	            var color = data.fields.color || series.color;
	            if (value < 0 && pointOptions.negativeColor) {
	                color = pointOptions.negativeColor;
	            }

	            pointOptions = this.evalPointOptions(pointOptions, value, category, categoryIx, series, seriesIx);

	            if ((0, _isFunction2.default)(series.color)) {
	                color = pointOptions.color;
	            }

	            var pointType = this.pointType();
	            var point = new pointType(value, pointOptions);
	            point.color = color;

	            var cluster = children[categoryIx];
	            if (!cluster) {
	                var clusterType = this.clusterType();
	                cluster = new clusterType({
	                    vertical: options.invertAxes,
	                    gap: options.gap,
	                    spacing: options.spacing
	                });
	                this.append(cluster);
	            }

	            if (isStacked) {
	                var stackWrap = this.getStackWrap(series, cluster);
	                stackWrap.append(point);
	            } else {
	                cluster.append(point);
	            }

	            return point;
	        }
	    }, {
	        key: 'getStackWrap',
	        value: function getStackWrap(series, cluster) {
	            var stack = series.stack;
	            var stackGroup = stack ? stack.group || stack : stack;
	            var wraps = cluster.children;
	            var stackWrap = void 0;

	            if ((typeof stackGroup === 'undefined' ? 'undefined' : _typeof(stackGroup)) === _constants2.STRING) {
	                for (var i = 0; i < wraps.length; i++) {
	                    if (wraps[i]._stackGroup === stackGroup) {
	                        stackWrap = wraps[i];
	                        break;
	                    }
	                }
	            } else {
	                stackWrap = wraps[0];
	            }

	            if (!stackWrap) {
	                var stackType = this.stackType();
	                stackWrap = new stackType({
	                    vertical: !this.options.invertAxes
	                });
	                stackWrap._stackGroup = stackGroup;
	                cluster.append(stackWrap);
	            }

	            return stackWrap;
	        }
	    }, {
	        key: 'categorySlot',
	        value: function categorySlot(categoryAxis, categoryIx, valueAxis) {
	            var options = this.options;
	            var categorySlot = categoryAxis.getSlot(categoryIx);
	            var startValue = valueAxis.startValue();

	            if (options.isStacked) {
	                var zeroSlot = valueAxis.getSlot(startValue, startValue, true);
	                var stackAxis = options.invertAxes ? _constants2.X : _constants2.Y;
	                categorySlot[stackAxis + 1] = categorySlot[stackAxis + 2] = zeroSlot[stackAxis + 1];
	            }

	            return categorySlot;
	        }
	    }, {
	        key: 'reflowCategories',
	        value: function reflowCategories(categorySlots) {
	            var children = this.children;
	            var childrenLength = children.length;

	            for (var i = 0; i < childrenLength; i++) {
	                children[i].reflow(categorySlots[i]);
	            }
	        }
	    }, {
	        key: 'createAnimation',
	        value: function createAnimation() {
	            this._setAnimationOptions();
	            _get(BarChart.prototype.__proto__ || Object.getPrototypeOf(BarChart.prototype), 'createAnimation', this).call(this);

	            if ((0, _anyHasZIndex2.default)(this.options.series)) {
	                this._setChildrenAnimation();
	            }
	        }
	    }, {
	        key: '_setChildrenAnimation',
	        value: function _setChildrenAnimation() {
	            var points = this.points;

	            for (var idx = 0; idx < points.length; idx++) {
	                var point = points[idx];
	                var pointVisual = point.visual;
	                if (pointVisual && (0, _defined2.default)(pointVisual.options.zIndex)) {
	                    point.options.animation = this.options.animation;
	                    point.createAnimation();
	                }
	            }
	        }
	    }, {
	        key: '_setAnimationOptions',
	        value: function _setAnimationOptions() {
	            var options = this.options;
	            var animation = options.animation || {};
	            var origin = void 0;

	            if (options.isStacked) {
	                var valueAxis = this.seriesValueAxis(options.series[0]);
	                origin = valueAxis.getSlot(valueAxis.startValue());
	            } else {
	                origin = this.categoryAxis.getSlot(0);
	            }

	            animation.origin = new _kendoDrawing.geometry.Point(origin.x1, origin.y1);
	            animation.vertical = !options.invertAxes;
	        }
	    }]);

	    return BarChart;
	}(_categoricalChart2.default);

	(0, _setDefaultOptions2.default)(BarChart.prototype, {
	    animation: {
	        type: _constants.BAR
	    }
	});

	exports.default = BarChart;

/***/ },

/***/ 71:
/***/ function(module, exports) {

	module.exports = require("./bar");

/***/ },

/***/ 72:
/***/ function(module, exports) {

	module.exports = require("../categorical-chart");

/***/ },

/***/ 73:
/***/ function(module, exports) {

	module.exports = require("../cluster-layout");

/***/ },

/***/ 74:
/***/ function(module, exports) {

	module.exports = require("../stack-wrap");

/***/ },

/***/ 75:
/***/ function(module, exports) {

	module.exports = require("../utils/any-has-z-index");

/***/ }

/******/ });