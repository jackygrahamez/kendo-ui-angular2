module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(210);


/***/ },

/***/ 5:
/***/ function(module, exports) {

	module.exports = require("../../common/constants");

/***/ },

/***/ 23:
/***/ function(module, exports) {

	module.exports = require("@progress/kendo-drawing");

/***/ },

/***/ 24:
/***/ function(module, exports) {

	module.exports = require("../constants");

/***/ },

/***/ 25:
/***/ function(module, exports) {

	module.exports = require("../../common/set-default-options");

/***/ },

/***/ 50:
/***/ function(module, exports) {

	module.exports = require("../../common/deep-extend");

/***/ },

/***/ 55:
/***/ function(module, exports) {

	module.exports = require("../../core");

/***/ },

/***/ 64:
/***/ function(module, exports) {

	module.exports = require("../utils/has-gradient-overlay");

/***/ },

/***/ 65:
/***/ function(module, exports) {

	module.exports = require("../mixins/point-events-mixin");

/***/ },

/***/ 69:
/***/ function(module, exports) {

	module.exports = require("../../common/template");

/***/ },

/***/ 77:
/***/ function(module, exports) {

	module.exports = require("../../common/get-spacing");

/***/ },

/***/ 86:
/***/ function(module, exports) {

	module.exports = require("../../common/auto-format");

/***/ },

/***/ 209:
/***/ function(module, exports) {

	module.exports = require("../../common/round");

/***/ },

/***/ 210:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _kendoDrawing = __webpack_require__(23);

	var _core = __webpack_require__(55);

	var _pointEventsMixin = __webpack_require__(65);

	var _pointEventsMixin2 = _interopRequireDefault(_pointEventsMixin);

	var _constants = __webpack_require__(24);

	var _hasGradientOverlay = __webpack_require__(64);

	var _hasGradientOverlay2 = _interopRequireDefault(_hasGradientOverlay);

	var _constants2 = __webpack_require__(5);

	var _setDefaultOptions = __webpack_require__(25);

	var _setDefaultOptions2 = _interopRequireDefault(_setDefaultOptions);

	var _getSpacing = __webpack_require__(77);

	var _getSpacing2 = _interopRequireDefault(_getSpacing);

	var _deepExtend = __webpack_require__(50);

	var _deepExtend2 = _interopRequireDefault(_deepExtend);

	var _template = __webpack_require__(69);

	var _template2 = _interopRequireDefault(_template);

	var _round = __webpack_require__(209);

	var _round2 = _interopRequireDefault(_round);

	var _rad = __webpack_require__(211);

	var _rad2 = _interopRequireDefault(_rad);

	var _autoFormat = __webpack_require__(86);

	var _autoFormat2 = _interopRequireDefault(_autoFormat);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var PieSegment = function (_ChartElement) {
	    _inherits(PieSegment, _ChartElement);

	    function PieSegment(value, sector, options) {
	        _classCallCheck(this, PieSegment);

	        var _this = _possibleConstructorReturn(this, (PieSegment.__proto__ || Object.getPrototypeOf(PieSegment)).call(this, options));

	        _this.value = value;
	        _this.sector = sector;
	        return _this;
	    }

	    _createClass(PieSegment, [{
	        key: 'render',
	        value: function render() {
	            var labels = this.options.labels;
	            var labelText = this.value;

	            if (this._rendered || this.visible === false) {
	                return;
	            }
	            this._rendered = true;

	            if (labels.template) {
	                var labelTemplate = (0, _template2.default)(labels.template);
	                labelText = labelTemplate({
	                    dataItem: this.dataItem,
	                    category: this.category,
	                    value: this.value,
	                    series: this.series,
	                    percentage: this.percentage
	                });
	            } else if (labels.format) {
	                labelText = (0, _autoFormat2.default)(labels.format, labelText);
	            }

	            if (labels.visible && labelText) {
	                this.label = new _core.TextBox(labelText, (0, _deepExtend2.default)({}, labels, {
	                    align: _constants2.CENTER,
	                    vAlign: "",
	                    animation: {
	                        type: _constants.FADEIN,
	                        delay: this.animationDelay
	                    }
	                }));

	                this.append(this.label);
	            }
	        }
	    }, {
	        key: 'reflow',
	        value: function reflow(targetBox) {
	            this.render();
	            this.box = targetBox;
	            this.reflowLabel();
	        }
	    }, {
	        key: 'reflowLabel',
	        value: function reflowLabel() {
	            var labelsOptions = this.options.labels;
	            var label = this.label;

	            var sector = this.sector.clone();
	            var labelsDistance = labelsOptions.distance;
	            var angle = sector.middle();

	            if (label) {
	                var labelHeight = label.box.height();
	                var labelWidth = label.box.width();
	                var lp = void 0;

	                if (labelsOptions.position === _constants2.CENTER) {
	                    sector.radius = Math.abs((sector.radius - labelHeight) / 2) + labelHeight;
	                    lp = sector.point(angle);
	                    label.reflow(new _core.Box(lp.x, lp.y - labelHeight / 2, lp.x, lp.y));
	                } else if (labelsOptions.position === _constants.INSIDE_END) {
	                    sector.radius = sector.radius - labelHeight / 2;
	                    lp = sector.point(angle);
	                    label.reflow(new _core.Box(lp.x, lp.y - labelHeight / 2, lp.x, lp.y));
	                } else {
	                    var x1 = void 0;
	                    lp = sector.clone().expand(labelsDistance).point(angle);
	                    if (lp.x >= sector.center.x) {
	                        x1 = lp.x + labelWidth;
	                        label.orientation = _constants2.RIGHT;
	                    } else {
	                        x1 = lp.x - labelWidth;
	                        label.orientation = _constants2.LEFT;
	                    }
	                    label.reflow(new _core.Box(x1, lp.y - labelHeight, lp.x, lp.y));
	                }
	            }
	        }
	    }, {
	        key: 'createVisual',
	        value: function createVisual() {
	            var _this2 = this;

	            var sector = this.sector;
	            var options = this.options;


	            _get(PieSegment.prototype.__proto__ || Object.getPrototypeOf(PieSegment.prototype), 'createVisual', this).call(this);

	            if (this.value) {
	                if (options.visual) {
	                    var startAngle = (sector.startAngle + 180) % 360;
	                    var visual = options.visual({
	                        category: this.category,
	                        dataItem: this.dataItem,
	                        value: this.value,
	                        series: this.series,
	                        percentage: this.percentage,
	                        center: new _kendoDrawing.geometry.Point(sector.center.x, sector.center.y),
	                        radius: sector.radius,
	                        innerRadius: sector.innerRadius,
	                        startAngle: startAngle,
	                        endAngle: startAngle + sector.angle,
	                        options: options,
	                        createVisual: function createVisual() {
	                            var group = new _kendoDrawing.drawing.Group();
	                            _this2.createSegmentVisual(group);

	                            return group;
	                        }
	                    });

	                    if (visual) {
	                        this.visual.append(visual);
	                    }
	                } else {
	                    this.createSegmentVisual(this.visual);
	                }
	            }
	        }
	    }, {
	        key: 'createSegmentVisual',
	        value: function createSegmentVisual(group) {
	            var sector = this.sector;
	            var options = this.options;

	            var borderOptions = options.border || {};
	            var border = borderOptions.width > 0 ? {
	                stroke: {
	                    color: borderOptions.color,
	                    width: borderOptions.width,
	                    opacity: borderOptions.opacity,
	                    dashType: borderOptions.dashType
	                }
	            } : {};
	            var color = options.color;
	            var fill = {
	                color: color,
	                opacity: options.opacity
	            };
	            var visual = this.createSegment(sector, (0, _deepExtend2.default)({
	                fill: fill,
	                stroke: {
	                    opacity: options.opacity
	                },
	                zIndex: options.zIndex
	            }, border));

	            group.append(visual);

	            if ((0, _hasGradientOverlay2.default)(options)) {
	                group.append(this.createGradientOverlay(visual, {
	                    baseColor: color,
	                    fallbackFill: fill
	                }, (0, _deepExtend2.default)({
	                    center: [sector.center.x, sector.center.y],
	                    innerRadius: sector.innerRadius,
	                    radius: sector.radius,
	                    userSpace: true
	                }, options.overlay)));
	            }
	        }
	    }, {
	        key: 'createSegment',
	        value: function createSegment(sector, options) {
	            if (options.singleSegment) {
	                return new _kendoDrawing.drawing.Circle(new _kendoDrawing.geometry.Circle(new _kendoDrawing.geometry.Point(sector.center.x, sector.center.y), sector.radius), options);
	            }

	            return _core.ShapeBuilder.current.createRing(sector, options);
	        }
	    }, {
	        key: 'createAnimation',
	        value: function createAnimation() {
	            var options = this.options;
	            var center = this.sector.center;


	            (0, _deepExtend2.default)(options, {
	                animation: {
	                    center: [center.x, center.y],
	                    delay: this.animationDelay
	                }
	            });

	            _get(PieSegment.prototype.__proto__ || Object.getPrototypeOf(PieSegment.prototype), 'createAnimation', this).call(this);
	        }
	    }, {
	        key: 'createHighlight',
	        value: function createHighlight(options) {
	            var highlight = this.options.highlight || {};
	            var border = highlight.border || {};

	            return this.createSegment(this.sector, (0, _deepExtend2.default)({}, options, {
	                fill: {
	                    color: highlight.color,
	                    opacity: highlight.opacity
	                },
	                stroke: {
	                    opacity: border.opacity,
	                    width: border.width,
	                    color: border.color
	                }
	            }));
	        }
	    }, {
	        key: 'highlightVisual',
	        value: function highlightVisual() {
	            return this.visual.children[0];
	        }
	    }, {
	        key: 'highlightVisualArgs',
	        value: function highlightVisualArgs() {
	            var sector = this.sector;

	            return {
	                options: this.options,
	                radius: sector.radius,
	                innerRadius: sector.innerRadius,
	                center: new _kendoDrawing.geometry.Point(sector.center.x, sector.center.y),
	                startAngle: sector.startAngle,
	                endAngle: sector.angle + sector.startAngle,
	                visual: this.visual
	            };
	        }
	    }, {
	        key: 'tooltipAnchor',
	        value: function tooltipAnchor() {
	            var sector = this.sector.clone().expand(_constants.TOOLTIP_OFFSET);
	            var midAndle = sector.middle();
	            var midPoint = sector.point(midAndle);

	            return {
	                point: midPoint,
	                align: tooltipAlignment(midAndle + 180)
	            };
	        }
	    }, {
	        key: 'formatValue',
	        value: function formatValue(format) {
	            return this.owner.formatPointValue(this, format);
	        }
	    }]);

	    return PieSegment;
	}(_core.ChartElement);

	var RAD_30 = (0, _round2.default)((0, _rad2.default)(30), _constants2.DEFAULT_PRECISION);
	var RAD_60 = (0, _round2.default)((0, _rad2.default)(60), _constants2.DEFAULT_PRECISION);

	function tooltipAlignment(angle) {
	    var radians = (0, _rad2.default)(angle);
	    var sine = (0, _round2.default)(Math.sin(radians), _constants2.DEFAULT_PRECISION);
	    var cosine = (0, _round2.default)(Math.cos(radians), _constants2.DEFAULT_PRECISION);

	    var horizontal = void 0;
	    if (Math.abs(sine) > RAD_60) {
	        horizontal = _constants2.CENTER;
	    } else if (cosine < 0) {
	        horizontal = _constants2.RIGHT;
	    } else {
	        horizontal = _constants2.LEFT;
	    }

	    var vertical = void 0;
	    if (Math.abs(sine) < RAD_30) {
	        vertical = _constants2.CENTER;
	    } else if (sine < 0) {
	        vertical = _constants2.BOTTOM;
	    } else {
	        vertical = _constants2.TOP;
	    }

	    return {
	        horizontal: horizontal,
	        vertical: vertical
	    };
	}

	(0, _setDefaultOptions2.default)(PieSegment.prototype, {
	    color: _constants2.WHITE,
	    overlay: {
	        gradient: "roundedBevel"
	    },
	    border: {
	        width: 0.5
	    },
	    labels: {
	        visible: false,
	        distance: 35,
	        font: _constants2.DEFAULT_FONT,
	        margin: (0, _getSpacing2.default)(0.5),
	        align: _constants2.CIRCLE,
	        zIndex: 1,
	        position: _constants.OUTSIDE_END
	    },
	    animation: {
	        type: _constants.PIE
	    },
	    highlight: {
	        visible: true,
	        border: {
	            width: 1
	        }
	    },
	    visible: true
	});

	(0, _deepExtend2.default)(PieSegment.prototype, _pointEventsMixin2.default);

	exports.default = PieSegment;

/***/ },

/***/ 211:
/***/ function(module, exports) {

	module.exports = require("../../common/rad");

/***/ }

/******/ });