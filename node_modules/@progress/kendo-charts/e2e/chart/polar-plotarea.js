import 'core-js/es6';
import { $ } from 'e2e-utils'

import PolarPlotArea from '../../src/chart/plotarea/polar-plotarea';
import { Box } from '../../src/core';
import { deepExtend } from '../../src/common';

import { ok, equal, close } from '../../test/test-helpers';
import { clickChart, createChart, destroyChart, getChartDomElement }  from '../test-helpers';

const chartBox = new Box(100, 100, 1000, 1000);
let plotArea, categoryAxis, valueAxis, chartSeries;


function createPlotArea(series, options) {
    plotArea = new PolarPlotArea(series, options);

    categoryAxis = plotArea.categoryAxis;
    valueAxis = plotArea.valueAxis;

    chartSeries = plotArea.charts[0];
}

// ------------------------------------------------------------
describe('Polar Plot Area / Axes', () => {
    beforeEach(() => {
        createPlotArea([{ type: "polarLine", data: [] }]);
    });

    it("roundToMajorUnit is set to false", () => {
        equal(valueAxis.options.roundToMajorUnit, false);
    });

    it("Y axis is centered", () => {
        createPlotArea([{ type: "polarLine", data: [] }]);
        plotArea.reflow(new Box(0, 0, 100, 200));

        const slot = valueAxis.getSlot(0, 0);
        equal([slot.x1, slot.y1], [50, 100]);
    });

    it("reversed Y axis is centered", () => {
        createPlotArea([{ type: "polarLine", data: [[0, 100]] }], { yAxis: { reverse: true } });
        plotArea.reflow(new Box(0, 0, 100, 200));

        const slot = valueAxis.getSlot(100, 100);
        equal([slot.x1, slot.y1], [50, 100]);
    });

});

// ------------------------------------------------------------
describe('Polar Plot Area / Legend', () => {

    it("adds series legend items", () => {
        createPlotArea([{ type: "polarLine", data: [], name: "Foo" }]);

        equal(plotArea.options.legend.items.length, 1);
    });
});

(function() {
    let chart, point, pointElement, plotArea, plotAreaElement;
    const TOLERANCE = 5;
    
    function createPolarChart(options) {
        chart = createChart(deepExtend({
            series: [{
                type: "polarLine",
                data: [[120, 10]],
                markers: { visible: true }
            }],
            chartArea: {
                width: 600,
                height: 400
            }
        }, options))

        $("#container").css({ position: "absolute", top: "200px", left: "8px" });

        plotArea = chart._model.children[1];
        plotAreaElement = getChartDomElement(plotArea);
        point = plotArea.charts[0].points[0];
        pointElement = getChartDomElement(point.marker);
    }

    // ------------------------------------------------------------
    describe('Polar Plot Area / Events / plotAreaClick', () => {
        beforeEach(() => {
            $(document.body).css("margin", "0").css("padding", "0");
        });

        afterEach(() => {
            destroyChart(chart);
            $(document.body).css("margin", "");
        });

        it("point click bubbles to plot area", () => {
            createPolarChart({
                plotAreaClick: function() { ok(true); }
            });

            clickChart(chart, pointElement, 300, 300);
        });

        it("fires when clicking plot area directly", () => {
            createPolarChart({
                plotAreaClick: function() { ok(true); }
            });

            clickChart(chart, plotAreaElement, 300, 300);
        });

        it("does not fire when clicking outside of axis range", 0, () => {
            createPolarChart({
                plotAreaClick: function() { ok(false); }
            });

            clickChart(chart, plotAreaElement, 300, 580);
        });

        it("does not fire when clicking on axes", 0, () => {
            createPolarChart({
                plotAreaClick: function() { ok(false); }
            });

            clickChart(chart, plotAreaElement, 3000, 0);
        });

        it("event arguments contain x value", 1, () => {
            createPolarChart({
                plotAreaClick: function(e) { close(e.x, 180, TOLERANCE); }
            });

            clickChart(chart, plotAreaElement, 300, 400);
        });

        it("event arguments contain y value", 1, () => {
            createPolarChart({
                plotAreaClick: function(e) { close(e.y, 6, TOLERANCE); }
            });

            clickChart(chart, plotAreaElement, 300, 300);
        });
    });
})();
