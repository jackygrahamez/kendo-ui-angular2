import 'core-js/es6';

import { Ring, Box, Point } from '../../src/core';
import RadarPlotArea from '../../src/chart/plotarea/radar-plotarea';
import RadarAreaChart from '../../src/chart/radar-area-chart/radar-area-chart';

import { deepExtend, map } from '../../src/common';

import { ok, equal, arrayClose, mapSegments } from '../../test/test-helpers';

import { createChart, destroyChart }  from '../test-helpers';

const TOLERANCE = 1;
const chartBox = new Box(0, 0, 800, 600);
let plotArea, chart, pointsXY;

function getSegmentAt(chart, idx) {
    return chart._segments[idx || 0].visual.children[0];
}

function createRadarAreaChart(series, options) {
    plotArea = new RadarPlotArea(series,
        deepExtend({
            valueAxis: {
                majorGridLines: { visible: false },
                visible: false,
                startValue: function() {
                    return 0;
                }
            },
            categoryAxis: {
                majorGridLines: { visible: false },
                visible: false
            },
            plotArea: {
                padding: 35
            }
        }, options)
    );

    chart = plotArea.charts[0];

    plotArea.reflow(chartBox);
    plotArea.renderVisual();
    pointsXY = mapSegments(getSegmentAt(chart).segments);
}

// ------------------------------------------------------------
describe('Radar Area Chart / Positive values', () => {
    beforeEach(() => {
        createRadarAreaChart([{
            type: "radarArea",
            data: [1, 2, 1]
        }]);
    });

    it("point coordinates", () => {
        arrayClose(pointsXY, [
            [400, 168], [630, 433], [285, 366], [400, 168]
        ], TOLERANCE);
    });
});

// ------------------------------------------------------------
describe('Radar Area Chart / Positive values / Stacked', () => {
    beforeEach(() => {
        createRadarAreaChart([{
            type: "radarArea",
            data: [1, 2, 1],
            stack: true
        }, {
            type: "radarArea",
            data: [1, 2, 1]
        }]);
    });

    it("stacked series close around inner series", () => {
        arrayClose(mapSegments(getSegmentAt(chart, 1).segments), [
            [400, 168], [630, 433], [285, 366], [400, 168],
            [400, 234], [343, 333], [515, 366], [400, 234]
        ], TOLERANCE);
    });
});

// ------------------------------------------------------------
describe('Radar Area Chart / Category binding', () => {
    beforeEach(() => {
        chart = createChart({
          seriesDefaults: {
            type: "radarArea",
          },
          series: [{
            field: "Count",
            categoryField: "Category",
            data: [
              {"Category": "A", "Count": 1},
              {"Category": "B", "Count": 2},
              {"Category": "C", "Count": 3}
            ]
          }, {
            field: "Count",
            categoryField: "Category",
            data: [
              {"Category": "B", "Count": 4},
              {"Category": "C", "Count": 5},
              {"Category": "D", "Count": 6}
            ]
          }]
        });
    });

    afterEach(() => {
        destroyChart(chart);
    });

    it("stacked series close around inner series", () => {
        const points = chart._plotArea.charts[0].points;
        const ref = map(points, function(p) {
            return [p.value, p.category];
        });

        equal(ref, [
            [1, "A"], [0, "A"],
            [2, "B"], [4, "B"],
            [3, "C"], [5, "C"],
            [0, "D"], [6, "D"]
        ]);
    });
});

// ------------------------------------------------------------
describe('RadarArea Chart / Values exceeding axis min or max options ', () => {

    it("values are limited", 2, () => {
        const plotArea = {
            categoryAxis:  {
                getSlot: function() {
                     return new Ring(new Point());
                },
                lineBox: function() {
                    return new Box(0,2,2,2);
                },
                options: {
                    categories: ["A", "B"]
                }
            },
            valueAxis: {
                getSlot: function(a,b, limit) {
                    ok(limit);
                    return new Box();
                },
                options: {
                    axisCrossingValue: 0
                },
                startValue: function() {
                    return 0;
                }
            },
            seriesCategoryAxis: function() {
                return plotArea.categoryAxis;
            }
        };

        const chart = new RadarAreaChart(plotArea, {series: [{
            type: "radarArea",
            data: [1,2]
        }]});

        chart.reflow();
    });
});
