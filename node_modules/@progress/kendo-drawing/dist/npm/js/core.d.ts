import { Element } from './shapes';

export class Observable {

    bind(eventName: string, handler: Function): Observable;
    one(eventName: string, handler: Function): Observable;
    first(eventName: string, handler: Function): Observable;
    trigger(eventName: string, e?: any): boolean;
    unbind(eventName: string, handler?: any): Observable;

}

export class Surface extends Observable {

    options: SurfaceOptions;

    constructor(options?: SurfaceOptions);

    static create(element: any, options?: any): Surface;

    clear(): void;
    draw(element: Element): void;
    eventTarget(e: any): Element;
    resize(force?: boolean): void;

}

export interface SurfaceTooltipCloseEvent {
  // TODO
}

export interface SurfaceTooltipOpenEvent {
  // TODO
}

export interface SurfaceOptions {
    type?: string;
    height?: string;
    width?: string;
    click?(e: SurfaceClickEvent): void;
    mouseenter?(e: SurfaceMouseenterEvent): void;
    mouseleave?(e: SurfaceMouseleaveEvent): void;
    mousemove?(e: SurfaceMousemoveEvent): void;
    tooltipClose?(e: SurfaceTooltipCloseEvent): void;
    tooltipOpen?(e: SurfaceTooltipOpenEvent): void;
}

export interface SurfaceEvent {
    sender: Surface;
    preventDefault: Function;
    isDefaultPrevented(): boolean;
}

export interface SurfaceClickEvent extends SurfaceEvent {
    element?: Element;
    originalEvent?: any;
}

export interface SurfaceMouseenterEvent extends SurfaceEvent {
    element?: Element;
    originalEvent?: any;
}

export interface SurfaceMouseleaveEvent extends SurfaceEvent {
    element?: Element;
    originalEvent?: any;
}

export interface SurfaceMousemoveEvent extends SurfaceEvent {
    element?: Element;
    originalEvent?: any;
}


