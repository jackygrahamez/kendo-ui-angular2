module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(305);


/***/ },

/***/ 23:
/***/ function(module, exports) {

	module.exports = require("@progress/kendo-drawing");

/***/ },

/***/ 63:
/***/ function(module, exports) {

	module.exports = require("../utils/color");

/***/ },

/***/ 147:
/***/ function(module, exports) {

	module.exports = require("../../common");

/***/ },

/***/ 305:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _kendoDrawing = __webpack_require__(23);

	var _color = __webpack_require__(63);

	var _color2 = _interopRequireDefault(_color);

	var _common = __webpack_require__(147);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var BaseTooltip = function (_Observable) {
	    _inherits(BaseTooltip, _Observable);

	    function BaseTooltip(element, options) {
	        _classCallCheck(this, BaseTooltip);

	        var _this = _possibleConstructorReturn(this, (BaseTooltip.__proto__ || Object.getPrototypeOf(BaseTooltip)).call(this));

	        _this.chartElement = element;
	        _this.options = (0, _common.deepExtend)({}, _this.options, options);
	        return _this;
	    }

	    _createClass(BaseTooltip, [{
	        key: 'getStyle',
	        value: function getStyle(options, point) {
	            var background = options.background;
	            var border = options.border.color;


	            if (point) {
	                var pointColor = point.color || point.options.color;
	                background = (0, _common.valueOrDefault)(background, pointColor);
	                border = (0, _common.valueOrDefault)(border, pointColor);
	            }

	            var padding = (0, _common.getSpacing)(options.padding || {}, "auto");

	            return {
	                backgroundColor: background,
	                borderColor: border,
	                font: options.font,
	                color: options.color,
	                opacity: options.opacity,
	                borderWidth: (0, _common.styleValue)(options.border.width),
	                paddingTop: (0, _common.styleValue)(padding.top),
	                paddingBottom: (0, _common.styleValue)(padding.bottom),
	                paddingLeft: (0, _common.styleValue)(padding.left),
	                paddingRight: (0, _common.styleValue)(padding.right)
	            };
	        }
	    }, {
	        key: 'chartPadding',
	        value: function chartPadding() {
	            if (!this._chartPadding) {
	                var _elementStyles = (0, _common.elementStyles)(this.chartElement, ["paddingLeft", "paddingTop"]);

	                var paddingLeft = _elementStyles.paddingLeft;
	                var paddingTop = _elementStyles.paddingTop;

	                this._chartPadding = {
	                    top: paddingTop,
	                    left: paddingLeft
	                };
	            }

	            return this._chartPadding;
	        }
	    }, {
	        key: 'offsetPoint',
	        value: function offsetPoint(point) {
	            var chartPadding = this.chartPadding();
	            var offset = (0, _common.elementOffset)(this.chartElement);

	            return {
	                left: (0, _common.round)(point.x + chartPadding.left + offset.left),
	                top: (0, _common.round)(point.y + chartPadding.top + offset.top)
	            };
	        }
	    }, {
	        key: 'show',
	        value: function show(options, tooltipOptions, point) {
	            options.anchor.point = this.offsetPoint(options.anchor.point);
	            options.format = tooltipOptions.format;

	            var style = this.getStyle(tooltipOptions, point);
	            options.style = style;

	            if (!(0, _common.defined)(tooltipOptions.color) && new _color2.default(style.backgroundColor).percBrightness() > 180) {
	                options.className = "k-chart-tooltip-inverse";
	            }

	            this.trigger("show", options);
	        }
	    }, {
	        key: 'hide',
	        value: function hide() {
	            this.trigger("hide");
	        }
	    }, {
	        key: 'destroy',
	        value: function destroy() {
	            delete this.chartElement;
	        }
	    }]);

	    return BaseTooltip;
	}(_kendoDrawing.Observable);

	(0, _common.setDefaultOptions)(BaseTooltip.prototype, {
	    border: {
	        width: 1
	    },
	    opacity: 1
	});

	exports.default = BaseTooltip;

/***/ }

/******/ });