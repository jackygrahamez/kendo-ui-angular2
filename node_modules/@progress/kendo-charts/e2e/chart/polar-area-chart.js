import 'core-js/es6';

import PolarAreaChart from '../../src/chart/polar-area-chart/polar-area-chart';
import PolarPlotArea from '../../src/chart/plotarea/polar-plotarea';
import { Ring, Box, Point } from '../../src/core';

import { deepExtend } from '../../src/common';

import { ok, equal, arrayClose, mapSegments } from '../../test/test-helpers';

const TOLERANCE = 1;
const chartBox = new Box(0, 0, 800, 600);
let plotArea, chart, pointsXY;

function getFirstSegment(chart) {
    return chart._segments[0].visual.children[0];
}

function createChart(series, options) {
    plotArea = new PolarPlotArea(series,
        deepExtend({
            xAxis: {
                majorGridLines: { visible: false },
                visible: false
            },
            yAxis: {
                majorGridLines: { visible: false },
                visible: false
            },
            plotArea: {
                padding: 35
            }
        }, options)
    );

    chart = plotArea.charts[0];

    plotArea.reflow(chartBox);
    plotArea.renderVisual();
    pointsXY = mapSegments(getFirstSegment(chart).segments);
}

// ------------------------------------------------------------
describe('Polar Area Chart / Positive values', () => {
    beforeEach(() => {
        createChart([{
            type: "polarArea",
            data: [[45, 1], [60, 2], [75, 1]]
        }]);
    });

    it("starts and ends on plot center", () => {
        arrayClose(pointsXY[0], [400, 300]);
        arrayClose(pointsXY[4], [400, 300]);
    });

    it("points are ordered by angular position", () => {
        createChart([{
            type: "polarArea",
            data: [[60, 2], [45, 1], [75, 1]]
        }]);

        arrayClose(pointsXY.slice(1, 4), [
            [494, 206], [533, 71], [434, 172]
        ], TOLERANCE);
    });
});

// ------------------------------------------------------------
describe('Polar Area Chart / Missing values', () => {

    it("omits points if missingValues is set to interpolate", () => {
        createChart([{
            type: "polarArea",
            data: [[45, 2], null, [60, 4], [null, 1], [80, 3], [100, null]],
            missingValues: "interpolate"
        }]);
        equal(chart.points[1], undefined);
        equal(chart.points[3], undefined);
        equal(chart.points[5], undefined);
    });

    it("does not omit point if missingValues is set to zero and point have x value", () => {
        createChart([{
            type: "polarArea",
            data: [[45, 2], [100, null]],
            missingValues: "zero"
        }]);

        equal(chart.points[1].value.x, 100);
        equal(chart.points[1].value.y, 0);
    });

    it("omits point if missingValues is set to zero and point does not have x value", () => {
        createChart([{
            type: "polarArea",
            data: [[45, 2], null, [60, 4], [null, 1], [80, 3], [100, null]],
            missingValues: "zero"
        }]);
        equal(chart.points[1], undefined);
        equal(chart.points[3], undefined);
    });

    it("does not omit point if missingValues is set to gap and point have x value", () => {
        createChart([{
            type: "polarArea",
            data: [[45, 2], [100, 3], [120, null]],
            missingValues: "gap"
        }]);

        equal(chart.points[2].value.x, 120);
        equal(chart.points[2].value.y, null);
    });

    it("omits point if missingValues is set to gap and point does not have x value", () => {
        createChart([{
            type: "polarArea",
            data: [[45, 2], null, [60, 4], [null, 1], [80, 3], [100, null]],
            missingValues: "gap"
        }]);
        equal(chart.points[1], undefined);
        equal(chart.points[3], undefined);
    });

    it("splits into segments with sorted by x points if missingValues is set to gap and there are missing values", () => {
        createChart([{
            type: "polarArea",
            data: [[45, 2], [130, 3], null, [60, 4], [120, 5], [100, null], [null, 1]],
            missingValues: "gap"
        }]);

        equal(chart._segments.length, 2);
        equal(chart._segments[0].linePoints[0].value, {
            x: 45,
            y: 2
        });
        equal(chart._segments[0].linePoints[1].value, {
            x: 60,
            y: 4
        });
        equal(chart._segments[1].linePoints[0].value, {
            x: 120,
            y: 5
        });
        equal(chart._segments[1].linePoints[1].value, {
            x: 130,
            y: 3
        });
    });
});

// ------------------------------------------------------------

describe('PolarArea Chart / Values exceeding axis min or max options ', () => {

    it("values are limited", 1, () => {
        const plotArea = {
            axisX: {
                getSlot: function(a,b,limit) {
                    return new Ring(new Point());
                }
            },
            axisY: {
                getSlot: function(a,b, limit) {
                    ok(limit);
                    return new Box();
                }
            }
        };

        const chart = new PolarAreaChart(plotArea, {series: [{
            type: "polarArea",
            data: [[45, 1]]
        }]});

        chart.reflow();
    });
});
