module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(505);


/***/ },

/***/ 23:
/***/ function(module, exports) {

	module.exports = require("@progress/kendo-drawing");

/***/ },

/***/ 60:
/***/ function(module, exports) {

	module.exports = require("../common/constants");

/***/ },

/***/ 111:
/***/ function(module, exports) {

	module.exports = require("../common/set-default-options");

/***/ },

/***/ 112:
/***/ function(module, exports) {

	module.exports = require("../common/deep-extend");

/***/ },

/***/ 113:
/***/ function(module, exports) {

	module.exports = require("../common/defined");

/***/ },

/***/ 116:
/***/ function(module, exports) {

	module.exports = require("../common/auto-format");

/***/ },

/***/ 458:
/***/ function(module, exports) {

	module.exports = require("./text-box");

/***/ },

/***/ 461:
/***/ function(module, exports) {

	module.exports = require("./box");

/***/ },

/***/ 468:
/***/ function(module, exports) {

	module.exports = require("../common/in-array");

/***/ },

/***/ 505:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _kendoDrawing = __webpack_require__(23);

	var _boxElement = __webpack_require__(506);

	var _boxElement2 = _interopRequireDefault(_boxElement);

	var _textBox = __webpack_require__(458);

	var _textBox2 = _interopRequireDefault(_textBox);

	var _shapeElement = __webpack_require__(507);

	var _shapeElement2 = _interopRequireDefault(_shapeElement);

	var _box = __webpack_require__(461);

	var _box2 = _interopRequireDefault(_box);

	var _constants = __webpack_require__(60);

	var _setDefaultOptions = __webpack_require__(111);

	var _setDefaultOptions2 = _interopRequireDefault(_setDefaultOptions);

	var _template = __webpack_require__(508);

	var _template2 = _interopRequireDefault(_template);

	var _defined = __webpack_require__(113);

	var _defined2 = _interopRequireDefault(_defined);

	var _deepExtend = __webpack_require__(112);

	var _deepExtend2 = _interopRequireDefault(_deepExtend);

	var _inArray = __webpack_require__(468);

	var _inArray2 = _interopRequireDefault(_inArray);

	var _alignPathToPixel = __webpack_require__(509);

	var _alignPathToPixel2 = _interopRequireDefault(_alignPathToPixel);

	var _autoFormat = __webpack_require__(116);

	var _autoFormat2 = _interopRequireDefault(_autoFormat);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var DEFAULT_ICON_SIZE = 7;

	var Note = function (_BoxElement) {
	    _inherits(Note, _BoxElement);

	    function Note(value, text, dataItem, category, series, options) {
	        _classCallCheck(this, Note);

	        var _this = _possibleConstructorReturn(this, (Note.__proto__ || Object.getPrototypeOf(Note)).call(this, options));

	        _this.value = value;
	        _this.text = text;
	        _this.dataItem = dataItem;
	        _this.category = category;
	        _this.series = series;

	        _this.render();
	        return _this;
	    }

	    _createClass(Note, [{
	        key: 'hide',
	        value: function hide() {
	            this.options.visible = false;
	        }
	    }, {
	        key: 'show',
	        value: function show() {
	            this.options.visible = true;
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var options = this.options;

	            if (options.visible) {
	                var label = options.label;
	                var icon = options.icon;

	                var box = new _box2.default();
	                var size = icon.size;
	                var text = this.text;
	                var width = void 0,
	                    height = void 0;

	                if ((0, _defined2.default)(label) && label.visible) {
	                    if (label.template) {
	                        var noteTemplate = (0, _template2.default)(label.template);
	                        text = noteTemplate({
	                            dataItem: this.dataItem,
	                            category: this.category,
	                            value: this.value,
	                            text: text,
	                            series: this.series
	                        });
	                    } else if (label.format) {
	                        text = (0, _autoFormat2.default)(label.format, text);
	                    }

	                    this.label = new _textBox2.default(text, (0, _deepExtend2.default)({}, label));

	                    if (label.position === _constants.INSIDE && !(0, _defined2.default)(size)) {
	                        if (icon.type === _constants.CIRCLE) {
	                            size = Math.max(this.label.box.width(), this.label.box.height());
	                        } else {
	                            width = this.label.box.width();
	                            height = this.label.box.height();
	                        }
	                        box.wrap(this.label.box);
	                    }
	                }

	                icon.width = width || size || DEFAULT_ICON_SIZE;
	                icon.height = height || size || DEFAULT_ICON_SIZE;

	                var marker = new _shapeElement2.default((0, _deepExtend2.default)({}, icon));

	                this.marker = marker;
	                this.append(marker);

	                if (this.label) {
	                    this.append(this.label);
	                }

	                marker.reflow(new _box2.default());
	                this.wrapperBox = box.wrap(marker.box);
	            }
	        }
	    }, {
	        key: 'reflow',
	        value: function reflow(targetBox) {
	            var options = this.options;
	            var label = this.label;
	            var marker = this.marker;
	            var wrapperBox = this.wrapperBox;

	            var center = targetBox.center();
	            var length = options.line.length;
	            var position = options.position;

	            // TODO: Review
	            if (options.visible) {
	                var lineStart = void 0,
	                    box = void 0,
	                    contentBox = void 0;

	                if ((0, _inArray2.default)(position, [_constants.LEFT, _constants.RIGHT])) {
	                    if (position === _constants.LEFT) {
	                        contentBox = wrapperBox.alignTo(targetBox, position).translate(-length, targetBox.center().y - wrapperBox.center().y);

	                        if (options.line.visible) {
	                            lineStart = [targetBox.x1, center.y];
	                            this.linePoints = [lineStart, [contentBox.x2, center.y]];
	                            box = contentBox.clone().wrapPoint(lineStart);
	                        }
	                    } else {
	                        contentBox = wrapperBox.alignTo(targetBox, position).translate(length, targetBox.center().y - wrapperBox.center().y);

	                        if (options.line.visible) {
	                            lineStart = [targetBox.x2, center.y];
	                            this.linePoints = [lineStart, [contentBox.x1, center.y]];
	                            box = contentBox.clone().wrapPoint(lineStart);
	                        }
	                    }
	                } else {
	                    if (position === _constants.BOTTOM) {
	                        contentBox = wrapperBox.alignTo(targetBox, position).translate(targetBox.center().x - wrapperBox.center().x, length);

	                        if (options.line.visible) {
	                            lineStart = [center.x, targetBox.y2];
	                            this.linePoints = [lineStart, [center.x, contentBox.y1]];
	                            box = contentBox.clone().wrapPoint(lineStart);
	                        }
	                    } else {
	                        contentBox = wrapperBox.alignTo(targetBox, position).translate(targetBox.center().x - wrapperBox.center().x, -length);

	                        if (options.line.visible) {
	                            lineStart = [center.x, targetBox.y1];
	                            this.linePoints = [lineStart, [center.x, contentBox.y2]];
	                            box = contentBox.clone().wrapPoint(lineStart);
	                        }
	                    }
	                }

	                if (marker) {
	                    marker.reflow(contentBox);
	                }

	                if (label) {
	                    label.reflow(contentBox);
	                    if (marker) {
	                        if (options.label.position === _constants.OUTSIDE) {
	                            label.box.alignTo(marker.box, position);
	                        }
	                        label.reflow(label.box);
	                    }
	                }

	                this.contentBox = contentBox;
	                this.targetBox = targetBox;
	                this.box = box || contentBox;
	            }
	        }
	    }, {
	        key: 'createVisual',
	        value: function createVisual() {
	            _get(Note.prototype.__proto__ || Object.getPrototypeOf(Note.prototype), 'createVisual', this).call(this);
	            this.visual.options.noclip = this.options.noclip;

	            if (this.options.visible) {
	                this.createLine();
	            }
	        }
	    }, {
	        key: 'renderVisual',
	        value: function renderVisual() {
	            var _this2 = this;

	            var options = this.options;
	            var customVisual = options.visual;
	            if (options.visible && customVisual) {
	                this.visual = customVisual({
	                    dataItem: this.dataItem,
	                    category: this.category,
	                    value: this.value,
	                    text: this.text,
	                    sender: this.getChart(),
	                    series: this.series,
	                    rect: this.targetBox.toRect(),
	                    options: {
	                        background: options.background,
	                        border: options.background,
	                        icon: options.icon,
	                        label: options.label,
	                        line: options.line,
	                        position: options.position,
	                        visible: options.visible
	                    },
	                    createVisual: function createVisual() {
	                        _this2.createVisual();
	                        _this2.renderChildren();
	                        var defaultVisual = _this2.visual;
	                        delete _this2.visual;
	                        return defaultVisual;
	                    }
	                });
	                this.addVisual();
	            } else {
	                _get(Note.prototype.__proto__ || Object.getPrototypeOf(Note.prototype), 'renderVisual', this).call(this);
	            }
	        }
	    }, {
	        key: 'createLine',
	        value: function createLine() {
	            var options = this.options.line;

	            if (this.linePoints) {
	                var path = _kendoDrawing.drawing.Path.fromPoints(this.linePoints, {
	                    stroke: {
	                        color: options.color,
	                        width: options.width,
	                        dashType: options.dashType
	                    }
	                });

	                (0, _alignPathToPixel2.default)(path);
	                this.visual.append(path);
	            }
	        }
	    }, {
	        key: 'click',
	        value: function click(widget, e) {
	            var args = this.eventArgs(e);

	            if (!widget.trigger(_constants.NOTE_CLICK, args)) {
	                e.preventDefault();
	            }
	        }
	    }, {
	        key: 'hover',
	        value: function hover(widget, e) {
	            var args = this.eventArgs(e);

	            if (!widget.trigger(_constants.NOTE_HOVER, args)) {
	                e.preventDefault();
	            }
	        }
	    }, {
	        key: 'leave',
	        value: function leave(widget) {
	            widget._unsetActivePoint();
	        }
	    }, {
	        key: 'eventArgs',
	        value: function eventArgs(e) {
	            var options = this.options;

	            return {
	                element: e.target,
	                text: (0, _defined2.default)(options.label) ? options.label.text : "",
	                dataItem: this.dataItem,
	                series: this.series,
	                value: this.value,
	                category: this.category,
	                visual: this.visual
	            };
	        }
	    }]);

	    return Note;
	}(_boxElement2.default);

	(0, _setDefaultOptions2.default)(Note.prototype, {
	    icon: {
	        visible: true,
	        type: _constants.CIRCLE
	    },
	    label: {
	        position: _constants.INSIDE,
	        visible: true,
	        align: _constants.CENTER,
	        vAlign: _constants.CENTER
	    },
	    line: {
	        visible: true
	    },
	    visible: true,
	    position: _constants.TOP,
	    zIndex: 2
	});

	exports.default = Note;

/***/ },

/***/ 506:
/***/ function(module, exports) {

	module.exports = require("./box-element");

/***/ },

/***/ 507:
/***/ function(module, exports) {

	module.exports = require("./shape-element");

/***/ },

/***/ 508:
/***/ function(module, exports) {

	module.exports = require("../common/template");

/***/ },

/***/ 509:
/***/ function(module, exports) {

	module.exports = require("../common/align-path-to-pixel");

/***/ }

/******/ });