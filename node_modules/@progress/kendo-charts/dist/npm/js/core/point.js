module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(514);


/***/ },

/***/ 60:
/***/ function(module, exports) {

	module.exports = require("../common/constants");

/***/ },

/***/ 469:
/***/ function(module, exports) {

	module.exports = require("../common/rad");

/***/ },

/***/ 474:
/***/ function(module, exports) {

	module.exports = require("../common/round");

/***/ },

/***/ 514:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _constants = __webpack_require__(60);

	var _round = __webpack_require__(474);

	var _round2 = _interopRequireDefault(_round);

	var _rad = __webpack_require__(469);

	var _rad2 = _interopRequireDefault(_rad);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Point = function () {
	    function Point() {
	        var x = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];
	        var y = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];

	        _classCallCheck(this, Point);

	        this.x = x;
	        this.y = y;
	    }

	    _createClass(Point, [{
	        key: 'clone',
	        value: function clone() {
	            return new Point(this.x, this.y);
	        }
	    }, {
	        key: 'equals',
	        value: function equals(point) {
	            return point && this.x === point.x && this.y === point.y;
	        }
	    }, {
	        key: 'rotate',
	        value: function rotate(center, degrees) {
	            var theta = (0, _rad2.default)(degrees);
	            var cosT = Math.cos(theta);
	            var sinT = Math.sin(theta);
	            var cx = center.x;
	            var cy = center.y;
	            var x = this.x;
	            var y = this.y;


	            this.x = (0, _round2.default)(cx + (x - cx) * cosT + (y - cy) * sinT, _constants.COORD_PRECISION);

	            this.y = (0, _round2.default)(cy + (y - cy) * cosT - (x - cx) * sinT, _constants.COORD_PRECISION);

	            return this;
	        }
	    }, {
	        key: 'multiply',
	        value: function multiply(a) {

	            this.x *= a;
	            this.y *= a;

	            return this;
	        }
	    }, {
	        key: 'distanceTo',
	        value: function distanceTo(point) {
	            var dx = this.x - point.x;
	            var dy = this.y - point.y;

	            return Math.sqrt(dx * dx + dy * dy);
	        }
	    }], [{
	        key: 'onCircle',
	        value: function onCircle(center, angle, radius) {
	            var radians = (0, _rad2.default)(angle);

	            return new Point(center.x - radius * Math.cos(radians), center.y - radius * Math.sin(radians));
	        }
	    }]);

	    return Point;
	}();

	exports.default = Point;

/***/ }

/******/ });