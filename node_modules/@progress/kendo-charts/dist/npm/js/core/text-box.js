module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(537);


/***/ },

/***/ 23:
/***/ function(module, exports) {

	module.exports = require("@progress/kendo-drawing");

/***/ },

/***/ 60:
/***/ function(module, exports) {

	module.exports = require("../common/constants");

/***/ },

/***/ 134:
/***/ function(module, exports) {

	module.exports = require("../common");

/***/ },

/***/ 461:
/***/ function(module, exports) {

	module.exports = require("./box");

/***/ },

/***/ 506:
/***/ function(module, exports) {

	module.exports = require("./box-element");

/***/ },

/***/ 537:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _kendoDrawing = __webpack_require__(23);

	var _boxElement = __webpack_require__(506);

	var _boxElement2 = _interopRequireDefault(_boxElement);

	var _floatElement = __webpack_require__(538);

	var _floatElement2 = _interopRequireDefault(_floatElement);

	var _text = __webpack_require__(539);

	var _text2 = _interopRequireDefault(_text);

	var _box = __webpack_require__(461);

	var _box2 = _interopRequireDefault(_box);

	var _common = __webpack_require__(134);

	var _constants = __webpack_require__(60);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var ROWS_SPLIT_REGEX = /\n|\\n/m;

	var TextBox = function (_BoxElement) {
	    _inherits(TextBox, _BoxElement);

	    function TextBox(content, options) {
	        _classCallCheck(this, TextBox);

	        var _this = _possibleConstructorReturn(this, (TextBox.__proto__ || Object.getPrototypeOf(TextBox)).call(this, options));

	        _this.content = content;

	        _this._initContainer();
	        if (_this.options._autoReflow !== false) {
	            _this.reflow(new _box2.default());
	        }
	        return _this;
	    }

	    _createClass(TextBox, [{
	        key: '_initContainer',
	        value: function _initContainer() {
	            var options = this.options;
	            var rows = String(this.content).split(ROWS_SPLIT_REGEX);
	            var floatElement = new _floatElement2.default({ vertical: true, align: options.align, wrap: false });
	            var textOptions = (0, _common.deepExtend)({}, options, { opacity: 1, animation: null });

	            this.container = floatElement;
	            this.append(floatElement);

	            for (var rowIdx = 0; rowIdx < rows.length; rowIdx++) {
	                var text = new _text2.default(rows[rowIdx].trim(), textOptions);
	                floatElement.append(text);
	            }
	        }
	    }, {
	        key: 'reflow',
	        value: function reflow(targetBox) {
	            var options = this.options;
	            var visualFn = options.visual;
	            this.container.options.align = options.align;

	            if (visualFn && !this._boxReflow) {
	                var visualBox = targetBox;
	                if (!visualBox.hasSize()) {
	                    this._boxReflow = true;
	                    this.reflow(visualBox);
	                    this._boxReflow = false;
	                    visualBox = this.box;
	                }
	                var visual = this.visual = visualFn(this.visualContext(visualBox));

	                if (visual) {
	                    visualBox = (0, _common.rectToBox)(visual.clippedBBox() || new _kendoDrawing.geometry.Rect());

	                    visual.options.zIndex = options.zIndex;
	                    visual.options.noclip = options.noclip;
	                }

	                this.box = this.contentBox = this.paddingBox = visualBox;
	            } else {
	                _get(TextBox.prototype.__proto__ || Object.getPrototypeOf(TextBox.prototype), 'reflow', this).call(this, targetBox);

	                if (options.rotation) {
	                    var margin = (0, _common.getSpacing)(options.margin);
	                    var box = this.box.unpad(margin);

	                    this.targetBox = targetBox;
	                    this.normalBox = box.clone();

	                    box = this.rotate();
	                    box.translate(margin.left - margin.right, margin.top - margin.bottom);

	                    this.rotatedBox = box.clone();

	                    box.pad(margin);
	                }
	            }
	        }
	    }, {
	        key: 'createVisual',
	        value: function createVisual() {
	            var options = this.options;

	            if (!options.visible) {
	                return;
	            }

	            this.visual = new _kendoDrawing.drawing.Group({
	                transform: this.rotationTransform(),
	                zIndex: options.zIndex,
	                noclip: options.noclip
	            });

	            if (this.hasBox()) {
	                var box = _kendoDrawing.drawing.Path.fromRect(this.paddingBox.toRect(), this.visualStyle());
	                this.visual.append(box);
	            }
	        }
	    }, {
	        key: 'renderVisual',
	        value: function renderVisual() {
	            if (this.options.visual) {
	                this.addVisual();
	                this.createAnimation();
	            } else {
	                _get(TextBox.prototype.__proto__ || Object.getPrototypeOf(TextBox.prototype), 'renderVisual', this).call(this);
	            }
	        }
	    }, {
	        key: 'visualOptions',
	        value: function visualOptions() {
	            var options = this.options;
	            return {
	                background: options.background,
	                border: options.border,
	                color: options.color,
	                font: options.font,
	                margin: options.margin,
	                padding: options.padding,
	                visible: options.visible
	            };
	        }
	    }, {
	        key: 'visualContext',
	        value: function visualContext(targetBox) {
	            var _this2 = this;

	            return {
	                text: this.content,
	                rect: targetBox.toRect(),
	                sender: this.getChart(),
	                options: this.visualOptions(),
	                createVisual: function createVisual() {
	                    _this2._boxReflow = true;
	                    _this2.reflow(targetBox);
	                    _this2._boxReflow = false;
	                    return _this2.getDefaultVisual();
	                }
	            };
	        }
	    }, {
	        key: 'getDefaultVisual',
	        value: function getDefaultVisual() {
	            this.createVisual();
	            this.renderChildren();
	            var visual = this.visual;
	            delete this.visual;
	            return visual;
	        }
	    }, {
	        key: 'rotate',
	        value: function rotate() {
	            var options = this.options;
	            this.box.rotate(options.rotation);
	            this.align(this.targetBox, _constants.X, options.align);
	            this.align(this.targetBox, _constants.Y, options.vAlign);
	            return this.box;
	        }
	    }, {
	        key: 'rotationTransform',
	        value: function rotationTransform() {
	            var rotation = this.options.rotation;
	            if (!rotation) {
	                return null;
	            }

	            var _normalBox$center = this.normalBox.center();

	            var cx = _normalBox$center.x;
	            var cy = _normalBox$center.y;

	            var boxCenter = this.rotatedBox.center();

	            return _kendoDrawing.geometry.transform().translate(boxCenter.x - cx, boxCenter.y - cy).rotate(rotation, [cx, cy]);
	        }
	    }]);

	    return TextBox;
	}(_boxElement2.default);

	exports.default = TextBox;

/***/ },

/***/ 538:
/***/ function(module, exports) {

	module.exports = require("./float-element");

/***/ },

/***/ 539:
/***/ function(module, exports) {

	module.exports = require("./text");

/***/ }

/******/ });