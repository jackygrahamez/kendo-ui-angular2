module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(61);


/***/ },

/***/ 5:
/***/ function(module, exports) {

	module.exports = require("../../common/constants");

/***/ },

/***/ 7:
/***/ function(module, exports) {

	module.exports = require("../../common/defined");

/***/ },

/***/ 23:
/***/ function(module, exports) {

	module.exports = require("@progress/kendo-drawing");

/***/ },

/***/ 24:
/***/ function(module, exports) {

	module.exports = require("../constants");

/***/ },

/***/ 50:
/***/ function(module, exports) {

	module.exports = require("../../common/deep-extend");

/***/ },

/***/ 55:
/***/ function(module, exports) {

	module.exports = require("../../core");

/***/ },

/***/ 61:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _kendoDrawing = __webpack_require__(23);

	var _barLabel = __webpack_require__(62);

	var _barLabel2 = _interopRequireDefault(_barLabel);

	var _constants = __webpack_require__(24);

	var _color = __webpack_require__(63);

	var _color2 = _interopRequireDefault(_color);

	var _hasGradientOverlay = __webpack_require__(64);

	var _hasGradientOverlay2 = _interopRequireDefault(_hasGradientOverlay);

	var _core = __webpack_require__(55);

	var _pointEventsMixin = __webpack_require__(65);

	var _pointEventsMixin2 = _interopRequireDefault(_pointEventsMixin);

	var _noteMixin = __webpack_require__(66);

	var _noteMixin2 = _interopRequireDefault(_noteMixin);

	var _constants2 = __webpack_require__(5);

	var _alignPathToPixel = __webpack_require__(67);

	var _alignPathToPixel2 = _interopRequireDefault(_alignPathToPixel);

	var _valueOrDefault = __webpack_require__(68);

	var _valueOrDefault2 = _interopRequireDefault(_valueOrDefault);

	var _deepExtend = __webpack_require__(50);

	var _deepExtend2 = _interopRequireDefault(_deepExtend);

	var _template = __webpack_require__(69);

	var _template2 = _interopRequireDefault(_template);

	var _defined = __webpack_require__(7);

	var _defined2 = _interopRequireDefault(_defined);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var BAR_ALIGN_MIN_WIDTH = 6;

	var Bar = function (_ChartElement) {
	    _inherits(Bar, _ChartElement);

	    function Bar(value, options) {
	        _classCallCheck(this, Bar);

	        var _this = _possibleConstructorReturn(this, (Bar.__proto__ || Object.getPrototypeOf(Bar)).call(this));

	        _this.options = options;
	        _this.color = options.color || _constants2.WHITE;
	        _this.aboveAxis = (0, _valueOrDefault2.default)(_this.options.aboveAxis, true);
	        _this.value = value;
	        return _this;
	    }

	    _createClass(Bar, [{
	        key: 'render',
	        value: function render() {
	            if (this._rendered) {
	                return;
	            }

	            this._rendered = true;

	            this.createLabel();
	            this.createNote();

	            if (this.errorBar) {
	                this.append(this.errorBar);
	            }
	        }
	    }, {
	        key: 'createLabel',
	        value: function createLabel() {
	            var options = this.options;
	            var labels = options.labels;

	            if (labels.visible) {
	                var labelText = void 0;

	                if (labels.template) {
	                    var labelTemplate = (0, _template2.default)(labels.template);

	                    labelText = labelTemplate({
	                        dataItem: this.dataItem,
	                        category: this.category,
	                        value: this.value,
	                        percentage: this.percentage,
	                        stackValue: this.stackValue,
	                        runningTotal: this.runningTotal,
	                        total: this.total,
	                        series: this.series
	                    });
	                } else {
	                    labelText = this.formatValue(labels.format);
	                }

	                this.label = new _barLabel2.default(labelText, (0, _deepExtend2.default)({
	                    vertical: options.vertical
	                }, labels));
	                this.append(this.label);
	            }
	        }
	    }, {
	        key: 'formatValue',
	        value: function formatValue(format) {
	            return this.owner.formatPointValue(this, format);
	        }
	    }, {
	        key: 'reflow',
	        value: function reflow(targetBox) {
	            this.render();

	            var label = this.label;

	            this.box = targetBox;

	            if (label) {
	                label.options.aboveAxis = this.aboveAxis;
	                label.reflow(targetBox);
	            }

	            if (this.note) {
	                this.note.reflow(targetBox);
	            }

	            if (this.errorBars) {
	                for (var i = 0; i < this.errorBars.length; i++) {
	                    this.errorBars[i].reflow(targetBox);
	                }
	            }
	        }
	    }, {
	        key: 'createVisual',
	        value: function createVisual() {
	            var _this2 = this;

	            var box = this.box;
	            var options = this.options;

	            var customVisual = options.visual;

	            if (this.visible !== false) {
	                _get(Bar.prototype.__proto__ || Object.getPrototypeOf(Bar.prototype), 'createVisual', this).call(this);

	                if (customVisual) {
	                    var visual = this.rectVisual = customVisual({
	                        category: this.category,
	                        dataItem: this.dataItem,
	                        value: this.value,
	                        sender: this.getChart(),
	                        series: this.series,
	                        percentage: this.percentage,
	                        stackValue: this.stackValue,
	                        runningTotal: this.runningTotal,
	                        total: this.total,
	                        rect: box.toRect(),
	                        createVisual: function createVisual() {
	                            var group = new _kendoDrawing.drawing.Group();
	                            _this2.createRect(group);
	                            return group;
	                        },
	                        options: options
	                    });

	                    if (visual) {
	                        this.visual.append(visual);
	                    }
	                } else if (box.width() > 0 && box.height() > 0) {
	                    this.createRect(this.visual);
	                }
	            }
	        }
	    }, {
	        key: 'createRect',
	        value: function createRect(visual) {
	            var options = this.options;
	            var border = options.border;
	            var strokeOpacity = (0, _defined2.default)(border.opacity) ? border.opacity : options.opacity;
	            var rect = this.box.toRect();

	            rect.size.width = Math.round(rect.size.width);

	            var path = this.rectVisual = _kendoDrawing.drawing.Path.fromRect(rect, {
	                fill: {
	                    color: this.color,
	                    opacity: options.opacity
	                },
	                stroke: {
	                    color: this.getBorderColor(),
	                    width: border.width,
	                    opacity: strokeOpacity,
	                    dashType: border.dashType
	                }
	            });

	            var width = this.box.width();
	            var height = this.box.height();

	            var size = options.vertical ? width : height;

	            if (size > BAR_ALIGN_MIN_WIDTH) {
	                (0, _alignPathToPixel2.default)(path);

	                // Fixes lineJoin issue in firefox when the joined lines are parallel
	                if (width < 1 || height < 1) {
	                    path.options.stroke.lineJoin = "round";
	                }
	            }

	            visual.append(path);

	            if ((0, _hasGradientOverlay2.default)(options)) {
	                var overlay = this.createGradientOverlay(path, { baseColor: this.color }, (0, _deepExtend2.default)({
	                    end: !options.vertical ? [0, 1] : undefined
	                }, options.overlay));

	                visual.append(overlay);
	            }
	        }
	    }, {
	        key: 'createHighlight',
	        value: function createHighlight(style) {
	            var highlight = _kendoDrawing.drawing.Path.fromRect(this.box.toRect(), style);

	            return (0, _alignPathToPixel2.default)(highlight);
	        }
	    }, {
	        key: 'highlightVisual',
	        value: function highlightVisual() {
	            return this.rectVisual;
	        }
	    }, {
	        key: 'highlightVisualArgs',
	        value: function highlightVisualArgs() {
	            return {
	                options: this.options,
	                rect: this.box.toRect(),
	                visual: this.rectVisual
	            };
	        }
	    }, {
	        key: 'getBorderColor',
	        value: function getBorderColor() {
	            var color = this.color;
	            var border = this.options.border;
	            var brightness = border._brightness || _constants.BORDER_BRIGHTNESS;
	            var borderColor = border.color;

	            if (!(0, _defined2.default)(borderColor)) {
	                borderColor = new _color2.default(color).brightness(brightness).toHex();
	            }

	            return borderColor;
	        }
	    }, {
	        key: 'tooltipAnchor',
	        value: function tooltipAnchor() {
	            var options = this.options;
	            var box = this.box;
	            var aboveAxis = this.aboveAxis;

	            var clipBox = this.owner.pane.clipBox() || box;
	            var horizontalAlign = _constants2.LEFT;
	            var verticalAlign = _constants2.TOP;
	            var x = void 0,
	                y = void 0;

	            if (options.vertical) {
	                x = Math.min(box.x2, clipBox.x2) + _constants.TOOLTIP_OFFSET;
	                if (aboveAxis) {
	                    y = Math.max(box.y1, clipBox.y1);
	                } else {
	                    y = Math.min(box.y2, clipBox.y2);
	                    verticalAlign = _constants2.BOTTOM;
	                }
	            } else {
	                var x1 = Math.max(box.x1, clipBox.x1);
	                var x2 = Math.min(box.x2, clipBox.x2);

	                if (options.isStacked) {
	                    verticalAlign = _constants2.BOTTOM;
	                    if (aboveAxis) {
	                        horizontalAlign = _constants2.RIGHT;
	                        x = x2;
	                    } else {
	                        x = x1;
	                    }
	                    y = Math.max(box.y1, clipBox.y1) - _constants.TOOLTIP_OFFSET;
	                } else {
	                    if (aboveAxis) {
	                        x = x2 + _constants.TOOLTIP_OFFSET;
	                    } else {
	                        x = x1 - _constants.TOOLTIP_OFFSET;
	                        horizontalAlign = _constants2.RIGHT;
	                    }
	                    y = Math.max(box.y1, clipBox.y1);
	                }
	            }

	            return {
	                point: new _core.Point(x, y),
	                align: {
	                    horizontal: horizontalAlign,
	                    vertical: verticalAlign
	                }
	            };
	        }
	    }, {
	        key: 'overlapsBox',
	        value: function overlapsBox(box) {
	            return this.box.overlaps(box);
	        }
	    }]);

	    return Bar;
	}(_core.ChartElement);

	(0, _deepExtend2.default)(Bar.prototype, _pointEventsMixin2.default);
	(0, _deepExtend2.default)(Bar.prototype, _noteMixin2.default);

	Bar.prototype.defaults = {
	    border: {
	        width: 1
	    },
	    vertical: true,
	    overlay: {
	        gradient: _constants.GLASS
	    },
	    labels: {
	        visible: false,
	        format: "{0}"
	    },
	    opacity: 1,
	    notes: {
	        label: {}
	    }
	};

	exports.default = Bar;

/***/ },

/***/ 62:
/***/ function(module, exports) {

	module.exports = require("./bar-label");

/***/ },

/***/ 63:
/***/ function(module, exports) {

	module.exports = require("../utils/color");

/***/ },

/***/ 64:
/***/ function(module, exports) {

	module.exports = require("../utils/has-gradient-overlay");

/***/ },

/***/ 65:
/***/ function(module, exports) {

	module.exports = require("../mixins/point-events-mixin");

/***/ },

/***/ 66:
/***/ function(module, exports) {

	module.exports = require("../mixins/note-mixin");

/***/ },

/***/ 67:
/***/ function(module, exports) {

	module.exports = require("../../common/align-path-to-pixel");

/***/ },

/***/ 68:
/***/ function(module, exports) {

	module.exports = require("../../common/value-or-default");

/***/ },

/***/ 69:
/***/ function(module, exports) {

	module.exports = require("../../common/template");

/***/ }

/******/ });