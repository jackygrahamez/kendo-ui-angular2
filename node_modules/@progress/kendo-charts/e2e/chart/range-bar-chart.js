import 'core-js/es6';

import { deepExtend } from '../../src/common';

import { ok, equal } from '../../test/test-helpers';

import { createChart, destroyChart }  from '../test-helpers';
import '../../test/text-measure';
import '../../test/intl';

const positiveSeries = { type: "rangeColumn", data: [[1, 2]] };
const negativeSeries = { type: "rangeColumn", data: [[-1, -2]] };
const sparseSeries = { type: "rangeColumn", data: [null, [1, 2]] };
let chart;

// ------------------------------------------------------------
describe('Range Column Chart / aboveAxis', () => {
    afterEach(() => {
        destroyChart(chart);
    });


    it("is set to true when from < to", () => {
        chart = createChart({ series: [ positiveSeries ] });
        const bar = chart._plotArea.charts[0].points[0];

        ok(bar.aboveAxis);
    });

    it("is set to false when from > to", () => {
        chart = createChart({ series: [ negativeSeries ] });
        const bar = chart._plotArea.charts[0].points[0];

        ok(!bar.aboveAxis);
    });
});

// ------------------------------------------------------------
describe('Range Bar / Labels', () => {
    afterEach(() => {
        destroyChart(chart);
    });


    it("From label has default format", () => {
        chart = createChart({ series: [ deepExtend(positiveSeries, { labels: { visible: true } }) ] });
        const bar = chart._plotArea.charts[0].points[0];
        equal(bar.labelFrom.children[0].content, "1 - 2");
    });

    it("To label has default format", () => {
        chart = createChart({ series: [ deepExtend(positiveSeries, { labels: { visible: true } }) ] });
        const bar = chart._plotArea.charts[0].points[0];
        equal(bar.labelTo.children[0].content, "1 - 2");
    });

    it("Series defaults From label format overrides default format", () => {
        chart = createChart({series: [ positiveSeries ], seriesDefaults: [ deepExtend(positiveSeries, { labels: { visible: true, format: "{0}" } }) ] });

        const bar = chart._plotArea.charts[0].points[0];
        equal(bar.labelFrom.children[0].content, "1");
    });

    it("Series defaults To label format overrides default format", () => {
        chart = createChart({series: [ positiveSeries ], seriesDefaults: [ deepExtend(positiveSeries, { labels: { visible: true, format: "{1}" } }) ] });

        const bar = chart._plotArea.charts[0].points[0];
        equal(bar.labelTo.children[0].content, "2");
    });

    it("Label format configuration overrides default format", 2, () => {
        chart = createChart({ 
            series: [ deepExtend({}, positiveSeries, { 
                labels: { 
                    visible: true,
                    from: {
                        format: "{0}"
                    },
                    to: {
                        format: "{1}"
                    } 
                } 
            })] 
        });

        const bar = chart._plotArea.charts[0].points[0];

        equal(bar.labelFrom.children[0].content, "1");
        equal(bar.labelTo.children[0].content, "2");
    });

    it("Label visible configuration overrides seriesDefaults", 2, () => {
        chart = createChart({
            seriesDefaults: {
                labels: {
                    visible: true
                }
            },
            series: [ deepExtend({}, positiveSeries, { 
                labels: { 
                    from: {
                        visible: false,
                        format: "{0}"
                    },
                    to: {
                        format: "{1}"
                    }
                }}) 

            ]
        });

        const bar = chart._plotArea.charts[0].points[0];

        equal(bar.labelFrom, undefined);
        equal(bar.labelTo.options.visible, true);
    });

    it("Label format configuration overrides seriesDefaults", 2, () => {
        chart = createChart({
            seriesDefaults: {
                labels: {
                    visible: true,
                    format: "{0} - {1}"
                }
            },
            series: [ deepExtend({}, positiveSeries, { 
                labels: { 
                    from: {
                        format: "{0}"
                    },
                    to: {
                        format: "{1}"
                    }
                }})
            ]
        });

        const bar = chart._plotArea.charts[0].points[0];

        equal(bar.labelFrom.options.format, "{0}");
        equal(bar.labelTo.options.format, "{1}");
    });

    it("Label template configuration overrides seriesDefaults", 2, () => {
        chart = createChart({
            seriesDefaults: {
                labels: {
                    visible: true,
                    template: "{0} - {1}"
                }
            },
            series: [ deepExtend({}, positiveSeries, { 
                labels: { 
                    from: {
                        template: "{0}"
                    },
                    to: {
                        template: "{1}"
                    }
                }})
            ]
        });

        const bar = chart._plotArea.charts[0].points[0];

        equal(bar.labelFrom.options.template, "{0}");
        equal(bar.labelTo.options.template, "{1}");
    });

    it("Empty for null values", () => {
        chart = createChart({ series: [ deepExtend(sparseSeries, { labels: { visible: true } }) ] });
        const bar = chart._plotArea.charts[0].points[0];

        equal(bar.labelFrom.children[0].content, "");
    });
});
