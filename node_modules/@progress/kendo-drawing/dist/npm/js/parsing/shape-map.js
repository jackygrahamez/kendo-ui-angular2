module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(240);


/***/ },

/***/ 6:
/***/ function(module, exports) {

	module.exports = require("../geometry/point");

/***/ },

/***/ 240:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _point = __webpack_require__(6);

	var _point2 = _interopRequireDefault(_point);

	var _last = __webpack_require__(241);

	var _last2 = _interopRequireDefault(_last);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var ShapeMap = {
	    l: function l(path, options) {
	        var parameters = options.parameters;
	        var position = options.position;


	        for (var i = 0; i < parameters.length; i += 2) {
	            var point = new _point2.default(parameters[i], parameters[i + 1]);

	            if (options.isRelative) {
	                point.translateWith(position);
	            }

	            path.lineTo(point.x, point.y);

	            position.x = point.x;
	            position.y = point.y;
	        }
	    },

	    c: function c(path, options) {
	        var parameters = options.parameters;
	        var position = options.position;


	        for (var i = 0; i < parameters.length; i += 6) {
	            var controlOut = new _point2.default(parameters[i], parameters[i + 1]);
	            var controlIn = new _point2.default(parameters[i + 2], parameters[i + 3]);
	            var point = new _point2.default(parameters[i + 4], parameters[i + 5]);
	            if (options.isRelative) {
	                controlIn.translateWith(position);
	                controlOut.translateWith(position);
	                point.translateWith(position);
	            }

	            path.curveTo(controlOut, controlIn, point);

	            position.x = point.x;
	            position.y = point.y;
	        }
	    },

	    v: function v(path, options) {
	        var value = options.isRelative ? 0 : options.position.x;

	        toLineParamaters(options.parameters, true, value);
	        this.l(path, options);
	    },

	    h: function h(path, options) {
	        var value = options.isRelative ? 0 : options.position.y;

	        toLineParamaters(options.parameters, false, value);
	        this.l(path, options);
	    },

	    a: function a(path, options) {
	        var parameters = options.parameters;
	        var position = options.position;


	        for (var i = 0; i < parameters.length; i += 7) {
	            var radiusX = parameters[i];
	            var radiusY = parameters[i + 1];
	            var largeArc = parameters[i + 3];
	            var swipe = parameters[i + 4];
	            var endPoint = new _point2.default(parameters[i + 5], parameters[i + 6]);

	            if (options.isRelative) {
	                endPoint.translateWith(position);
	            }

	            path.arcTo(endPoint, radiusX, radiusY, largeArc, swipe);

	            position.x = endPoint.x;
	            position.y = endPoint.y;
	        }
	    },

	    s: function s(path, options) {
	        var parameters = options.parameters;
	        var position = options.position;
	        var previousCommand = options.previousCommand;

	        var lastControlIn = void 0;

	        if (previousCommand === "s" || previousCommand === "c") {
	            lastControlIn = (0, _last2.default)((0, _last2.default)(path.paths).segments).controlIn();
	        }

	        for (var i = 0; i < parameters.length; i += 4) {
	            var controlIn = new _point2.default(parameters[i], parameters[i + 1]);
	            var endPoint = new _point2.default(parameters[i + 2], parameters[i + 3]);
	            var controlOut = void 0;

	            if (options.isRelative) {
	                controlIn.translateWith(position);
	                endPoint.translateWith(position);
	            }

	            if (lastControlIn) {
	                controlOut = reflectionPoint(lastControlIn, position);
	            } else {
	                controlOut = position.clone();
	            }

	            lastControlIn = controlIn;

	            path.curveTo(controlOut, controlIn, endPoint);

	            position.x = endPoint.x;
	            position.y = endPoint.y;
	        }
	    },

	    q: function q(path, options) {
	        var parameters = options.parameters;
	        var position = options.position;


	        for (var i = 0; i < parameters.length; i += 4) {
	            var controlPoint = new _point2.default(parameters[i], parameters[i + 1]);
	            var endPoint = new _point2.default(parameters[i + 2], parameters[i + 3]);

	            if (options.isRelative) {
	                controlPoint.translateWith(position);
	                endPoint.translateWith(position);
	            }

	            var cubicControlPoints = quadraticToCubicControlPoints(position, controlPoint, endPoint);

	            path.curveTo(cubicControlPoints.controlOut, cubicControlPoints.controlIn, endPoint);

	            position.x = endPoint.x;
	            position.y = endPoint.y;
	        }
	    },

	    t: function t(path, options) {
	        var parameters = options.parameters;
	        var position = options.position;
	        var previousCommand = options.previousCommand;

	        var controlPoint = void 0;

	        if (previousCommand === "q" || previousCommand === "t") {
	            var lastSegment = (0, _last2.default)((0, _last2.default)(path.paths).segments);
	            controlPoint = lastSegment.controlIn().clone().translateWith(position.scaleCopy(-1 / 3)).scale(3 / 2);
	        }

	        for (var i = 0; i < parameters.length; i += 2) {
	            var endPoint = new _point2.default(parameters[i], parameters[i + 1]);
	            if (options.isRelative) {
	                endPoint.translateWith(position);
	            }

	            if (controlPoint) {
	                controlPoint = reflectionPoint(controlPoint, position);
	            } else {
	                controlPoint = position.clone();
	            }

	            var cubicControlPoints = quadraticToCubicControlPoints(position, controlPoint, endPoint);

	            path.curveTo(cubicControlPoints.controlOut, cubicControlPoints.controlIn, endPoint);

	            position.x = endPoint.x;
	            position.y = endPoint.y;
	        }
	    }
	};

	function toLineParamaters(parameters, isVertical, value) {
	    var insertPosition = isVertical ? 0 : 1;

	    for (var i = 0; i < parameters.length; i += 2) {
	        parameters.splice(i + insertPosition, 0, value);
	    }
	}

	function reflectionPoint(point, center) {
	    if (point && center) {
	        return center.scaleCopy(2).translate(-point.x, -point.y);
	    }
	}

	var third = 1 / 3;

	function quadraticToCubicControlPoints(position, controlPoint, endPoint) {
	    var scaledPoint = controlPoint.clone().scale(2 / 3);
	    return {
	        controlOut: scaledPoint.clone().translateWith(position.scaleCopy(third)),
	        controlIn: scaledPoint.translateWith(endPoint.scaleCopy(third))
	    };
	}

	exports.default = ShapeMap;

/***/ },

/***/ 241:
/***/ function(module, exports) {

	module.exports = require("../common/last");

/***/ }

/******/ });