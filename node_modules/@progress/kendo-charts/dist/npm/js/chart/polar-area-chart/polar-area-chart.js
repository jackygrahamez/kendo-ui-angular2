module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(258);


/***/ },

/***/ 24:
/***/ function(module, exports) {

	module.exports = require("../constants");

/***/ },

/***/ 246:
/***/ function(module, exports) {

	module.exports = require("../polar-line-chart/polar-line-chart");

/***/ },

/***/ 258:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _polarLineChart = __webpack_require__(246);

	var _polarLineChart2 = _interopRequireDefault(_polarLineChart);

	var _splinePolarAreaSegment = __webpack_require__(259);

	var _splinePolarAreaSegment2 = _interopRequireDefault(_splinePolarAreaSegment);

	var _polarAreaSegment = __webpack_require__(260);

	var _polarAreaSegment2 = _interopRequireDefault(_polarAreaSegment);

	var _constants = __webpack_require__(24);

	var _hasValue = __webpack_require__(261);

	var _hasValue2 = _interopRequireDefault(_hasValue);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var PolarAreaChart = function (_PolarLineChart) {
	    _inherits(PolarAreaChart, _PolarLineChart);

	    function PolarAreaChart() {
	        _classCallCheck(this, PolarAreaChart);

	        return _possibleConstructorReturn(this, (PolarAreaChart.__proto__ || Object.getPrototypeOf(PolarAreaChart)).apply(this, arguments));
	    }

	    _createClass(PolarAreaChart, [{
	        key: 'createSegment',
	        value: function createSegment(linePoints, currentSeries, seriesIx) {
	            var style = (currentSeries.line || {}).style;
	            var segment = void 0;

	            if (style === _constants.SMOOTH) {
	                segment = new _splinePolarAreaSegment2.default(linePoints, null, false, currentSeries, seriesIx);
	            } else {
	                segment = new _polarAreaSegment2.default(linePoints, [], currentSeries, seriesIx);
	            }
	            return segment;
	        }
	    }, {
	        key: 'createMissingValue',
	        value: function createMissingValue(value, missingValues) {
	            var missingValue = void 0;

	            if ((0, _hasValue2.default)(value.x) && missingValues !== _constants.INTERPOLATE) {
	                missingValue = {
	                    x: value.x,
	                    y: value.y
	                };
	                if (missingValues === _constants.ZERO) {
	                    missingValue.y = 0;
	                }
	            }

	            return missingValue;
	        }
	    }, {
	        key: 'seriesMissingValues',
	        value: function seriesMissingValues(series) {
	            return series.missingValues || _constants.ZERO;
	        }
	    }, {
	        key: '_hasMissingValuesGap',
	        value: function _hasMissingValuesGap() {
	            var series = this.options.series;

	            for (var idx = 0; idx < series.length; idx++) {
	                if (this.seriesMissingValues(series[idx]) === _constants.GAP) {
	                    return true;
	                }
	            }
	        }
	    }, {
	        key: 'sortPoints',
	        value: function sortPoints(points) {
	            points.sort(xComparer);

	            if (this._hasMissingValuesGap()) {
	                for (var idx = 0; idx < points.length; idx++) {
	                    var point = points[idx];
	                    if (point) {
	                        var value = point.value;
	                        if (!(0, _hasValue2.default)(value.y) && this.seriesMissingValues(point.series) === _constants.GAP) {
	                            delete points[idx];
	                        }
	                    }
	                }
	            }

	            return points;
	        }
	    }]);

	    return PolarAreaChart;
	}(_polarLineChart2.default);

	function xComparer(a, b) {
	    return a.value.x - b.value.x;
	}

	exports.default = PolarAreaChart;

/***/ },

/***/ 259:
/***/ function(module, exports) {

	module.exports = require("./spline-polar-area-segment");

/***/ },

/***/ 260:
/***/ function(module, exports) {

	module.exports = require("./polar-area-segment");

/***/ },

/***/ 261:
/***/ function(module, exports) {

	module.exports = require("../utils/has-value");

/***/ }

/******/ });