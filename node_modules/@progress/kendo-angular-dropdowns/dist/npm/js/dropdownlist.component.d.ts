import '@telerik/kendo-theme-default/styles/packages/dropdowns';
import { ElementRef, EventEmitter, OnInit, OnDestroy, AfterViewChecked, Renderer } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { IPopupSettings } from './popup-settings';
import { SelectionService } from './selection.service';
import { NavigationService } from './navigation.service';
import { ItemTemplateDirective } from './templates/item-template.directive';
import { ValueTemplateDirective } from './templates/value-template.directive';
import { HeaderTemplateDirective } from './templates/header-template.directive';
import { FooterTemplateDirective } from './templates/footer-template.directive';
/**
 * @hidden
 */
export declare const DROPDOWNLIST_VALUE_ACCESSOR: any;
/**
 * Represents the Kendo UI DropDownList component for Angular.
 *
 * @example
 * ```ts-preview
 * @@Component({
 * selector: 'my-app',
 * template: `
 *  <kendo-dropdownlist [data]="listItems">
 *  </kendo-dropdownlist>
 * `
 * })
 * class AppComponent {
 *   public listItems: Array<string> = ["Item 1", "Item 2", "Item 3", "Item 4"];
 * }
 * ```
 */
export declare class DropDownListComponent implements ControlValueAccessor, OnInit, OnDestroy, AfterViewChecked {
    dataItem: any;
    private _data;
    private _open;
    private _previousValue;
    /**
     * Sets or gets the `open` property of the DropDownList.
     *
     * > The `open` property determines whether the DropDownList's popup list is visible or not.
     */
    open: boolean;
    /**
     * Sets the data of the DropDownList.
     *
     * > The data has to be provided in an array-like list.
     */
    data: any;
    /**
     * Sets the value of the DropDownList. It could be either of the *primivite* (string numbers)
     * or of the *complex* (objects) type. Use the `valuePrimitive` option to define the type.
     *
     * > Selected values that are not present in the source will be ignored.
     */
    value: any;
    /**
     * Sets the data item field that represents the item text.
     *
     * Do not define it if the data contains only primitive values.
     */
    textField: string;
    /**
     * Sets the data item field that represents the item value.
     *
     * Do not define it if the data contains only primitive values.
     */
    valueField: string;
    /**
     * Configures the popup of the DropDownList. The available options of the `IPopupSettings` are:
     *
     * - `width: Number`&mdash;Sets the width of the popup container. By default will be used the width of the host element.
     * - `height: Number`&mdash;Sets the height of the popup container. By default height is 200px.
     */
    popupSettings: IPopupSettings;
    /**
     * Sets the text of the default empty item. The type of the defined value has to match the data type.
     */
    defaultItem: any;
    /**
     * Sets the disabled state of the component.
     */
    disabled: boolean;
    /**
     * Enables the [filtering]({% slug overview_ddl_kendouiforangular %}#filtering) functionality of the DropDownList.
     */
    filterable: boolean;
    /**
     * Enables a case-insensitive search. Use this option when `filtration` is disabled.
     */
    ignoreCase: boolean;
    /**
     * Sets the delay before an item search is performed. Use this option when `filtration` is disabled.
     */
    delay: number;
    /**
     * Specifies the type of the selected value. If set to `true`, the selected value has to be of a *primitive* value.
     *
     * For more details, refer to the section on
     * the [`valuePrimitive`]({% slug overview_ddl_kendouiforangular %}#specify-the-value-type) property.
     */
    valuePrimitive: boolean;
    /**
     * Specifies the [`tabIndex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.
     */
    tabIndex: number;
    /**
     * This event is triggered when value is changed.
     *
     * For more details, refer to the section on the [`valueChange`]({% slug overview_ddl_kendouiforangular %}#on-value-change) event.
     */
    valueChange: EventEmitter<any>;
    /**
     * This event is triggered when the user types in the filter input. You can filter the source
     * based on the passed filtration value.
     *
     * For more details, refer to the section on the [`filterChange`]({% slug overview_ddl_kendouiforangular %}#on-filter-change) event.
     */
    filterChange: EventEmitter<any>;
    /**
     * This event is triggered when the item selection is changed.
     *
     * For more details, refer to the section on
     * the [`selectionChange`]({% slug overview_ddl_kendouiforangular %}#on-change-of-item-selection) event.
     */
    selectionChange: EventEmitter<any>;
    protected itemTemplate: ItemTemplateDirective;
    protected valueTemplate: ValueTemplateDirective;
    protected headerTemplate: HeaderTemplateDirective;
    protected footerTemplate: FooterTemplateDirective;
    protected filterInput: ElementRef;
    protected blur(): void;
    protected focus(): void;
    protected keydown(event: KeyboardEvent): void;
    protected keypress(event: KeyboardEvent): void;
    protected click(): void;
    readonly widgetClasses: boolean;
    isFocused: boolean;
    readonly role: string;
    readonly widgetTabIndex: number;
    readonly ariaDisabled: boolean;
    readonly ariaHasPopup: boolean;
    readonly ariaExpanded: boolean;
    readonly ariaOwns: string;
    readonly ariaActivedescendant: string;
    protected listBoxId: string;
    protected optionPrefix: string;
    private word;
    private last;
    private typingTimeout;
    protected onTouchedCallback: Function;
    protected onChangeCallback: Function;
    private selectionService;
    private changeSubscribtion;
    private selectSubscribtion;
    private navigationService;
    private navigationSubscribtion;
    private enterSubscription;
    private openSubscribtion;
    private closeSubscription;
    private documentClick;
    private filterFocused;
    private wrapperBlurred;
    private componentBlurredSubscription;
    private renderer;
    private filterText;
    private wrapper;
    private popupWidth;
    private _isFocused;
    constructor(selectionService: SelectionService, navigationService: NavigationService, wrapper: ElementRef, renderer: Renderer);
    onFilterFocus(): void;
    ngAfterViewChecked(): void;
    private handleItemChange(event);
    private handleItemSelect(event);
    private handleEnter();
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: any): void;
    /**
     * @hidden
     */
    writeValue(value: any): void;
    /**
     * @hidden
     */
    registerOnChange(fn: any): void;
    /**
     * @hidden
     */
    registerOnTouched(fn: any): void;
    protected verifySettings(): void;
    protected setHeaderClasses(): Object;
    protected setListContainerClasses(): Object;
    protected setDefaultItemClasses(): Object;
    protected getDefaultItemText(): any;
    protected getValue(): any;
    protected getText(): any;
    protected getWidth(): string;
    protected getHeight(): any;
    protected componentBlur(): void;
    protected onMouseDown(event: any): void;
    protected onKeyPress(event: any): void;
    protected search(): void;
    protected selectNext(): void;
    protected change(dataItem: any): void;
    protected navigate(index: number): void;
    protected resolveInternalState(state: any): void;
    protected handleFilter(event: any): void;
}
