module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(301);


/***/ },

/***/ 23:
/***/ function(module, exports) {

	module.exports = require("@progress/kendo-drawing");

/***/ },

/***/ 60:
/***/ function(module, exports) {

	module.exports = require("../common/constants");

/***/ },

/***/ 107:
/***/ function(module, exports) {

	module.exports = require("./constants");

/***/ },

/***/ 110:
/***/ function(module, exports) {

	module.exports = require("../core");

/***/ },

/***/ 126:
/***/ function(module, exports) {

	module.exports = require("./chart-events");

/***/ },

/***/ 134:
/***/ function(module, exports) {

	module.exports = require("../common");

/***/ },

/***/ 301:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _kendoDrawing = __webpack_require__(23);

	var _chartEvents = __webpack_require__(126);

	var _chartEvents2 = _interopRequireDefault(_chartEvents);

	var _core = __webpack_require__(110);

	var _constants = __webpack_require__(107);

	var _constants2 = __webpack_require__(60);

	var _common = __webpack_require__(134);

	var _toDate = __webpack_require__(302);

	var _toDate2 = _interopRequireDefault(_toDate);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var ZOOM_ACCELERATION = 3;

	function createDiv(className) {
	    var element = document.createElement("div");
	    if (className) {
	        element.className = className;
	    }

	    return element;
	}

	function closestHandle(element) {
	    var current = element;
	    while (current && !(0, _common.hasClasses)(current, "k-handle")) {
	        current = current.parentNode;
	    }

	    return current;
	}

	var Selection = function (_Observable) {
	    _inherits(Selection, _Observable);

	    function Selection(chart, categoryAxis, options) {
	        _classCallCheck(this, Selection);

	        var _this = _possibleConstructorReturn(this, (Selection.__proto__ || Object.getPrototypeOf(Selection)).call(this));

	        var chartElement = chart.element;
	        var valueAxis = _this.getValueAxis(categoryAxis);
	        _this.options = (0, _common.deepExtend)({}, _this.options, options);
	        _this.chart = chart;
	        _this.chartElement = chartElement;
	        _this.categoryAxis = categoryAxis;
	        _this._dateAxis = _this.categoryAxis instanceof _core.DateCategoryAxis;
	        _this.valueAxis = valueAxis;

	        _this.initOptions();

	        if (_this.options.visible) {
	            _this.createElements();

	            _this.set(_this._index(_this.options.from), _this._index(_this.options.to));
	            _this.bind(_this.events, _this.options);

	            _this.bindEvents();
	        }
	        return _this;
	    }

	    _createClass(Selection, [{
	        key: 'createElements',
	        value: function createElements() {
	            var options = this.options;
	            var wrapper = this.wrapper = createDiv("k-selector");
	            (0, _common.elementStyles)(wrapper, {
	                top: options.offset.top,
	                left: options.offset.left,
	                width: options.width,
	                height: options.height
	            });
	            var selection = this.selection = createDiv("k-selection");
	            this.leftMask = createDiv("k-mask");
	            this.rightMask = createDiv("k-mask");

	            wrapper.appendChild(this.leftMask);
	            wrapper.appendChild(this.rightMask);
	            wrapper.appendChild(selection);

	            selection.appendChild(createDiv("k-selection-bg"));

	            var leftHandle = this.leftHandle = createDiv("k-handle k-leftHandle");
	            var rightHandle = this.rightHandle = createDiv("k-handle k-rightHandle");
	            leftHandle.appendChild(createDiv());
	            rightHandle.appendChild(createDiv());

	            selection.appendChild(leftHandle);
	            selection.appendChild(rightHandle);

	            this.chartElement.appendChild(wrapper);
	            var selectionStyles = (0, _common.elementStyles)(selection, ["borderLeftWidth", "borderRightWidth", "height"]);
	            var leftHandleHeight = (0, _common.elementStyles)(leftHandle, "height").height;
	            var rightHandleHeight = (0, _common.elementStyles)(rightHandle, "height").height;

	            options.selection = {
	                border: {
	                    left: selectionStyles.borderLeftWidth,
	                    right: selectionStyles.borderRightWidth
	                }
	            };

	            (0, _common.elementStyles)(leftHandle, {
	                top: (selectionStyles.height - leftHandleHeight) / 2
	            });

	            (0, _common.elementStyles)(rightHandle, {
	                top: (selectionStyles.height - rightHandleHeight) / 2
	            });

	            wrapper.style.cssText = wrapper.style.cssText;
	        }
	    }, {
	        key: 'bindEvents',
	        value: function bindEvents() {
	            this._mousewheelHandler = this._mousewheel.bind(this);

	            (0, _common.bindEvents)(this.wrapper, _defineProperty({}, _constants.MOUSEWHEEL, this._mousewheelHandler));

	            this._chartEvents = new _chartEvents2.default(this.wrapper, {
	                start: this._start.bind(this),
	                move: this._move.bind(this),
	                end: this._end.bind(this),
	                tap: this._tap.bind(this),
	                press: this._press.bind(this)
	            });
	        }
	    }, {
	        key: 'initOptions',
	        value: function initOptions() {
	            var options = this.options;
	            var categoryAxis = this.categoryAxis;
	            var valueAxis = this.valueAxis;

	            var categoryAxisLineBox = categoryAxis.lineBox();
	            var valueAxisLineBox = valueAxis.lineBox();

	            if (this._dateAxis) {
	                (0, _common.deepExtend)(options, {
	                    min: (0, _toDate2.default)(options.min),
	                    max: (0, _toDate2.default)(options.max),
	                    from: (0, _toDate2.default)(options.from),
	                    to: (0, _toDate2.default)(options.to)
	                });
	            }

	            var _elementStyles = (0, _common.elementStyles)(this.chartElement, ["paddingLeft", "paddingTop"]);

	            var paddingLeft = _elementStyles.paddingLeft;
	            var paddingTop = _elementStyles.paddingTop;


	            this.options = (0, _common.deepExtend)({}, {
	                width: categoryAxisLineBox.width(),
	                height: valueAxisLineBox.height(),
	                padding: {
	                    left: paddingLeft,
	                    top: paddingTop
	                },
	                offset: {
	                    left: valueAxisLineBox.x2 + paddingLeft,
	                    top: valueAxisLineBox.y1 + paddingTop
	                },
	                from: options.min,
	                to: options.max
	            }, options);
	        }
	    }, {
	        key: 'destroy',
	        value: function destroy() {
	            if (this._chartEvents) {
	                this._chartEvents.destroy();
	            }

	            clearTimeout(this._mwTimeout);
	            this._state = null;

	            if (this.wrapper) {
	                (0, _common.unbindEvents)(this.wrapper, _defineProperty({}, _constants.MOUSEWHEEL, this._mousewheelHandler));
	                this.chartElement.removeChild(this.wrapper);
	            }
	        }
	    }, {
	        key: '_rangeEventArgs',
	        value: function _rangeEventArgs(range) {

	            return {
	                axis: this.categoryAxis.options,
	                from: this._value(range.from),
	                to: this._value(range.to)
	            };
	        }
	    }, {
	        key: '_start',
	        value: function _start(e) {
	            var options = this.options;
	            var target = e.target;

	            if (this._state || !target) {
	                return;
	            }

	            this.chart._unsetActivePoint();
	            this._state = {
	                moveTarget: closestHandle(target) || target,
	                startLocation: e.pageX || 0,
	                range: {
	                    from: this._index(options.from),
	                    to: this._index(options.to)
	                }
	            };

	            var args = this._rangeEventArgs({
	                from: this._index(options.from),
	                to: this._index(options.to)
	            });

	            if (this.trigger(_constants.SELECT_START, args)) {
	                this._state = null;
	            }
	        }
	    }, {
	        key: '_press',
	        value: function _press(e) {
	            var handle = void 0;
	            if (this._state) {
	                handle = this._state.moveTarget;
	            } else {
	                handle = closestHandle(e.target);
	            }
	            if (handle) {
	                (0, _common.addClass)(handle, "k-handle-active");
	            }
	        }
	    }, {
	        key: '_move',
	        value: function _move(e) {
	            if (!this._state) {
	                return;
	            }

	            var state = this._state;
	            var options = this.options;
	            var categories = this.categoryAxis.options.categories;
	            var range = state.range;
	            var target = state.moveTarget;

	            var from = this._index(options.from);
	            var to = this._index(options.to);
	            var min = this._index(options.min);
	            var max = this._index(options.max);
	            var delta = state.startLocation - e.pageX;
	            var oldRange = { from: range.from, to: range.to };
	            var span = range.to - range.from;
	            var scale = (0, _common.elementStyles)(this.wrapper, "width").width / (categories.length - 1);
	            var offset = Math.round(delta / scale);

	            if (!target) {
	                return;
	            }

	            if ((0, _common.hasClasses)(target, "k-selection k-selection-bg")) {
	                range.from = Math.min(Math.max(min, from - offset), max - span);
	                range.to = Math.min(range.from + span, max);
	            } else if ((0, _common.hasClasses)(target, "k-leftHandle")) {
	                range.from = Math.min(Math.max(min, from - offset), max - 1);
	                range.to = Math.max(range.from + 1, range.to);
	            } else if ((0, _common.hasClasses)(target, "k-rightHandle")) {
	                range.to = Math.min(Math.max(min + 1, to - offset), max);
	                range.from = Math.min(range.to - 1, range.from);
	            }

	            if (range.from !== oldRange.from || range.to !== oldRange.to) {
	                this.move(range.from, range.to);
	                this.trigger(_constants.SELECT, this._rangeEventArgs(range));
	            }
	        }
	    }, {
	        key: '_end',
	        value: function _end() {
	            if (this._state) {
	                var moveTarget = this._state.moveTarget;
	                if (moveTarget) {
	                    (0, _common.removeClass)(moveTarget, "k-handle-active");
	                }

	                var range = this._state.range;
	                this.set(range.from, range.to);
	                this.trigger(_constants.SELECT_END, this._rangeEventArgs(range));

	                delete this._state;
	            }
	        }
	    }, {
	        key: '_tap',
	        value: function _tap(e) {
	            var options = this.options;
	            var categoryAxis = this.categoryAxis;

	            var coords = this.chart._eventCoordinates(e);
	            var categoryIx = categoryAxis.pointCategoryIndex(new _core.Point(coords.x, categoryAxis.box.y1));
	            var from = this._index(options.from);
	            var to = this._index(options.to);
	            var min = this._index(options.min);
	            var max = this._index(options.max);
	            var span = to - from;
	            var mid = from + span / 2;
	            var range = {};
	            var rightClick = e.originalEvent.which === 3;
	            var offset = Math.round(mid - categoryIx);

	            if (this._state || rightClick) {
	                return;
	            }

	            this.chart._unsetActivePoint();

	            if (!categoryAxis.options.justified) {
	                offset--;
	            }

	            range.from = Math.min(Math.max(min, from - offset), max - span);

	            range.to = Math.min(range.from + span, max);

	            this._start(e);
	            if (this._state) {
	                this._state.range = range;
	                this.trigger(_constants.SELECT, this._rangeEventArgs(range));
	                this._end();
	            }
	        }
	    }, {
	        key: '_mousewheel',
	        value: function _mousewheel(e) {
	            var _this2 = this;

	            var delta = (0, _common.mousewheelDelta)(e);

	            this._start({ target: this.selection });

	            if (this._state) {
	                var range = this._state.range;

	                e.preventDefault();
	                e.stopPropagation();

	                if (Math.abs(delta) > 1) {
	                    delta *= ZOOM_ACCELERATION;
	                }

	                if (this.options.mousewheel.reverse) {
	                    delta *= -1;
	                }

	                if (this.expand(delta)) {
	                    this.trigger(_constants.SELECT, {
	                        axis: this.categoryAxis.options,
	                        delta: delta,
	                        originalEvent: e,
	                        from: this._value(range.from),
	                        to: this._value(range.to)
	                    });
	                }

	                if (this._mwTimeout) {
	                    clearTimeout(this._mwTimeout);
	                }

	                this._mwTimeout = setTimeout(function () {
	                    _this2._end();
	                }, _constants.MOUSEWHEEL_DELAY);
	            }
	        }
	    }, {
	        key: '_index',
	        value: function _index(value) {
	            var index = value;

	            if (value instanceof Date) {
	                index = this.categoryAxis.categoryIndex(value);
	            }

	            return index;
	        }
	    }, {
	        key: '_value',
	        value: function _value(index) {
	            var categories = this.categoryAxis.options.categories;
	            var value = index;

	            if (this._dateAxis) {
	                if (index > categories.length - 1) {
	                    value = this.options.max;
	                } else {
	                    value = categories[Math.ceil(index)];
	                }
	            }

	            return value;
	        }
	    }, {
	        key: '_slot',
	        value: function _slot(value) {
	            var categoryAxis = this.categoryAxis;
	            var index = this._index(value);

	            return categoryAxis.getSlot(index, index, true);
	        }
	    }, {
	        key: 'move',
	        value: function move(from, to) {
	            var options = this.options;
	            var offset = options.offset;
	            var padding = options.padding;
	            var border = options.selection.border;

	            var box = this._slot(from);
	            var leftMaskWidth = (0, _common.round)(box.x1 - offset.left + padding.left);

	            (0, _common.elementStyles)(this.leftMask, {
	                width: leftMaskWidth
	            });
	            (0, _common.elementStyles)(this.selection, {
	                left: leftMaskWidth
	            });

	            box = this._slot(to);

	            var rightMaskWidth = (0, _common.round)(options.width - (box.x1 - offset.left + padding.left));
	            (0, _common.elementStyles)(this.rightMask, {
	                width: rightMaskWidth
	            });

	            var distance = options.width - rightMaskWidth;
	            if (distance !== options.width) {
	                distance += border.right;
	            }

	            (0, _common.elementStyles)(this.rightMask, {
	                left: distance
	            });
	            (0, _common.elementStyles)(this.selection, {
	                width: Math.max(options.width - (leftMaskWidth + rightMaskWidth) - border.right, 0)
	            });
	        }
	    }, {
	        key: 'set',
	        value: function set(from, to) {
	            var options = this.options;
	            var min = this._index(options.min);
	            var max = this._index(options.max);
	            var fromValue = (0, _common.limitValue)(this._index(from), min, max);
	            var toValue = (0, _common.limitValue)(this._index(to), from + 1, max);

	            if (options.visible) {
	                this.move(fromValue, toValue);
	            }

	            options.from = this._value(fromValue);
	            options.to = this._value(toValue);
	        }
	    }, {
	        key: 'expand',
	        value: function expand(delta) {
	            var options = this.options;
	            var min = this._index(options.min);
	            var max = this._index(options.max);
	            var zDir = options.mousewheel.zoom;
	            var from = this._index(options.from);
	            var to = this._index(options.to);
	            var range = { from: from, to: to };
	            var oldRange = (0, _common.deepExtend)({}, range);

	            if (this._state) {
	                range = this._state.range;
	            }

	            if (zDir !== _constants2.RIGHT) {
	                range.from = (0, _common.limitValue)((0, _common.limitValue)(from - delta, 0, to - 1), min, max);
	            }

	            if (zDir !== _constants2.LEFT) {
	                range.to = (0, _common.limitValue)((0, _common.limitValue)(to + delta, range.from + 1, max), min, max);
	            }

	            if (range.from !== oldRange.from || range.to !== oldRange.to) {
	                this.set(range.from, range.to);
	                return true;
	            }
	        }
	    }, {
	        key: 'getValueAxis',
	        value: function getValueAxis(categoryAxis) {
	            var axes = categoryAxis.pane.axes;
	            var axesCount = axes.length;

	            for (var i = 0; i < axesCount; i++) {
	                var axis = axes[i];

	                if (axis.options.vertical !== categoryAxis.options.vertical) {
	                    return axis;
	                }
	            }
	        }
	    }]);

	    return Selection;
	}(_kendoDrawing.Observable);

	Selection.prototype.events = [_constants.SELECT_START, _constants.SELECT, _constants.SELECT_END];

	(0, _common.setDefaultOptions)(Selection.prototype, {
	    visible: true,
	    mousewheel: {
	        zoom: "both"
	    },
	    min: _constants2.MIN_VALUE,
	    max: _constants2.MAX_VALUE
	});

	exports.default = Selection;

/***/ },

/***/ 302:
/***/ function(module, exports) {

	module.exports = require("../date-utils/to-date");

/***/ }

/******/ });