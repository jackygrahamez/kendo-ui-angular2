import 'core-js/es6';

import { Ring, Box, Point } from '../../src/core';
import RadarPlotArea from '../../src/chart/plotarea/radar-plotarea';
import RadarLineChart from '../../src/chart/radar-line-chart/radar-line-chart';

import { deepExtend } from '../../src/common';

import { ok, equal, arrayClose, mapSegments } from '../../test/test-helpers';

const chartBox = new Box(0, 0, 800, 600);
const TOLERANCE = 1;

let plotArea, chart, pointsXY;

function getSegmentAt(chart, idx) {
    return chart._segments[idx || 0].visual;
}

function createChart(series, options) {
    plotArea = new RadarPlotArea(series,
        deepExtend({
            categoryAxis: {
                majorGridLines: { visible: false },
                visible: false
            },
            valueAxis: {
                majorGridLines: { visible: false },
                visible: false,
                startValue: function() {
                    return 0;
                }
            },
            plotArea: {
                padding: 35
            }
        }, options)
    );

    chart = plotArea.charts[0];

    plotArea.reflow(chartBox);
    plotArea.renderVisual();
    pointsXY = mapSegments(getSegmentAt(chart).segments);
}

// ------------------------------------------------------------
describe('Radar Line Chart / Positive values', () => {
    beforeEach(() => {
        createChart([{
            type: "radarLine",
            data: [1, 2, 3]
        }]);
    });

    it("rendered on polar axis", () => {
        arrayClose(pointsXY, [
            [400, 212], [553, 388], [171, 433]
        ], TOLERANCE);
    });

    it("line is closed when all points are non-null", () => {
        ok(getSegmentAt(chart).options.closed);
    });

    it("line is not closed if any of the points is null", () => {
        createChart([{
            type: "radarLine",
            data: [1, 2, null]
        }]);

        ok(!getSegmentAt(chart).options.closed);
    });
});

// ------------------------------------------------------------
describe('RadarLine Chart / Values exceeding axis min or max options ', () => {

    it("values are limited", 2, () => {
        const plotArea = {
            categoryAxis:  {
                getSlot: function() {
                     return new Ring(new Point());
                },
                lineBox: function() {
                    return new Box(0,2,2,2);
                },
                options: {
                    categories: ["A", "B"]
                }
            },
            valueAxis: {
                getSlot: function(a,b, limit) {
                    ok(limit);
                    return new Box();
                },
                options: {
                    axisCrossingValue: 0
                },
                startValue: function() {
                    return 0;
                }
            },
            seriesCategoryAxis: function() {
                return plotArea.categoryAxis;
            }
        };

        const chart = new RadarLineChart(plotArea, {series: [{
            type: "radaLine",
            data: [1,2]
        }]});

        chart.reflow();
    });
});
