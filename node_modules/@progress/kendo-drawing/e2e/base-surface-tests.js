import 'core-js/es6';
import { Group } from '../src/shapes';
import { withRoot, $ } from 'e2e-utils';
import { ok, equal } from '../test/test-helpers'

export function baseSurfaceTests(name, TSurface) {
    let container;
    let surface;

    function createSurface(options) {
        if (surface) {
            surface.destroy();
        }

        surface = new TSurface(container[0], options);
    }

    describe("Surface Base Tests / " + name, () => {
        afterEach(() => {
            surface.destroy();
        });

        beforeEach(withRoot((root) => {
            container = $("<div>").appendTo(root);
            createSurface();
        }));

        it("sets initial options", () => {
            createSurface({ foo: true });
            ok(surface.options.foo);
        });

        it("does not set initial width", () => {
            equal(surface.element.style.width, "");
        });

        it("sets initial width", () => {
            createSurface({ width: "500px" });
            equal(surface.element.style.width, "500px");
        });

        it("does not set initial height", () => {
            equal(surface.element.style.height, "");
        });

        it("sets initial height", () => {
            createSurface({ height: "500px" });
            equal(surface.element.style.height, "500px");
        });

        it("draw attaches element to root node", () => {
            let group = new Group();
            surface.draw(group);

            equal(surface._root.childNodes[0].srcElement, group);
        });

        it("draw attaches element to export visual", () => {
            let group = new Group();
            surface.draw(group);

            equal(surface.exportVisual().children[0], group);
        });

        it("draw appends element to export visual", () => {
            surface.draw(new Group());
            surface.draw(new Group());

            equal(surface.exportVisual().children.length, 2);
        });

        it("draw doesn't reparent visual", () => {
            let parent = new Group();
            let child = new Group();
            parent.append(child);

            surface.draw(parent);

            equal(child.parent, parent);
        });

        it("clear removes element from root node", () => {
            let group = new Group();
            surface.draw(group);
            surface.clear();

            equal(surface._root.childNodes.length, 0);
        });

        it("clear removes elements from export visual", () => {
            surface.draw(new Group());
            surface.clear();

            equal(surface.exportVisual().children.length, 0);
        });

        it("size returns element dimensions", () => {
            surface.size({ width: 1000, height: 1000 });

            equal(surface.size(), {
                width: 1000,
                height: 1000
            });
        });

        it("size sets element dimensions", () => {
            surface.size({
                width: 100,
                height: 100
            });

            equal(surface.size(), {
                width: 100,
                height: 100
            });
        });

        it("size caches size even if element is hidden", () => {
            $(container).css("display", "none");
            surface._resize = function() {
                equal(surface._size, {
                    width: 100,
                    height: 100
                });
            };

            surface.size({
                width: 100,
                height: 100
            });
        });

    });
}

export function baseSurfaceEventTests(name, TSurface) {
    let container;
    let surface;

    function createSurface(options) {
        if (surface) {
            surface.destroy();
        }

        surface = new TSurface(container[0], options);
    }

    describe("Surface Base Tests / " + name + " /Events", () => {
        afterEach(() => {
            surface.destroy();
        });

        beforeEach(withRoot((root) => {
            container = $("<div>").appendTo(root);
            createSurface();
        }));

        it("binds initial handlers", () => {
            createSurface({
                click: function() { ok(true); }
            });

            surface.trigger("click");
        });

        it("clicking a node triggers click", () => {
            surface.draw(new Group());
            surface.bind("click", () => { ok(true); });

            $(surface._root.childNodes[0].element).trigger("click");
        });

        it("click has reference to element", () => {
            let group = new Group();
            surface.draw(group);
            surface.bind("click", function(e) { equal(e.element, group); });

            $(surface._root.childNodes[0].element)
                .trigger("click", { toElement: surface._root.childNodes[0].element });
        });
    });

    describe("Surface Base Tests / " + name + " /Events", () => {
        let node;

        afterEach(() => {
            surface.destroy();
        });

        beforeEach(withRoot((root) => {
            container = $("<div>").appendTo(root);
            createSurface();
            surface.draw(new Group());
            node = surface._root.childNodes[0];
        }));

        it("eventTarget locates node", () => {
            let e = { target: node.element };
            equal(surface.eventTarget(e), node.srcElement);
        });

        it("eventTarget locates node from nested element", () => {
            let nested = $("<div>").appendTo(node.element);
            let e = { target: nested[0] };
            equal(surface.eventTarget(e), node.srcElement);
        });

        it("evetTarget returns undefined for root element", () => {
            let e = { target: surface._root.element };
            equal(surface.eventTarget(e), undefined);
        });

        it("evetTarget returns undefined for surface element", () => {
            let e = { target: surface.element };
            equal(surface.eventTarget(e), undefined);
        });

        it("evetTarget returns undefined for external elements", () => {
            let e = { target: document.body };
            equal(surface.eventTarget(e), undefined);
        });
    });

    // ------------------------------------------------------------
    describe("Surface Base Tests / " + name + " / tracking", () => {
        afterEach(() => {
            surface.destroy();
        });

        beforeEach(withRoot((root) => {
            container = $("<div>").appendTo(root);
            createSurface();
        }));

        it("does not trigger events if tracking is suspended", () => {
            let clickCalls = 0;

            surface.eventTarget = function() {
                return { options: {}};
            };

            surface.bind("click", () => {
                clickCalls++;
            });

            surface.suspendTracking();

            $(surface.element).trigger("click");

            expect(clickCalls).toBe(0);
        });

        it("hides tooltip if tracking is suspended", () => {
            surface.hideTooltip = function() {
                ok(true);
            };

            surface.suspendTracking();
        });

        it("triggers events if tracking is suspended and resumed", () => {
            surface.eventTarget = function() {
                return { options: {}};
            };

            surface.bind("click", () => {
                ok(true);
            });
            surface.suspendTracking();
            $(surface.element).trigger("click");
            surface.resumeTracking();
            $(surface.element).trigger("click");
        });
    });
}
