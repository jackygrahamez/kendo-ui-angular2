module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(157);


/***/ },

/***/ 5:
/***/ function(module, exports) {

	module.exports = require("../../common/constants");

/***/ },

/***/ 6:
/***/ function(module, exports) {

	module.exports = require("../../common/is-number");

/***/ },

/***/ 7:
/***/ function(module, exports) {

	module.exports = require("../../common/defined");

/***/ },

/***/ 14:
/***/ function(module, exports) {

	module.exports = require("../../common/is-array");

/***/ },

/***/ 157:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _seriesBinder = __webpack_require__(158);

	var _seriesBinder2 = _interopRequireDefault(_seriesBinder);

	var _constants = __webpack_require__(5);

	var _getter = __webpack_require__(159);

	var _getter2 = _interopRequireDefault(_getter);

	var _defined = __webpack_require__(7);

	var _defined2 = _interopRequireDefault(_defined);

	var _isNumber = __webpack_require__(6);

	var _isNumber2 = _interopRequireDefault(_isNumber);

	var _isArray = __webpack_require__(14);

	var _isArray2 = _interopRequireDefault(_isArray);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var STD_ERR = "stderr";
	var STD_DEV = "stddev";
	var percentRegex = /percent(?:\w*)\((\d+)\)/;
	var standardDeviationRegex = new RegExp("^" + STD_DEV + "(?:\\((\\d+(?:\\.\\d+)?)\\))?$");

	var ErrorRangeCalculator = function () {
	    function ErrorRangeCalculator(errorValue, series, field) {
	        _classCallCheck(this, ErrorRangeCalculator);

	        this.initGlobalRanges(errorValue, series, field);
	    }

	    _createClass(ErrorRangeCalculator, [{
	        key: 'initGlobalRanges',
	        value: function initGlobalRanges(errorValue, series, field) {
	            var _this = this;

	            var data = series.data;
	            var deviationMatch = standardDeviationRegex.exec(errorValue);

	            if (deviationMatch) {
	                (function () {
	                    _this.valueGetter = _this.createValueGetter(series, field);

	                    var average = _this.getAverage(data);
	                    var deviation = _this.getStandardDeviation(data, average, false);
	                    var multiple = deviationMatch[1] ? parseFloat(deviationMatch[1]) : 1;
	                    var errorRange = { low: average.value - deviation * multiple, high: average.value + deviation * multiple };

	                    _this.globalRange = function () {
	                        return errorRange;
	                    };
	                })();
	            } else if (errorValue.indexOf && errorValue.indexOf(STD_ERR) >= 0) {
	                (function () {
	                    _this.valueGetter = _this.createValueGetter(series, field);
	                    var standardError = _this.getStandardError(data, _this.getAverage(data));

	                    _this.globalRange = function (value) {
	                        return { low: value - standardError, high: value + standardError };
	                    };
	                })();
	            }
	        }
	    }, {
	        key: 'createValueGetter',
	        value: function createValueGetter(series, field) {
	            var data = series.data;
	            var binder = _seriesBinder2.default.current;
	            var valueFields = binder.valueFields(series);
	            var item = (0, _defined2.default)(data[0]) ? data[0] : {};
	            var valueGetter = void 0;

	            if ((0, _isArray2.default)(item)) {
	                var index = field ? valueFields.indexOf(field) : 0;
	                valueGetter = (0, _getter2.default)("[" + index + "]");
	            } else if ((0, _isNumber2.default)(item)) {
	                valueGetter = (0, _getter2.default)();
	            } else if ((typeof item === 'undefined' ? 'undefined' : _typeof(item)) === _constants.OBJECT) {
	                var srcValueFields = binder.sourceFields(series, valueFields);
	                valueGetter = (0, _getter2.default)(srcValueFields[valueFields.indexOf(field)]);
	            }

	            return valueGetter;
	        }
	    }, {
	        key: 'getErrorRange',
	        value: function getErrorRange(pointValue, errorValue) {
	            var low = void 0,
	                high = void 0,
	                value = void 0;

	            if (!(0, _defined2.default)(errorValue)) {
	                return null;
	            }

	            if (this.globalRange) {
	                return this.globalRange(pointValue);
	            }

	            if ((0, _isArray2.default)(errorValue)) {
	                low = pointValue - errorValue[0];
	                high = pointValue + errorValue[1];
	            } else if ((0, _isNumber2.default)(value = parseFloat(errorValue))) {
	                low = pointValue - value;
	                high = pointValue + value;
	            } else if (value = percentRegex.exec(errorValue)) {
	                var percentValue = pointValue * (parseFloat(value[1]) / 100);
	                low = pointValue - Math.abs(percentValue);
	                high = pointValue + Math.abs(percentValue);
	            } else {
	                throw new Error("Invalid ErrorBar value: " + errorValue);
	            }

	            return { low: low, high: high };
	        }
	    }, {
	        key: 'getStandardError',
	        value: function getStandardError(data, average) {
	            return this.getStandardDeviation(data, average, true) / Math.sqrt(average.count);
	        }
	    }, {
	        key: 'getStandardDeviation',
	        value: function getStandardDeviation(data, average, isSample) {
	            var length = data.length;
	            var total = isSample ? average.count - 1 : average.count;
	            var squareDifferenceSum = 0;

	            for (var idx = 0; idx < length; idx++) {
	                var value = this.valueGetter(data[idx]);
	                if ((0, _isNumber2.default)(value)) {
	                    squareDifferenceSum += Math.pow(value - average.value, 2);
	                }
	            }

	            return Math.sqrt(squareDifferenceSum / total);
	        }
	    }, {
	        key: 'getAverage',
	        value: function getAverage(data) {
	            var length = data.length;
	            var sum = 0;
	            var count = 0;

	            for (var idx = 0; idx < length; idx++) {
	                var value = this.valueGetter(data[idx]);
	                if ((0, _isNumber2.default)(value)) {
	                    sum += value;
	                    count++;
	                }
	            }

	            return {
	                value: sum / count,
	                count: count
	            };
	        }
	    }]);

	    return ErrorRangeCalculator;
	}();

	exports.default = ErrorRangeCalculator;

/***/ },

/***/ 158:
/***/ function(module, exports) {

	module.exports = require("../series-binder");

/***/ },

/***/ 159:
/***/ function(module, exports) {

	module.exports = require("../../common/getter");

/***/ }

/******/ });