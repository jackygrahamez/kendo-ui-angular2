module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(40);


/***/ },

/***/ 13:
/***/ function(module, exports) {

	module.exports = require("../../common/is-function");

/***/ },

/***/ 14:
/***/ function(module, exports) {

	module.exports = require("../../common/is-array");

/***/ },

/***/ 15:
/***/ function(module, exports) {

	module.exports = require("../../common/in-array");

/***/ },

/***/ 24:
/***/ function(module, exports) {

	module.exports = require("../constants");

/***/ },

/***/ 40:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _constants = __webpack_require__(24);

	var _isFunction = __webpack_require__(13);

	var _isFunction2 = _interopRequireDefault(_isFunction);

	var _isArray = __webpack_require__(14);

	var _isArray2 = _interopRequireDefault(_isArray);

	var _inArray = __webpack_require__(15);

	var _inArray2 = _interopRequireDefault(_inArray);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var ChartSeries = function () {
	    function ChartSeries(chart, options) {
	        _classCallCheck(this, ChartSeries);

	        this._chart = chart;
	        this._options = options;
	    }

	    _createClass(ChartSeries, [{
	        key: 'points',
	        value: function points(filter) {
	            var points = this._points;
	            if (!points) {
	                var series = this._seriesOptions();
	                var plotArea = this._chart._plotArea;
	                this._points = points = plotArea.pointsBySeriesIndex(series.index);
	            }
	            if ((0, _isFunction2.default)(filter)) {
	                points = this._filterPoints(points, filter);
	            }

	            return points;
	        }
	    }, {
	        key: 'data',
	        value: function data(_data) {
	            var series = this._seriesOptions();
	            if (_data) {
	                var chart = this._chart;
	                var plotArea = chart._plotArea;

	                series.data = _data;

	                if (series.categoryField) {
	                    var axis = plotArea.seriesCategoryAxis(series);
	                    var options = [].concat(chart.options.categoryAxis);

	                    chart._bindCategoryAxisFromSeries(options[axis.axisIndex], axis.axisIndex);
	                }

	                chart._noTransitionsRedraw();
	                this._clearFields();
	            }

	            return series.data;
	        }
	    }, {
	        key: 'findPoint',
	        value: function findPoint(filter) {
	            var points = this.points();
	            for (var idx = 0; idx < points.length; idx++) {
	                if (filter(points[idx])) {
	                    return points[idx];
	                }
	            }
	        }
	    }, {
	        key: 'toggleHighlight',
	        value: function toggleHighlight(show, elements) {
	            var points = void 0;
	            if (!elements) {
	                points = this.points();
	            } else if ((0, _isFunction2.default)(elements)) {
	                points = this.points(elements);
	            } else {
	                points = (0, _isArray2.default)(elements) ? elements : [elements];
	            }

	            this._chart._togglePointsHighlight(show, points);
	        }
	    }, {
	        key: 'toggleVisibility',
	        value: function toggleVisibility(visible, filter) {
	            var chart = this._chart;
	            var seriesOptions = this._seriesOptions();
	            if (!(0, _isFunction2.default)(filter)) {
	                seriesOptions.visible = visible;
	                chart._saveGroupVisibleState(seriesOptions);
	            } else {
	                if ((0, _inArray2.default)(seriesOptions.type, [_constants.PIE, _constants.DONUT, _constants.FUNNEL])) {
	                    var data = this._filterData(filter);
	                    for (var idx = 0; idx < data.length; idx++) {
	                        data[idx].visible = visible;
	                    }
	                } else {
	                    seriesOptions.visible = function (data) {
	                        return filter(data.dataItem) ? visible : true;
	                    };
	                }
	            }

	            chart._noTransitionsRedraw();

	            this._clearFields();
	        }
	    }, {
	        key: '_filterData',
	        value: function _filterData(filter) {
	            var data = this._seriesOptions().data;
	            var length = data.length;
	            var result = [];

	            for (var idx = 0; idx < length; idx++) {
	                if (filter(data[idx])) {
	                    result.push(data[idx]);
	                }
	            }

	            return result;
	        }
	    }, {
	        key: '_filterPoints',
	        value: function _filterPoints(points, filter) {
	            var result = [];
	            var length = points.length;

	            for (var idx = 0; idx < length; idx++) {
	                if (filter(points[idx])) {
	                    result.push(points[idx]);
	                }
	            }

	            return result;
	        }
	    }, {
	        key: '_seriesOptions',
	        value: function _seriesOptions() {
	            var series = this._series;

	            if (!series) {
	                series = this._series = this._chart._seriesOptions(this._options);
	            }

	            return series;
	        }
	    }, {
	        key: '_clearFields',
	        value: function _clearFields() {
	            delete this._points;
	            delete this._series;
	        }
	    }]);

	    return ChartSeries;
	}();

	exports.default = ChartSeries;

/***/ }

/******/ });