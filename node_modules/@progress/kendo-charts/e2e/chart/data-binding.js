import 'core-js/es6';

import SeriesBinder from '../../src/chart/series-binder';

import { ok, equal } from '../../test/test-helpers';
import { createChart, destroyChart }  from '../test-helpers';

(function() {
    let chart;

    // ------------------------------------------------------------
    describe('Series binding', () => {
        
        afterEach(() => {
            destroyChart(chart);
        });
        
        it("categories are populated from series", () => {
            chart = createChart({
                series: [{
                    field: "sales",
                    categoryField: "period",
                    data: [{
                        period: "Jan",
                        sales: 100
                    }, {
                        period: "Feb",
                        sales: 110
                    }]
                }]
            });

            equal(chart.options.categoryAxis.categories, ["Jan", "Feb"]);
        });

        it("categories data items are populated from series", () => {
            chart = createChart({
                series: [{
                    field: "sales",
                    categoryField: "period",
                    data: [{
                        period: "Jan",
                        sales: 100
                    }, {
                        period: "Feb",
                        sales: 110
                    }]
                }]
            });

            equal(chart.options.categoryAxis.dataItems[1].sales, 110);
        });
        
        it("series points are populated", 1, () => {
            chart = createChart({
                series: [{
                    field: "sales",
                    data: [{
                        period: "Jan",
                        sales: 100
                    }, {
                        period: "Feb",
                        sales: 110
                    }]
                }]
            });
            equal(chart.options.series[0].data.length, 2);
        });


        it("categories are populated from series on named axis", () => {
            chart = createChart({
                series: [{
                    field: "sales",
                    categoryField: "period",
                    categoryAxis: "foo",
                    data: [{
                        period: "Jan",
                        sales: 100
                    }, {
                        period: "Feb",
                        sales: 110
                    }]
                }],            
                categoryAxis: [{
                    categories: []
                }, {
                    name: "foo"
                }]
            });
            equal(chart.options.categoryAxis[0].categories.length, 0);
            equal(chart.options.categoryAxis[1].categories, ["Jan", "Feb"]);
        });

        it("categories for named axis are not populated from series on default axis", () => {
            chart = createChart({
                series: [{
                    field: "sales",
                    categoryField: "period",
                    data: [{
                        period: "Jan",
                        sales: 100
                    }, {
                        period: "Feb",
                        sales: 110
                    }]
                }],
                categoryAxis: [{
                    // default
                }, {
                    name: "foo",
                    categories: []
                }]
            });
            equal(chart.options.categoryAxis[1].categories.length, 0);
        });

        it("categories for are populated from series on named default axis", () => {
            chart = createChart({
                series: [{
                    field: "sales",
                    categoryField: "period",
                    data: [{
                        period: "Jan",
                        sales: 100
                    }, {
                        period: "Feb",
                        sales: 110
                    }]
                }],
                categoryAxis: {
                    name: "foo"
                }
            });
            
            equal(chart.options.categoryAxis.categories.length, 2);
        });

        it("only unique categories are populated from series", () => {
            chart = createChart({
                series: [{
                    field: "sales",
                    categoryField: "period",
                    data: [{
                        period: "Jan",
                        sales: 100
                    }, {
                        period: "Feb",
                        sales: 110
                    }, {
                        period: "Jan",
                        sales: 100
                    }, {
                        period: "Feb",
                        sales: 110
                    }]
                }]
            });
            
            equal(chart.options.categoryAxis.categories, ["Jan", "Feb"]);
        });

        it("unique date categories are populated from series", () => {
            chart = createChart({
                series: [{
                    field: "sales",
                    categoryField: "period",
                    data: [{
                        period: new Date("2013/01/01 00:00"),
                        sales: 100
                    }, {
                        period: new Date("2013/02/01 00:00"),
                        sales: 110
                    }, {
                        period: new Date("2013/01/01 00:00"),
                        sales: 100
                    }, {
                        period: new Date("2013/02/01 00:00"),
                        sales: 110
                    }]
                }]
            });
            equal(chart.options.categoryAxis.categories, [new Date("2013/01/01 00:00"), new Date("2013/02/01 00:00")]);
        })

        it("string date categories are populated from series", () => {
            chart = createChart({
                series: [{
                    field: "sales",
                    categoryField: "period",
                    data: [{
                        period: "2013/01/01 00:00",
                        sales: 100
                    }, {
                        period: "2013/02/01 00:00",
                        sales: 110
                    }, {
                        period: "2013/01/01 00:00",
                        sales: 100
                    }, {
                        period: "2013/02/01 00:00",
                        sales: 110
                    }]
                }],            
                categoryAxis: {
                    type: "date"
                }
            });
            
            equal(chart.options.categoryAxis.categories, [new Date("2013/01/01 00:00"), new Date("2013/02/01 00:00")]);
        });;

        it("date categories data items are populated from series", () => {
            chart = createChart({
                series: [{
                    field: "sales",
                    categoryField: "period",
                    data: [{
                        period: new Date("2013/01/01 00:00"),
                        sales: 100
                    }, {
                        period: new Date("2013/02/01 00:00"),
                        sales: 110
                    }]
                }]
            });
            equal(chart.options.categoryAxis.dataItems[1].sales, 110);
        });

        it("date categories are populated from series even if first is undefined", () => {
            chart = createChart({
                series: [{
                    field: "value",
                    categoryField: "cat",
                    data: [{
                        value: 1
                    }, {
                        cat: new Date("2014/01/01 10:00"),
                        value: 2
                    }]                
                }],
                categoryAxis: {
                    type: "date"
                }
            });
            equal(chart.options.categoryAxis.categories.length, 2);
        });

        it("date categories populated from series are sorted", () => {
            chart = createChart({
                series: [{
                    field: "sales",
                    categoryField: "period",
                    data: [{
                        period: new Date("2013/02/01 00:00"),
                        sales: 100
                    }, {
                        period: new Date("2013/01/01 00:00"),
                        sales: 110
                    }]
                }]
            });
            
            equal(chart.options.categoryAxis.categories, [new Date("2013/01/01 00:00"), new Date("2013/02/01 00:00")]);
        });

        it("date categories populated from series are not sorted for category axis", () => {
            chart = createChart({
                series: [{
                    field: "sales",
                    categoryField: "period",
                    data: [{
                        period: new Date("2013/02/01 00:00"),
                        sales: 100
                    }, {
                        period: new Date("2013/01/01 00:00"),
                        sales: 110
                    }]
                }],            
                categoryAxis: {
                    type: "category"
                }
            });
            
            equal(chart.options.categoryAxis.categories, [new Date("2013/02/01 00:00"), new Date("2013/01/01 00:00")]);
        });
    });

    // ------------------------------------------------------------
    describe('Binding to DataSource / Null values', () => {
        afterEach(() => {
            destroyChart(chart);
        });

        it("series points are populated if point is null", 1, () => {
            chart = createChart({            
                series: [{
                    field: "sales",
                    sales: null,
                    data: [{
                        period: "Jan",
                        sales: 100
                    }, null]
                }]
            });
            equal(chart.options.series[0].data.length, 2);
        });

        it("categories are populated", () => {
            chart = createChart({            
                series: [{
                    categoryField: "period",
                    data: [{
                        period: "Jan",
                        sales: 100
                    }, null]
                }]
            });
            equal(chart.options.categoryAxis.categories, ["Jan", null]);
        });

        it("series points are populated if field is null", 1, () => {
            chart = createChart({            
                series: [{
                    field: "sales",
                    data: [{
                        period: "Jan",
                        sales: null
                    }, {
                        period: "Feb",
                        sales: 100
                    }]
                }]
            });
            equal(chart.options.series[0].data.length, 2);
        });

        it("series points order is preserved if field is null", 1, () => {
            chart = createChart({            
                series: [{
                    field: "sales",
                    data: [{
                        period: "Jan",
                        sales: null
                    }, {
                        period: "Feb",
                        sales: 100
                    }]
                }]
            });
            
            equal(chart.options.series[0].data[1].sales, 100);
        });
    });

})();

(function() {
    let binder, series;

    // ------------------------------------------------------------
    describe('Series Binder', () => {
        beforeEach(() => {
            binder = new SeriesBinder();
            binder.register(["foo"]);

            series = { type: "foo" };
        });

        it("sets valueFields from string", () => {
            series.data = ["abc"];
            equal(binder.bindPoint(series, 0),
            { valueFields: { value: "abc" }, fields: {} }
            );
        });

        it("sets valueFields from number", () => {
            series.data = [1];
            equal(binder.bindPoint(series, 0),
            { valueFields: { value: 1 }, fields: {} }
            );
        });

        it("sets valueFields from undefined", () => {
            series.data = [undefined];

            equal(binder.bindPoint(series, 0),
            { valueFields: { value: undefined }, fields: {} }
            );
        });

        it("sets valueFields from null", () => {
            series.data = [null];

            equal(binder.bindPoint(series, 0),
            { valueFields: { value: null }, fields: {} }
            );
        });

        it("sets valueFields from null", () => {
            binder.register(["bar"], ["x", "y"]);
            series.data = [null];
            series.type = "bar";

            equal(binder.bindPoint(series, 0),
                { valueFields: { x: null, y: null }, fields: {} }
            );
        });

        it("binds valueFields using field name", () => {
            series.field = "aValue";
            series.data = [{ aValue: 1 }];
            series.type = "foo";

            equal(binder.bindPoint(series, 0),
            { valueFields: { value:  1 }, fields: {} }
            );
        });

        it("binds array to multiple values", () => {
            binder.register(["bar"], ["x", "y"]);

            series.data = [[1, 2]];
            series.type = "bar";

            equal(binder.bindPoint(series, 0),
                { valueFields: { x: 1, y: 2 }, fields: {} }
            );
        });

        it("binds other fields", () => {
            binder.register(["bar"], ["value"], ["color"]);

            series.data = [{ value: 1, color: "red" }];
            series.type = "bar";

            equal(binder.bindPoint(series, 0).fields,
                { color: "red" }
            );
        });

        it("binds other fields using field name", () => {
            binder.register(["bar"], ["value"], ["color"]);

            series.data = [{ value: 1, c: "red" }];
            series.type = "bar";
            series.colorField = "c";

            equal(binder.bindPoint(series, 0).fields,
                { color: "red" }
            );
        });

        it("other fields are empty if data item is null", () => {
            binder.register(["bar"], ["value"], ["color"]);

            series.data = [null];
            series.type = "bar";

            equal(binder.bindPoint(series, 0).fields, { });
        });

        it("returns canonical names for all fields", () => {
            binder.register(["bar"], ["value"], ["color"]);

            equal(
                binder.canonicalFields({ type: "bar" }),
                ["value", "color"]);
        });
    });
})();
