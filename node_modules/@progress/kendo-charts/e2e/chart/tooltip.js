import 'core-js/es6';
import { $ } from 'e2e-utils';

import BaseTooltip from '../../src/chart/tooltip/base-tooltip';
import Tooltip from '../../src/chart/tooltip/tooltip';
import SharedTooltip from '../../src/chart/tooltip/shared-tooltip';

import { Box } from '../../src/core';

import { deepExtend, autoFormat } from '../../src/common';

import { ok, equal } from '../../test/test-helpers';
import '../../test/intl';

const BACKGROUND = "red";
const OPACITY = 0.5;
const BORDER_COLOR = "blue";
const SANS = "Arial,Helvetica,sans-serif";
const SANS12 = "12px " + SANS;

function showOptions(options) {
    return deepExtend({
        anchor: {
            point: {
                x: 0,
                y: 0
            },
            align: {
                horizontal: "left",
                vertical: "top"
            }
        }
    }, options);
}

function pointOptions(options) {
    return deepExtend({
        background: BACKGROUND,
        opacity: OPACITY,
        border:  {
            color: BORDER_COLOR
        },
        font: SANS12
    }, options);
}

describe('BaseTooltip', () => {

    let chartElement, tooltip;

    function setup(options) {
        chartElement = $("<div />").appendTo(document.body);
        tooltip = new BaseTooltip(chartElement[0], options);
    }

    function clean() {
        tooltip.destroy();
        chartElement.remove();
    }

    describe('configuration', () => {
        afterEach(clean);

        it('sets default border width', () => {
            setup();
            equal(tooltip.options.border.width, 1);
        });

        it('sets default opacity', () => {
            setup();
            equal(tooltip.options.opacity, 1);
        });

        it('sets user options', () => {
            setup({
                background: BACKGROUND,
                border: {
                    color: BORDER_COLOR,
                    width: 3
                },
                opacity: OPACITY,
                font: SANS12,
                color: "black"
            });

            equal(tooltip.options, {
                background: BACKGROUND,
                border: {
                    color: BORDER_COLOR,
                    width: 3
                },
                opacity:OPACITY,
                font: SANS12,
                color: "black"
            });
        });
    });

    describe('show', () => {
        beforeEach(() => {
            setup();
        });

        afterEach(clean);

        function showTooltip(showOps, pointOps = { border: {} }, point = null) {
            tooltip.show(showOptions(showOps), pointOps, point);
        }

        it('triggers show event', function() {
            tooltip.bind('show', () => {
                ok(true);
            });
            showTooltip();
        });

        it('offsets anchor point', function() {
            chartElement.css({
                top: 200,
                left: 200,
                position: "absolute"
            });

            tooltip.bind('show', (e) => {
                equal(e.anchor.point.left, 300);
                equal(e.anchor.point.top, 400);
            });

            showTooltip({
                anchor: {
                    point: {
                        x: 100,
                        y: 200
                    }
                }
            });
        });

        it('offsets anchor point with padding', function() {
            chartElement.css({
                top: 200,
                left: 200,
                paddingLeft: 100,
                paddingTop: 100,
                position: "absolute"
            });

            tooltip.bind('show', (e) => {
                equal(e.anchor.point.left, 400);
                equal(e.anchor.point.top, 500);
            });

            showTooltip({
                anchor: {
                    point: {
                        x: 100,
                        y: 200
                    }
                }
            });
        });

        it('preserves anchor alignment', function() {
            tooltip.bind('show', (e) => {
                equal(e.anchor.align.horizontal, "foo");
                equal(e.anchor.align.vertical, "bar");
            });

            showTooltip({
                anchor: {
                    align: {
                        horizontal: "foo",
                        vertical: "bar"
                    }
                }
            });
        });

        it('passes tooltip styles', function() {
            tooltip.bind('show', (e) => {
                const { backgroundColor, opacity, borderColor, borderWidth, font, color, paddingTop, paddingLeft, paddingBottom, paddingRight } = e.style;
                equal(backgroundColor, BACKGROUND);
                equal(opacity, OPACITY);
                equal(borderColor, BORDER_COLOR);
                equal(borderWidth, "3px");
                equal(font, SANS12);
                equal(color, "black");
                equal(paddingTop, "3px");
                equal(paddingLeft, "4px");
                equal(paddingBottom, "5px");
                equal(paddingRight, "6px");
            });

            showTooltip({}, {
                background: BACKGROUND,
                border: {
                    color: BORDER_COLOR,
                    width: 3
                },
                opacity: OPACITY,
                font: SANS12,
                color: "black",
                padding: {
                    top: 3,
                    left: 4,
                    bottom: 5,
                    right: 6
                }
            });
        });

        it('background and border color are determined based on point color if not defined', function() {
            tooltip.bind('show', (e) => {
                const { backgroundColor, borderColor } = e.style;
                equal(backgroundColor, "purple");
                equal(borderColor, "purple");
            });

            showTooltip({}, {
                border: { }
            }, {
                color: "purple"
            });
        });

        it('background and border color are determined based on point options color if not defined and point.color is not defined', function() {
            tooltip.bind('show', (e) => {
                const { backgroundColor, borderColor } = e.style;
                equal(backgroundColor, "purple");
                equal(borderColor, "purple");
            });

            showTooltip({}, {
                border: { }
            }, {
                options: {
                    color: "purple"
                }
            });
        });

        it('passes k-chart-tooltip-inverse className if background is lighter', function() {
            tooltip.bind('show', (e) => {
                const { className } = e;
                equal(className, "k-chart-tooltip-inverse");
            });

            showTooltip({}, {
                background: "white",
                border: { }
            });
        });

        it('does not pass k-chart-tooltip-inverse className if background is lighter and color is passed', function() {
            tooltip.bind('show', (e) => {
                const { className } = e;
                equal(className, undefined);
            });

            showTooltip({}, {
                background: "white",
                color: "red",
                border: { }
            });
        });
    });

    describe('hide', () => {
        afterEach(clean);

        it('triggers hide event', () => {
            tooltip.bind('hide', () => {
                ok(true);
            });
            tooltip.hide();
        });
    });
});


describe('Tooltip', () => {
    let chartElement, tooltip;

    function setup(options) {
        chartElement = $("<div />").appendTo(document.body);
        tooltip = new Tooltip(chartElement[0], options);
    }

    function clean() {
        tooltip.destroy();
        chartElement.remove();
    }

    afterEach(clean);

    describe('show', () => {
        function pointMock(options = {}, anchor = { point: {} }) {
            return {
                tooltipAnchor: function() {
                    return anchor;
                },
                options: {
                    tooltip: options
                }
            };
        }

        it('triggers show event', () => {
            setup();
            tooltip.bind("show", () => {
                ok(true);
            });
            tooltip.show(pointMock());
        });

        it('does nothing if the same point has already been shown', 0, () => {
            setup();
            const point = pointMock();
            tooltip.show(point);

            tooltip.bind("show", () => {
                ok(false);
            });
            tooltip.show(point);
        });

        it('does nothing if no point is passed', 0, () => {
            setup();
            tooltip.bind("show", () => {
                ok(false);
            });
            tooltip.show();
        });

        it('does nothing if point does not have tooltipAnchor method', 0, () => {
            setup();
            tooltip.bind("show", () => {
                ok(false);
            });
            tooltip.show({});
        });

        it('triggers hide event if tooltipAnchor does not return anchor', () => {
            setup();
            tooltip.bind("show", () => {
                ok(false);
            });
            tooltip.bind("hide", () => {
                ok(true);
            });
            tooltip.show(pointMock({}, null));
        });

        it('applies default options', () => {
            setup({
                background: BACKGROUND,
                border: {
                    color: BORDER_COLOR,
                    width: 3
                },
                opacity: OPACITY,
                font: SANS12,
                color: "black",
                padding: {
                    top: 3,
                    left: 4,
                    bottom: 5,
                    right: 6
                }
            });
            tooltip.bind('show', (e) => {
                const { backgroundColor, opacity, borderColor, borderWidth, font, color, paddingTop, paddingLeft, paddingBottom, paddingRight  } = e.style;
                equal(backgroundColor, BACKGROUND);
                equal(opacity, OPACITY);
                equal(borderColor, BORDER_COLOR);
                equal(borderWidth, "3px");
                equal(font, SANS12);
                equal(color, "black");
                equal(paddingTop, "3px");
                equal(paddingLeft, "4px");
                equal(paddingBottom, "5px");
                equal(paddingRight, "6px");
            });

            tooltip.show(pointMock());
        });

        it('applies point tooltip options', () => {
            setup();
            tooltip.bind('show', (e) => {
                const { backgroundColor, opacity, borderColor, borderWidth, font, color, paddingTop, paddingLeft, paddingBottom, paddingRight } = e.style;
                equal(backgroundColor, BACKGROUND);
                equal(opacity, OPACITY);
                equal(borderColor, BORDER_COLOR);
                equal(borderWidth, "3px");
                equal(font, SANS12);
                equal(color, "black");
                equal(paddingTop, "3px");
                equal(paddingLeft, "4px");
                equal(paddingBottom, "5px");
                equal(paddingRight, "6px");
            });

            tooltip.show(pointMock({
                background: BACKGROUND,
                border: {
                    color: BORDER_COLOR,
                    width: 3
                },
                opacity: OPACITY,
                font: SANS12,
                color: "black",
                padding: {
                    top: 3,
                    left: 4,
                    bottom: 5,
                    right: 6
                }
            }));
        });

        it('passes point', () => {
            setup();
            const point = pointMock()
            tooltip.bind('show', (e) => {
                ok(e.point === e.point);
            });

            tooltip.show(point);
        });
    });
});

describe('SharedTooltip', () => {
    const CHARTS_BOX = new Box(0,0, 1000, 600);
    let chartElement, tooltip;

    function createPlotArea(options) {
        return {
            categoryAxis: deepExtend({
                getSlot: function(index) {
                    return new Box(0, 0, 100 * index, 100 * index);
                },
                options: {
                    vertical: false
                }
            }, options)
        };
    }

    function createPoint(options) {
        return {
            categoryIx: 1,
            category: "foo",
            series: {
                tooltip: deepExtend({
                    visible: true
                }, options)
            },
            owner: {
                pane: {
                    chartsBox: function() {
                        return CHARTS_BOX;
                    }
                }
            }
        };
    }

    function setup(options, categoryAxis) {
        chartElement = $("<div />").css({ top: 200, left: 100, position: "absolute" }).appendTo(document.body);
        tooltip = new SharedTooltip(chartElement[0], createPlotArea(categoryAxis), options);
    }

    function clean() {
        tooltip.destroy();
        chartElement.remove();
    }

    afterEach(clean);

    describe('showAt', () => {
        it('triggers show event', () => {
            setup();
            const points = [ createPoint({}) ];
            tooltip.bind('show', (e) => {
                equal(e.shared, true);
                equal(e.category, "foo");
                equal(e.categoryText, "foo");
                equal(e.points, points);
                ok(e.anchor);
            });
            tooltip.showAt(points);
        });

        it('does nothing if no point has enabled tooltip', 0, () => {
            setup();
            tooltip.bind('show', () => {
                ok(false);
            });
            tooltip.showAt([ createPoint({ visible: false }) ]);
        });

        describe('coordinates', () => {
            it('anchor is horizontally centered with y equal to the cursor for horizontal axis', () => {
                const points = [ createPoint({}) ];
                setup();

                tooltip.bind('show', (e) => {
                   const { point, align } = e.anchor;
                   equal(point.left, 150);
                   equal(point.top, 400);
                   equal(align.horizontal, "left");
                   equal(align.vertical, "center");
                });

                tooltip.showAt(points, {
                    x: 100,
                    y: 200
                });
            });

            it('anchor is equal to the cursor coordinates for vertical axis', () => {
                const points = [ createPoint({}) ];
                setup({}, {
                    options: {
                        vertical: true
                    }
                });

                tooltip.bind('show', (e) => {
                   const { point, align } = e.anchor;
                   equal(point.left, 200);
                   equal(point.top, 400);
                   equal(align.horizontal, "left");
                   equal(align.vertical, "center");
                });

                tooltip.showAt(points, {
                    x: 100,
                    y: 200
                });
            });
        });

        describe('default', () => {
            it('anchor is center at the middle of the slot for horizontal axis', () => {
                const points = [ createPoint({}) ];
                setup();

                tooltip.bind('show', (e) => {
                   const { point, align } = e.anchor;
                   equal(point.left, 150);
                   equal(point.top, 500);
                   equal(align.horizontal, "center");
                   equal(align.vertical, "center");
                });

                tooltip.showAt(points);
            });

            it('anchor is center at the middle of the slot for vertical axis', () => {
                const points = [ createPoint({}) ];
                setup({}, {
                    options: {
                        vertical: true
                    }
                });

                tooltip.bind('show', (e) => {
                   const { point, align } = e.anchor;
                   equal(point.left, 600);
                   equal(point.top, 250);
                   equal(align.horizontal, "center");
                   equal(align.vertical, "center");
                });

                tooltip.showAt(points);
            });
        });
    });
});