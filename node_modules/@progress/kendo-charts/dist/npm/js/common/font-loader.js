module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(395);


/***/ },

/***/ 395:
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var FontLoader = function () {
	    function FontLoader() {
	        _classCallCheck(this, FontLoader);
	    }

	    _createClass(FontLoader, null, [{
	        key: "fetchFonts",
	        value: function fetchFonts(options, fonts) {
	            var state = arguments.length <= 2 || arguments[2] === undefined ? { depth: 0 } : arguments[2];

	            var MAX_DEPTH = 5;

	            if (!options || state.depth > MAX_DEPTH || !document.fonts) {
	                return;
	            }

	            Object.keys(options).forEach(function (key) {
	                var value = options[key];
	                if (key === "dataSource" || key[0] === "$" || !value) {
	                    return;
	                }

	                if (key === "font") {
	                    fonts.push(value);
	                } else if ((typeof value === "undefined" ? "undefined" : _typeof(value)) === "object") {
	                    state.depth++;
	                    FontLoader.fetchFonts(value, fonts, state);
	                    state.depth--;
	                }
	            });
	        }
	    }, {
	        key: "loadFonts",
	        value: function loadFonts(fonts, callback) {
	            var promises = [];

	            if (fonts.length > 0 && document.fonts) {
	                try {
	                    promises = fonts.map(function (font) {
	                        return document.fonts.load(font);
	                    });
	                } catch (e) {
	                    // Silence font-loading errors
	                    console.log(e); // eslint-disable-line no-console
	                }

	                Promise.all(promises).then(callback, callback);
	            } else {
	                callback();
	            }
	        }
	    }, {
	        key: "preloadFonts",
	        value: function preloadFonts(options, callback) {
	            var fonts = [];
	            FontLoader.fetchFonts(options, fonts);

	            FontLoader.loadFonts(fonts, callback);
	        }
	    }]);

	    return FontLoader;
	}();

	exports.default = FontLoader;

/***/ }

/******/ });