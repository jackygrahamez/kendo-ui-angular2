module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(495);


/***/ },

/***/ 60:
/***/ function(module, exports) {

	module.exports = require("../common/constants");

/***/ },

/***/ 111:
/***/ function(module, exports) {

	module.exports = require("../common/set-default-options");

/***/ },

/***/ 457:
/***/ function(module, exports) {

	module.exports = require("./chart-element");

/***/ },

/***/ 461:
/***/ function(module, exports) {

	module.exports = require("./box");

/***/ },

/***/ 474:
/***/ function(module, exports) {

	module.exports = require("../common/round");

/***/ },

/***/ 495:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _chartElement = __webpack_require__(457);

	var _chartElement2 = _interopRequireDefault(_chartElement);

	var _box = __webpack_require__(461);

	var _box2 = _interopRequireDefault(_box);

	var _constants = __webpack_require__(60);

	var _setDefaultOptions = __webpack_require__(111);

	var _setDefaultOptions2 = _interopRequireDefault(_setDefaultOptions);

	var _round = __webpack_require__(474);

	var _round2 = _interopRequireDefault(_round);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var FloatElement = function (_ChartElement) {
	    _inherits(FloatElement, _ChartElement);

	    function FloatElement(options) {
	        _classCallCheck(this, FloatElement);

	        var _this = _possibleConstructorReturn(this, (FloatElement.__proto__ || Object.getPrototypeOf(FloatElement)).call(this, options));

	        _this._initDirection();
	        return _this;
	    }

	    _createClass(FloatElement, [{
	        key: '_initDirection',
	        value: function _initDirection() {
	            var options = this.options;
	            if (options.vertical) {
	                this.groupAxis = _constants.X;
	                this.elementAxis = _constants.Y;
	                this.groupSizeField = _constants.WIDTH;
	                this.elementSizeField = _constants.HEIGHT;
	                this.groupSpacing = options.spacing;
	                this.elementSpacing = options.vSpacing;
	            } else {
	                this.groupAxis = _constants.Y;
	                this.elementAxis = _constants.X;
	                this.groupSizeField = _constants.HEIGHT;
	                this.elementSizeField = _constants.WIDTH;
	                this.groupSpacing = options.vSpacing;
	                this.elementSpacing = options.spacing;
	            }
	        }
	    }, {
	        key: 'reflow',
	        value: function reflow(targetBox) {
	            this.box = targetBox.clone();
	            this.reflowChildren();
	        }
	    }, {
	        key: 'reflowChildren',
	        value: function reflowChildren() {
	            var box = this.box;
	            var elementAxis = this.elementAxis;
	            var groupAxis = this.groupAxis;
	            var elementSizeField = this.elementSizeField;
	            var groupSizeField = this.groupSizeField;

	            var _groupOptions = this.groupOptions();

	            var groups = _groupOptions.groups;
	            var groupsSize = _groupOptions.groupsSize;
	            var maxGroupElementsSize = _groupOptions.maxGroupElementsSize;

	            var groupsCount = groups.length;
	            var groupsStart = box[groupAxis + 1] + this.alignStart(groupsSize, box[groupSizeField]());

	            if (groupsCount) {
	                var groupStart = groupsStart;

	                for (var groupIdx = 0; groupIdx < groupsCount; groupIdx++) {
	                    var group = groups[groupIdx];
	                    var groupElements = group.groupElements;
	                    var elementStart = box[elementAxis + 1];
	                    var groupElementsCount = groupElements.length;

	                    for (var idx = 0; idx < groupElementsCount; idx++) {
	                        var element = groupElements[idx];
	                        var elementSize = this.elementSize(element);
	                        var groupElementStart = groupStart + this.alignStart(elementSize[groupSizeField], group.groupSize);

	                        var elementBox = new _box2.default();
	                        elementBox[groupAxis + 1] = groupElementStart;
	                        elementBox[groupAxis + 2] = groupElementStart + elementSize[groupSizeField];
	                        elementBox[elementAxis + 1] = elementStart;
	                        elementBox[elementAxis + 2] = elementStart + elementSize[elementSizeField];

	                        element.reflow(elementBox);

	                        elementStart += elementSize[elementSizeField] + this.elementSpacing;
	                    }
	                    groupStart += group.groupSize + this.groupSpacing;
	                }
	                box[groupAxis + 1] = groupsStart;
	                box[groupAxis + 2] = groupsStart + groupsSize;
	                box[elementAxis + 2] = box[elementAxis + 1] + maxGroupElementsSize;
	            }
	        }
	    }, {
	        key: 'alignStart',
	        value: function alignStart(size, maxSize) {
	            var start = 0;
	            var align = this.options.align;
	            if (align === _constants.RIGHT || align === _constants.BOTTOM) {
	                start = maxSize - size;
	            } else if (align === _constants.CENTER) {
	                start = (maxSize - size) / 2;
	            }
	            return start;
	        }
	    }, {
	        key: 'groupOptions',
	        value: function groupOptions() {
	            var box = this.box;
	            var children = this.children;
	            var elementSizeField = this.elementSizeField;
	            var groupSizeField = this.groupSizeField;
	            var elementSpacing = this.elementSpacing;
	            var groupSpacing = this.groupSpacing;

	            var maxSize = (0, _round2.default)(box[elementSizeField]());
	            var childrenCount = children.length;
	            var groups = [];

	            var groupSize = 0;
	            var groupElementsSize = 0;
	            var groupsSize = 0;
	            var maxGroupElementsSize = 0;
	            var groupElements = [];

	            for (var idx = 0; idx < childrenCount; idx++) {
	                var element = children[idx];
	                if (!element.box) {
	                    element.reflow(box);
	                }

	                var elementSize = this.elementSize(element);
	                if (this.options.wrap && (0, _round2.default)(groupElementsSize + elementSpacing + elementSize[elementSizeField]) > maxSize) {
	                    groups.push({
	                        groupElements: groupElements,
	                        groupSize: groupSize,
	                        groupElementsSize: groupElementsSize
	                    });
	                    maxGroupElementsSize = Math.max(maxGroupElementsSize, groupElementsSize);
	                    groupsSize += groupSpacing + groupSize;
	                    groupSize = 0;
	                    groupElementsSize = 0;
	                    groupElements = [];
	                }
	                groupSize = Math.max(groupSize, elementSize[groupSizeField]);
	                if (groupElementsSize > 0) {
	                    groupElementsSize += elementSpacing;
	                }
	                groupElementsSize += elementSize[elementSizeField];
	                groupElements.push(element);
	            }

	            groups.push({
	                groupElements: groupElements,
	                groupSize: groupSize,
	                groupElementsSize: groupElementsSize
	            });
	            maxGroupElementsSize = Math.max(maxGroupElementsSize, groupElementsSize);
	            groupsSize += groupSize;

	            return {
	                groups: groups,
	                groupsSize: groupsSize,
	                maxGroupElementsSize: maxGroupElementsSize
	            };
	        }
	    }, {
	        key: 'elementSize',
	        value: function elementSize(element) {
	            return {
	                width: element.box.width(),
	                height: element.box.height()
	            };
	        }
	    }, {
	        key: 'createVisual',
	        value: function createVisual() {}
	    }]);

	    return FloatElement;
	}(_chartElement2.default);

	(0, _setDefaultOptions2.default)(FloatElement.prototype, {
	    vertical: true,
	    wrap: true,
	    vSpacing: 0,
	    spacing: 0
	});

	exports.default = FloatElement;

/***/ }

/******/ });