import 'core-js/es6';

import CategoricalPlotArea from '../../src/chart/plotarea/categorical-plotarea';
import PlotAreaBase from '../../src/chart/plotarea/plotarea-base';
import PlotAreaFactory from '../../src/chart/plotarea/plotarea-factory';
import { Box } from '../../src/core';
import { ok, equal } from '../../test/test-helpers';
import { hoverChart, createChart, destroyChart }  from '../test-helpers';

const chartBox = new Box(100, 100, 1000, 1000);

// ------------------------------------------------------------
describe('PlotArea / axis labels rotation', () => {
    let plotArea;

    function createPlotArea() {
        plotArea = new CategoricalPlotArea([], {});
    }

    beforeEach(createPlotArea);
    
    it("calls autoRotateAxisLabels on reflow", 2, () => {
        plotArea.autoRotateAxisLabels = function(groupedAxis) {
            ok(groupedAxis.x[0] === plotArea.axisX);
            ok(groupedAxis.y[0] === plotArea.axisY);
        };
        plotArea.reflow(chartBox);
    });

    it("autoRotateAxisLabels rotates axis labels", () => {
        plotArea.axisX.autoRotateLabels = plotArea.axisY.autoRotateLabels = function() {
            ok(true);
        };
        plotArea.autoRotateAxisLabels();
    });

    it("autoRotateAxisLabels reflows, aligns and shrinks axes if any of the axes labels are rotated", 5, () => {
        plotArea.axisX.autoRotateLabels = function() {
            return true;
        };

        plotArea.axisX.reflow = plotArea.axisY.reflow = function() {
            ok(true)
        };

        plotArea.alignAxes = function(x, y) {
            equal(x, "foo");
            equal(y, "bar");
        };

        plotArea.shrinkAxisWidth = function() {
            ok(true);
        };

        plotArea.autoRotateAxisLabels({
            x: "foo",
            y: "bar"
        });
    });
});

(function() {
    class PlotAreaStub extends PlotAreaBase {
        render() {
            this.addToLegend(this.series);
        }
    }

    let plotArea;
    let legendItems;

    function createPlotArea(series, options) {
        plotArea = new PlotAreaStub(series || [{
            name: "series1",
            color: "red"
        }, {
            name: "series2",
            color: "blue"
        }], options);
        legendItems = plotArea.options.legend.items;
    }

    function renderPlotArea(series, options) {
        createPlotArea(series, options);
        plotArea.reflow(chartBox);
        plotArea.renderVisual();
    }

    // ------------------------------------------------------------
    describe('PlotArea / Legend Items', () => {
        beforeEach(() => {
            createPlotArea();
        });

        it("creates legend item for each series", () => {
            equal(legendItems.length, 2);
        });

        it("skips series with visibleInLegend equal to false", () => {
            createPlotArea([{
                name: "series1",
                visibleInLegend: false
            }, {
                name: "series2"
            }]);
            equal(legendItems.length, 1);
        });

        it("skips series with no name", () => {
            createPlotArea([{
                name: ""
            }, {
                name: "foo"
            }]);
            equal(legendItems.length, 1);
        });

        it("set legend item series", () => {
            equal(legendItems[0].series.name, "series1");
            equal(legendItems[1].series.name, "series2");
        });

        it("set legend item color", () => {
            equal(legendItems[0].markerColor, "red");
            equal(legendItems[1].markerColor, "blue");
        });

        it("set legend item text from series name", () => {
            equal(legendItems[0].text, "series1");
            equal(legendItems[1].text, "series2");
        });

        it("set legend item text with template", () => {
            createPlotArea([{
                name: "series1"
            }, {
                name: "series2"
            }], {
                legend: {
                    labels: {
                        template: "#=text#foo"
                    }
                }
            });
            equal(legendItems[0].text, "series1foo");
            equal(legendItems[1].text, "series2foo");
        });
    });

    // ------------------------------------------------------------
    describe('PlotArea / Inactive Legend Items', () => {
        beforeEach(() => {
            createPlotArea([{
                name: "series1",
                color: "red",
                visible: false
            }, {
                name: "series2",
                color: "blue"
            }], {
                legend: {
                    inactiveItems: {
                        labels: {
                            color: "foo",
                            font: "bar"
                        },
                        markers: {
                            color: "green"
                        }
                    }
                }
            });
        });

        it("creates legend item for each series", () => {
            equal(legendItems.length, 2);
        });

        it("skips series with visibleInLegend equal to false", () => {
            createPlotArea([{
                name: "series1",
                visibleInLegend: false,
                visible: false
            }, {
                name: "series2"
            }]);
            equal(legendItems.length, 1);
        });

        it("skips series with null or empty name", () => {
            createPlotArea([{
                name: "",
                visible: false
            }, {
                name: null,
                visible: false
            },{
                name: "foo",
                visible: false
            }]);
            equal(legendItems.length, 1);
        });

        it("set legend item series", () => {
            equal(legendItems[0].series.name, "series1");
            equal(legendItems[1].series.name, "series2");
        });

        it("set legend item color", () => {
            equal(legendItems[0].markerColor, "green");
            equal(legendItems[1].markerColor, "blue");
        });

        it("set legend item text from series name", () => {
            equal(legendItems[0].text, "series1");
            equal(legendItems[1].text, "series2");
        });

        it("set legend item text with template", () => {
            createPlotArea([{
                name: "series1",
                visible: false
            }, {
                name: "series2"
            }], {
                legend: {
                    inactiveItems: {
                        labels: {
                            template: "#=text#foo"
                        }
                    }
                }
            });
            equal(legendItems[0].text, "series1foo");
            equal(legendItems[1].text, "series2");
        });

        it("set legend item text with labels template if inactive labels template is not specified", () => {
            createPlotArea([{
                name: "series1",
                visible: false
            }, {
                name: "series2"
            }], {
                legend: {
                    labels: {
                        template: "#=text#foo"
                    }
                }
            });
            equal(legendItems[0].text, "series1foo");
            equal(legendItems[1].text, "series2foo");
        });
    });
})();

// ------------------------------------------------------------
describe('Plot Area Factory', () => {
    let factory;

    function FooPlotArea() { }
    function BarPlotArea() { }
    beforeEach(() => {
        factory = new PlotAreaFactory();
    });

    it("plot area type is created for matching series", () => {
        factory.register(FooPlotArea, ["foo"]);
        factory.register(BarPlotArea, ["bar"]);

        ok(factory.create([{ type: "bar" }]) instanceof BarPlotArea);
    });

    it("matching series are passed to plot area", () => {
        function PlotArea(series) {
            equal(series[0].type, "bar")
        };

        factory.register(PlotArea, ["bar"]);
        factory.create([{ type: "bar" }]);
    });

    it("non-matching series are not passed to plot area", () => {
        function PlotArea(series) {
            equal(series.length, 1)
        };

        factory.register(PlotArea, ["bar"]);

        factory.create([{ type: "bar" }, { type: "foo" }]);
    });

    it("options are passed to plot area", () => {
        const PlotArea = function(series, options) {
            ok(options.foo, true)
        };

        factory.register(PlotArea, ["bar"]);
        factory.create([{ type: "bar" }], { foo: true });
    });

    it("first registered plot area is default", () => {
        factory.register(FooPlotArea, ["foo"]);
        factory.register(BarPlotArea, ["bar"]);

        ok(factory.create([{ type: "baz" }]) instanceof FooPlotArea);
    });
});

// ------------------------------------------------------------
describe('Pie Plot Area / Events / plotAreaHover', () => {
    let chart;  
    afterEach(() => {
        destroyChart(chart)
    });

    it("does not trigger hover", 0, () => {
        chart = createChart({
            series: [{
                type: "pie",
                data: [1, 2]
            }],
            chartArea: {
                width: 1664,
                height: 400
            },
            plotAreaHover: function(e) {
                ok(false);
            }
        });

        hoverChart(chart, chart.element, 300, 300);
    });
});

// ------------------------------------------------------------
describe('Donut Plot Area / Events / plotAreaHover', () => {
    let chart;  
    afterEach(() => {
        destroyChart(chart)
    });
    it("does not trigger hover", 0, () => {
        chart = createChart({
            series: [{
                type: "donut",
                data: [1, 2]
            }],
            chartArea: {
                width: 1664,
                height: 400
            },
            plotAreaHover: function(e) {
                ok(false);
            }
        });

        hoverChart(chart, chart.element, 300, 300);
    });
});

// ------------------------------------------------------------
describe('Funnel Plot Area / Events / plotAreaHover', () => {
    let chart;  
    afterEach(() => {
        destroyChart(chart)
    });

    it("does not trigger hover", 0, () => {
        chart = createChart({
            series: [{
                type: "funnel",
                data: [1, 2]
            }],
            chartArea: {
                width: 1664,
                height: 400
            },
            plotAreaHover: function(e) {
                ok(false);
            }
        });

        hoverChart(chart, chart.element, 300, 300);
    });
});