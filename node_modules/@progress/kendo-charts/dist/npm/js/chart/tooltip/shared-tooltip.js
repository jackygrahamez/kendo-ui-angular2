module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(306);


/***/ },

/***/ 55:
/***/ function(module, exports) {

	module.exports = require("../../core");

/***/ },

/***/ 147:
/***/ function(module, exports) {

	module.exports = require("../../common");

/***/ },

/***/ 306:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _baseTooltip = __webpack_require__(307);

	var _baseTooltip2 = _interopRequireDefault(_baseTooltip);

	var _core = __webpack_require__(55);

	var _common = __webpack_require__(147);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var SharedTooltip = function (_BaseTooltip) {
	    _inherits(SharedTooltip, _BaseTooltip);

	    function SharedTooltip(element, plotArea, options) {
	        _classCallCheck(this, SharedTooltip);

	        var _this = _possibleConstructorReturn(this, (SharedTooltip.__proto__ || Object.getPrototypeOf(SharedTooltip)).call(this, element, options));

	        _this.plotArea = plotArea;
	        return _this;
	    }

	    _createClass(SharedTooltip, [{
	        key: 'showAt',
	        value: function showAt(points, coords) {
	            var tooltipPoints = (0, _common.grep)(points, function (point) {
	                var tooltip = point.series.tooltip;
	                var excluded = tooltip && tooltip.visible === false;

	                return !excluded;
	            });

	            if (tooltipPoints.length > 0) {
	                var point = tooltipPoints[0];
	                var slot = this.plotArea.categoryAxis.getSlot(point.categoryIx);

	                var anchor = coords ? this._slotAnchor(coords, slot) : this._defaultAnchor(point, slot);

	                this.show({
	                    anchor: anchor,
	                    shared: true,
	                    points: points,
	                    category: point.category,
	                    categoryText: (0, _common.autoFormat)(this.options.categoryFormat, point.category)
	                }, this.options);
	            }
	        }
	    }, {
	        key: '_slotAnchor',
	        value: function _slotAnchor(point, slot) {
	            var axis = this.plotArea.categoryAxis;
	            var align = {
	                horizontal: "left",
	                vertical: "center"
	            };

	            if (!axis.options.vertical) {
	                point.x = slot.center().x;
	            }

	            return {
	                point: point,
	                align: align
	            };
	        }
	    }, {
	        key: '_defaultAnchor',
	        value: function _defaultAnchor(point, slot) {
	            var box = point.owner.pane.chartsBox();
	            var vertical = this.plotArea.categoryAxis.options.vertical;
	            var center = box.center();
	            var slotCenter = slot.center();
	            var align = {
	                horizontal: "center",
	                vertical: "center"
	            };

	            var centerPoint = void 0;
	            if (vertical) {
	                centerPoint = new _core.Point(center.x, slotCenter.y);
	            } else {
	                centerPoint = new _core.Point(slotCenter.x, center.y);
	            }

	            return {
	                point: centerPoint,
	                align: align
	            };
	        }
	    }]);

	    return SharedTooltip;
	}(_baseTooltip2.default);

	(0, _common.setDefaultOptions)(SharedTooltip.prototype, {
	    categoryFormat: '{0:d}'
	});

	exports.default = SharedTooltip;

/***/ },

/***/ 307:
/***/ function(module, exports) {

	module.exports = require("./base-tooltip");

/***/ }

/******/ });