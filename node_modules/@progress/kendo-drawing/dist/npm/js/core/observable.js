module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(119);


/***/ },

/***/ 119:
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Observable = function () {
	    function Observable() {
	        _classCallCheck(this, Observable);

	        this._events = {};
	    }

	    _createClass(Observable, [{
	        key: "bind",
	        value: function bind(eventName, handlers, one) {
	            var _this = this,
	                _arguments = arguments;

	            var eventNames = getArray(eventName);
	            var handlersIsFunction = isFunction(handlers);
	            var length = eventNames.length;

	            if (handlers === undefined) {
	                for (var field in eventName) {
	                    this.bind(field, eventName[field]);
	                }
	                return this;
	            }

	            var _loop = function _loop(idx) {
	                var eventName = eventNames[idx];

	                var handler = handlersIsFunction ? handlers : handlers[eventName];

	                if (handler) {
	                    if (one) {
	                        (function () {
	                            var original = handler;
	                            handler = function (_handler) {
	                                function handler() {
	                                    return _handler.apply(this, arguments);
	                                }

	                                handler.toString = function () {
	                                    return _handler.toString();
	                                };

	                                return handler;
	                            }(function () {
	                                // eslint-disable-line no-loop-func
	                                _this.unbind(eventName, handler);
	                                original.apply(_this, _arguments);
	                            });
	                            handler.original = original;
	                        })();
	                    }
	                    var events = _this._events[eventName] = _this._events[eventName] || [];
	                    events.push(handler);
	                }
	            };

	            for (var idx = 0; idx < length; idx++) {
	                _loop(idx);
	            }

	            return this;
	        }
	    }, {
	        key: "one",
	        value: function one(eventNames, handlers) {
	            return this.bind(eventNames, handlers, true);
	        }
	    }, {
	        key: "first",
	        value: function first(eventName, handlers) {
	            var eventNames = getArray(eventName);
	            var handlersIsFunction = isFunction(handlers);

	            for (var idx = 0, length = eventNames.length; idx < length; idx++) {
	                var _eventName = eventNames[idx];

	                var _handler2 = handlersIsFunction ? handlers : handlers[_eventName];

	                if (_handler2) {
	                    var events = this._events[_eventName] = this._events[_eventName] || [];
	                    events.unshift(_handler2);
	                }
	            }

	            return this;
	        }
	    }, {
	        key: "trigger",
	        value: function trigger(eventName) {
	            var e = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	            var events = this._events[eventName];

	            if (events) {
	                var length = events.length;

	                e.sender = this;
	                e._defaultPrevented = false;
	                e.preventDefault = preventDefault;
	                e.isDefaultPrevented = isDefaultPrevented;

	                events = events.slice();

	                for (var idx = 0; idx < length; idx++) {
	                    events[idx].call(this, e);
	                }

	                return e._defaultPrevented === true;
	            }

	            return false;
	        }
	    }, {
	        key: "unbind",
	        value: function unbind(eventName, handler) {
	            var events = this._events[eventName];

	            if (eventName === undefined) {
	                this._events = {};
	            } else if (events) {
	                if (handler) {
	                    for (var idx = events.length - 1; idx >= 0; idx--) {
	                        if (events[idx] === handler || events[idx].original === handler) {
	                            events.splice(idx, 1);
	                        }
	                    }
	                } else {
	                    this._events[eventName] = [];
	                }
	            }

	            return this;
	        }
	    }]);

	    return Observable;
	}();

	function isFunction(value) {
	    return typeof value === "function";
	}

	function getArray(value) {
	    return typeof value === "string" ? [value] : value;
	}

	function preventDefault() {
	    this._defaultPrevented = true;
	}

	function isDefaultPrevented() {
	    return this._defaultPrevented === true;
	}

	exports.default = Observable;

/***/ }

/******/ });