(function(e, a) { for(var i in a) e[i] = a[i]; }(exports, /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(71);


/***/ },

/***/ 53:
/***/ function(module, exports) {

	module.exports = require("rxjs/Observable");

/***/ },

/***/ 71:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(53);
	var BehaviorSubject_1 = __webpack_require__(72);
	/**
	 * @hidden
	 */
	var ScrollAction = (function () {
	    function ScrollAction(offset) {
	        this.offset = offset;
	    }
	    return ScrollAction;
	}());
	exports.ScrollAction = ScrollAction;
	/**
	 * @hidden
	 */
	var PageAction = (function () {
	    function PageAction(skip, take) {
	        this.skip = skip;
	        this.take = take;
	    }
	    return PageAction;
	}());
	exports.PageAction = PageAction;
	/**
	 * @hidden
	 */
	var ScrollerService = (function () {
	    function ScrollerService(scrollObservable) {
	        this.scrollObservable = scrollObservable;
	        this.firstLoaded = 0;
	    }
	    ScrollerService.prototype.create = function (rowHeightService, skip, take, total) {
	        var _this = this;
	        this.rowHeightService = rowHeightService;
	        this.firstLoaded = skip;
	        this.lastLoaded = skip + take;
	        this.take = take;
	        this.total = total;
	        this.lastScrollTop = 0;
	        var subject = new BehaviorSubject_1.BehaviorSubject(new ScrollAction(this.rowHeightService.offset(skip)));
	        Observable_1.Observable.create(function (observer) {
	            _this.unsubscribe();
	            _this.scrollSubscription = _this.scrollObservable.subscribe(function (x) { return _this.onScroll(x, observer); });
	        }).subscribe(function (x) { return subject.next(x); });
	        return subject;
	    };
	    ScrollerService.prototype.destroy = function () {
	        this.unsubscribe();
	    };
	    ScrollerService.prototype.onScroll = function (_a, observer) {
	        var scrollTop = _a.scrollTop, offsetHeight = _a.offsetHeight;
	        if (this.lastScrollTop === scrollTop) {
	            return;
	        }
	        var up = this.lastScrollTop >= scrollTop;
	        this.lastScrollTop = scrollTop;
	        var firstItemIndex = this.rowHeightService.index(scrollTop);
	        var firstItemOffset = this.rowHeightService.offset(firstItemIndex);
	        var lastItemIndex = this.rowHeightService.index(scrollTop + offsetHeight);
	        if (!up && lastItemIndex >= this.lastLoaded && this.lastLoaded < this.total) {
	            this.firstLoaded = firstItemIndex;
	            observer.next(new ScrollAction(firstItemOffset));
	            var nextTake = this.firstLoaded + this.take;
	            this.lastLoaded = Math.min(nextTake, this.total);
	            nextTake = nextTake > this.total ? this.total - this.firstLoaded : this.take;
	            observer.next(new PageAction(this.firstLoaded, nextTake));
	        }
	        if (up && firstItemIndex <= this.firstLoaded) {
	            this.firstLoaded = Math.max(firstItemIndex - 1, 0);
	            observer.next(new ScrollAction(this.rowHeightService.offset(this.firstLoaded)));
	            this.lastLoaded = Math.min(this.firstLoaded + this.take, this.total);
	            observer.next(new PageAction(this.firstLoaded, this.take));
	        }
	    };
	    ScrollerService.prototype.unsubscribe = function () {
	        if (this.scrollSubscription) {
	            this.scrollSubscription.unsubscribe();
	            this.scrollSubscription = undefined;
	        }
	    };
	    return ScrollerService;
	}());
	exports.ScrollerService = ScrollerService;


/***/ },

/***/ 72:
/***/ function(module, exports) {

	module.exports = require("rxjs/BehaviorSubject");

/***/ }

/******/ })));
//# sourceMappingURL=scroller.service.js.map