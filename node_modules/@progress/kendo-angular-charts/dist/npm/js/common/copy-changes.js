(function(e, a) { for(var i in a) e[i] = a[i]; }(exports, /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(390);


/***/ },

/***/ 390:
/***/ function(module, exports) {

	"use strict";
	/**
	 * @hidden
	 */
	function copyChanges(changes, options) {
	    for (var propertyName in changes) {
	        if (!changes.hasOwnProperty(propertyName)) {
	            continue;
	        }
	        var value = changes[propertyName].currentValue;
	        // We actually care about strong null check
	        // tslint:disable-next-line:no-null-keyword
	        if (value === null || value === undefined) {
	            delete options[propertyName];
	        }
	        else {
	            options[propertyName] = value;
	        }
	    }
	}
	exports.copyChanges = copyChanges;


/***/ }

/******/ })));
//# sourceMappingURL=copy-changes.js.map