(function(e, a) { for(var i in a) e[i] = a[i]; }(exports, /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(10);


/***/ },
/* 1 */,
/* 2 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 3 */,
/* 4 */,
/* 5 */,
/* 6 */,
/* 7 */,
/* 8 */
/***/ function(module, exports) {

	module.exports = require("@angular/core");

/***/ },
/* 9 */
/***/ function(module, exports) {

	module.exports = require("./button.service");

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	__webpack_require__(2);
	var core_1 = __webpack_require__(8);
	var button_service_1 = __webpack_require__(9);
	/**
	 * Represents the Kendo UI Button component for Angular.
	 */
	var ButtonDirective = (function () {
	    function ButtonDirective(element, renderer, service) {
	        this.service = service;
	        /**
	         * Provides visual styling indicating if the Button is active.
	         * By default, `togglable` is set to `false`.
	         */
	        this.togglable = false;
	        /**
	         * Adds visual weight to the Button and makes it primary.
	         */
	        this.primary = false;
	        this.isDisabled = false;
	        this.isIcon = false;
	        /**
	         * Sets the selected state of the Button.
	         */
	        this.selected = false;
	        this.element = element.nativeElement;
	        this.renderer = renderer;
	    }
	    Object.defineProperty(ButtonDirective.prototype, "icon", {
	        /**
	         * Defines a name of an existing icon in the Kendo UI theme.
	         * The icon is rendered by a `span.k-icon` element inside the Button.
	         */
	        set: function (icon) {
	            var _this = this;
	            this.iconSetter(icon, function () {
	                _this.isIcon = true;
	                var classes = 'k-icon k-i-' + icon;
	                _this.addIcon(classes);
	            });
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ButtonDirective.prototype, "iconClass", {
	        /**
	         * Defines a CSS class&mdash;or multiple classes separated by spaces&mdash;
	         * which are applied to a `span` element inside the Button. Allows the use of custom icons.
	         */
	        set: function (iconClassName) {
	            this.iconSetter(iconClassName, this.addIcon.bind(this));
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ButtonDirective.prototype, "imageUrl", {
	        /**
	         * Defines a URL, which is used for an `img` element inside the Button.
	         * The URL can be relative or absolute. If relative, it is evaluated with relation to the web page URL.
	         */
	        set: function (imageUrl) {
	            this.iconSetter(imageUrl, this.addImgIcon.bind(this));
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ButtonDirective.prototype, "disabled", {
	        /**
	         * Disables the Button if set to `true`.
	         */
	        set: function (disabled) {
	            this.isDisabled = disabled;
	            this.renderer.setElementProperty(this.element, 'disabled', disabled);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ButtonDirective.prototype, "className", {
	        get: function () {
	            var textContent = this.element.innerText.length;
	            return this.resolveClasses({
	                'k-button': true,
	                'k-state-disabled': this.isDisabled,
	                'k-primary': this.primary,
	                'k-state-active': this.selected,
	                'k-button-icontext': this.isIcon && textContent,
	                'k-button-icon': this.isIcon && !textContent
	            });
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ButtonDirective.prototype.onClick = function () {
	        if (!this.disabled && this.service) {
	            this.service.click(this);
	        }
	        if (!this.service) {
	            this.selected = !this.selected;
	        }
	    };
	    ButtonDirective.prototype.ngOnDestroy = function () {
	        this.removeNode();
	    };
	    ButtonDirective.prototype.resolveClasses = function (classes) {
	        var resolved = '';
	        Object.keys(classes).forEach(function (key) {
	            resolved += classes[key] ? key + ' ' : '';
	        });
	        return resolved;
	    };
	    ButtonDirective.prototype.addImgIcon = function (imageUrl) {
	        this.imageNode = this.imageNode || document.createElement('img');
	        this.imageNode.src = imageUrl;
	        this.imageNode.className = 'k-image';
	        this.element.insertBefore(this.imageNode, this.element.firstChild);
	    };
	    ButtonDirective.prototype.addIcon = function (classNames) {
	        if (this.iconNode) {
	            this.iconNode.className = classNames;
	        }
	        else {
	            this.iconNode = document.createElement('span');
	            this.iconNode.className = classNames;
	            this.element.insertBefore(this.iconNode, this.element.firstChild);
	        }
	    };
	    ButtonDirective.prototype.iconSetter = function (icon, insertIcon) {
	        if (icon === undefined) {
	            this.removeNode();
	        }
	        else {
	            insertIcon(icon);
	        }
	    };
	    ButtonDirective.prototype.removeNode = function () {
	        if (this.imageNode) {
	            this.element.removeChild(this.imageNode);
	        }
	        if (this.iconNode) {
	            this.element.removeChild(this.iconNode);
	        }
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], ButtonDirective.prototype, "togglable", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], ButtonDirective.prototype, "primary", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String), 
	        __metadata('design:paramtypes', [String])
	    ], ButtonDirective.prototype, "icon", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], ButtonDirective.prototype, "selected", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String), 
	        __metadata('design:paramtypes', [String])
	    ], ButtonDirective.prototype, "iconClass", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String), 
	        __metadata('design:paramtypes', [String])
	    ], ButtonDirective.prototype, "imageUrl", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean), 
	        __metadata('design:paramtypes', [Boolean])
	    ], ButtonDirective.prototype, "disabled", null);
	    __decorate([
	        core_1.HostBinding('class'), 
	        __metadata('design:type', String)
	    ], ButtonDirective.prototype, "className", null);
	    __decorate([
	        core_1.HostListener('click'), 
	        __metadata('design:type', Function), 
	        __metadata('design:paramtypes', []), 
	        __metadata('design:returntype', void 0)
	    ], ButtonDirective.prototype, "onClick", null);
	    ButtonDirective = __decorate([
	        core_1.Directive({
	            selector: '[kendoButton]'
	        }),
	        __param(2, core_1.Optional()), 
	        __metadata('design:paramtypes', [core_1.ElementRef, core_1.Renderer, button_service_1.KendoButtonService])
	    ], ButtonDirective);
	    return ButtonDirective;
	}());
	exports.ButtonDirective = ButtonDirective;


/***/ }
/******/ ])));
//# sourceMappingURL=button.directive.js.map