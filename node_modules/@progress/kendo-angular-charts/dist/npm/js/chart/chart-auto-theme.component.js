(function(e, a) { for(var i in a) e[i] = a[i]; }(exports, /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(175);


/***/ },

/***/ 13:
/***/ function(module, exports) {

	module.exports = require("@angular/core");

/***/ },

/***/ 28:
/***/ function(module, exports) {

	module.exports = require("@progress/kendo-charts");

/***/ },

/***/ 118:
/***/ function(module, exports) {

	module.exports = require("../common/configuration.service");

/***/ },

/***/ 175:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(13);
	var configuration_service_1 = __webpack_require__(118);
	var theme_service_1 = __webpack_require__(176);
	var charts = __webpack_require__(28);
	var font = function (style) { return (style.fontSize + " " + style.fontFamily); };
	var letterPos = function (letter) { return letter.toLowerCase().charCodeAt(0) - "a".charCodeAt(0); };
	var seriesPos = function (name) { return letterPos(name.match(/series-([a-z])$/)[1]); };
	/**
	 * @hidden
	 */
	var ChartAutoThemeComponent = (function () {
	    function ChartAutoThemeComponent(element, themeService) {
	        this.element = element;
	        this.themeService = themeService;
	    }
	    ChartAutoThemeComponent.prototype.ngAfterContentInit = function () {
	        if (this.themeService.isLoaded()) {
	            return;
	        }
	        this.themeService.push(charts.chartBaseTheme());
	        this.setColors();
	        this.setFonts();
	        this.setSeriesColors();
	        this.notify('seriesDefaults.area.opacity', this.queryStyle('chart-area-opacity').opacity);
	        this.themeService.markLoaded();
	    };
	    ChartAutoThemeComponent.prototype.setColors = function () {
	        this.mapColor('axisDefaults.crosshair.color', 'normal-text-color');
	        this.mapColor('axisDefaults.labels.color', 'normal-text-color');
	        this.mapColor('axisDefaults.line.color', 'chart-major-lines');
	        this.mapColor('axisDefaults.majorGridLines.color', 'chart-major-lines');
	        this.mapColor('axisDefaults.minorGridLines.color', 'chart-minor-lines');
	        this.mapColor('axisDefaults.notes.icon.background', 'accent');
	        this.mapColor('axisDefaults.notes.icon.border.color', 'accent');
	        this.mapColor('axisDefaults.notes.label.color', 'background');
	        this.mapColor('axisDefaults.notes.line.color', 'chart-major-lines');
	        this.mapColor('axisDefaults.title.color', 'normal-text-color');
	        this.mapColor('legend.inactiveItems.labels.color', 'chart-inactive');
	        this.mapColor('legend.inactiveItems.markers.color', 'chart-inactive');
	        this.mapColor('legend.labels.color', 'normal-text-color');
	        this.mapColor('seriesDefaults.area.highlight.markers.border', 'background');
	        this.mapColor('seriesDefaults.boxPlot.downColor', 'chart-major-lines');
	        this.mapColor('seriesDefaults.boxPlot.mean.color', 'base');
	        this.mapColor('seriesDefaults.boxPlot.median.color', 'base');
	        this.mapColor('seriesDefaults.boxPlot.whiskers.color', 'base');
	        this.mapColor('seriesDefaults.bullet.target.color', 'accent');
	        this.mapColor('seriesDefaults.candlestick.downColor', 'chart-major-lines');
	        this.mapColor('seriesDefaults.candlestick.line.color', 'chart-major-lines');
	        this.mapColor('seriesDefaults.errorBars.color', 'normal-text-color');
	        this.mapColor('seriesDefaults.horizontalWaterfall.line.color', 'chart-major-lines');
	        this.mapColor('seriesDefaults.icon.border.color', 'chart-major-lines');
	        this.mapColor('seriesDefaults.labels.background', 'background');
	        this.mapColor('seriesDefaults.labels.color', 'normal-text-color');
	        this.mapColor('seriesDefaults.notes.icon.background', 'accent');
	        this.mapColor('seriesDefaults.notes.icon.border.color', 'accent');
	        this.mapColor('seriesDefaults.notes.label.color', 'background');
	        this.mapColor('seriesDefaults.notes.line.color', 'chart-major-lines');
	        this.mapColor('seriesDefaults.verticalBullet.target.color', 'accent');
	        this.mapColor('seriesDefaults.waterfall.line.color', 'chart-major-lines');
	        this.mapColor('title.color', 'normal-text-color');
	    };
	    ChartAutoThemeComponent.prototype.setFonts = function () {
	        var small = font(this.queryStyle('chart-font-s'));
	        var medium = font(this.queryStyle('chart-font-m'));
	        var large = font(this.queryStyle('chart-font-l'));
	        this.notify('axisDefaults.labels.font', medium);
	        this.notify('axisDefaults.notes.label.font', medium);
	        this.notify('axisDefaults.title.font', large);
	        this.notify('legend.labels.font', medium);
	        this.notify('seriesDefaults.labels.font', small);
	        this.notify('seriesDefaults.notes.label.font', medium);
	        this.notify('title.font', large);
	    };
	    ChartAutoThemeComponent.prototype.setSeriesColors = function () {
	        var element = this.element.nativeElement;
	        var series = [].slice.call(element.querySelectorAll('.k-var--series div'));
	        var seriesColors = series.reduce(function (arr, el) {
	            var pos = seriesPos(el.className);
	            arr[pos] = window.getComputedStyle(el).backgroundColor;
	            return arr;
	        }, [] // Will populate the series colors in this array
	        );
	        this.notify('seriesColors', seriesColors);
	    };
	    ChartAutoThemeComponent.prototype.mapColor = function (key, varName) {
	        this.notify(key, this.queryStyle(varName).backgroundColor);
	    };
	    ChartAutoThemeComponent.prototype.queryStyle = function (varName) {
	        var element = this.element.nativeElement;
	        return window.getComputedStyle(element.querySelector(".k-var--" + varName));
	    };
	    ChartAutoThemeComponent.prototype.notify = function (key, value) {
	        var change = new configuration_service_1.Change(key, value);
	        this.themeService.notify(change);
	    };
	    ChartAutoThemeComponent = __decorate([
	        core_1.Component({
	            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
	            selector: 'kendo-chart-auto-theme',
	            styles: ["\n    :host {\n      display: none;\n    }\n  "],
	            template: "\n    <div class=\"k-var--accent\"></div>\n    <div class=\"k-var--base\"></div>\n    <div class=\"k-var--background\"></div>\n\n    <div class=\"k-var--normal-background\"></div>\n    <div class=\"k-var--normal-text-color\"></div>\n    <div class=\"k-var--hover-background\"></div>\n    <div class=\"k-var--hover-text-color\"></div>\n    <div class=\"k-var--selected-background\"></div>\n    <div class=\"k-var--selected-text-color\"></div>\n\n    <div class=\"k-var--chart-inactive\"></div>\n    <div class=\"k-var--chart-major-lines\"></div>\n    <div class=\"k-var--chart-minor-lines\"></div>\n    <div class=\"k-var--chart-area-opacity\"></div>\n\n    <div class=\"k-var--chart-font-s\"></div>\n    <div class=\"k-var--chart-font-m\"></div>\n    <div class=\"k-var--chart-font-l\"></div>\n\n    <div class=\"k-var--series\">\n      <div class=\"k-var--series-a\"></div>\n      <div class=\"k-var--series-b\"></div>\n      <div class=\"k-var--series-c\"></div>\n      <div class=\"k-var--series-d\"></div>\n      <div class=\"k-var--series-e\"></div>\n      <div class=\"k-var--series-f\"></div>\n    </div>\n  "
	        }), 
	        __metadata('design:paramtypes', [core_1.ElementRef, theme_service_1.ThemeService])
	    ], ChartAutoThemeComponent);
	    return ChartAutoThemeComponent;
	}());
	exports.ChartAutoThemeComponent = ChartAutoThemeComponent;


/***/ },

/***/ 176:
/***/ function(module, exports) {

	module.exports = require("../common/theme.service");

/***/ }

/******/ })));
//# sourceMappingURL=chart-auto-theme.component.js.map