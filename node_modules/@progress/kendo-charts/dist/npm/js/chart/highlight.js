module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(168);


/***/ },

/***/ 168:
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Highlight = function () {
	    function Highlight() {
	        _classCallCheck(this, Highlight);

	        this._points = [];
	    }

	    _createClass(Highlight, [{
	        key: "destroy",
	        value: function destroy() {
	            this._points = [];
	        }
	    }, {
	        key: "show",
	        value: function show(points) {
	            var arrayPoints = [].concat(points);
	            this.hide();

	            for (var i = 0; i < arrayPoints.length; i++) {
	                var point = arrayPoints[i];
	                if (point && point.toggleHighlight && point.hasHighlight()) {
	                    this.togglePointHighlight(point, true);
	                    this._points.push(point);
	                }
	            }
	        }
	    }, {
	        key: "togglePointHighlight",
	        value: function togglePointHighlight(point, show) {
	            var toggleHandler = (point.options.highlight || {}).toggle;
	            if (toggleHandler) {
	                var eventArgs = {
	                    category: point.category,
	                    series: point.series,
	                    dataItem: point.dataItem,
	                    value: point.value,
	                    stackValue: point.stackValue,
	                    preventDefault: preventDefault,
	                    visual: point.highlightVisual(),
	                    show: show
	                };
	                toggleHandler(eventArgs);
	                if (!eventArgs._defaultPrevented) {
	                    point.toggleHighlight(show);
	                }
	            } else {
	                point.toggleHighlight(show);
	            }
	        }
	    }, {
	        key: "hide",
	        value: function hide() {
	            var points = this._points;
	            while (points.length) {
	                this.togglePointHighlight(points.pop(), false);
	            }
	        }
	    }, {
	        key: "isHighlighted",
	        value: function isHighlighted(element) {
	            var points = this._points;

	            for (var i = 0; i < points.length; i++) {
	                var point = points[i];
	                if (element === point) {
	                    return true;
	                }
	            }

	            return false;
	        }
	    }]);

	    return Highlight;
	}();

	function preventDefault() {
	    this._defaultPrevented = true;
	}

	exports.default = Highlight;

/***/ }

/******/ });