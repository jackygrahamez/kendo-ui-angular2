module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(491);


/***/ },

/***/ 60:
/***/ function(module, exports) {

	module.exports = require("../common/constants");

/***/ },

/***/ 107:
/***/ function(module, exports) {

	module.exports = require("./constants");

/***/ },

/***/ 134:
/***/ function(module, exports) {

	module.exports = require("../common");

/***/ },

/***/ 135:
/***/ function(module, exports) {

	module.exports = require("../date-utils");

/***/ },

/***/ 459:
/***/ function(module, exports) {

	module.exports = require("./axis-label");

/***/ },

/***/ 473:
/***/ function(module, exports) {

	module.exports = require("./axis");

/***/ },

/***/ 491:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _axis = __webpack_require__(473);

	var _axis2 = _interopRequireDefault(_axis);

	var _numericAxis = __webpack_require__(492);

	var _numericAxis2 = _interopRequireDefault(_numericAxis);

	var _axisLabel = __webpack_require__(459);

	var _axisLabel2 = _interopRequireDefault(_axisLabel);

	var _constants = __webpack_require__(107);

	var _constants2 = __webpack_require__(60);

	var _common = __webpack_require__(134);

	var _autoMajorUnit = __webpack_require__(493);

	var _autoMajorUnit2 = _interopRequireDefault(_autoMajorUnit);

	var _ceil = __webpack_require__(494);

	var _ceil2 = _interopRequireDefault(_ceil);

	var _dateUtils = __webpack_require__(135);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var HOURS = _dateUtils.constants.HOURS;
	var DAYS = _dateUtils.constants.DAYS;
	var WEEKS = _dateUtils.constants.WEEKS;
	var MONTHS = _dateUtils.constants.MONTHS;
	var YEARS = _dateUtils.constants.YEARS;
	var TIME_PER_DAY = _dateUtils.constants.TIME_PER_DAY;
	var TIME_PER_WEEK = _dateUtils.constants.TIME_PER_WEEK;
	var TIME_PER_MONTH = _dateUtils.constants.TIME_PER_MONTH;
	var TIME_PER_YEAR = _dateUtils.constants.TIME_PER_YEAR;
	var TIME_PER_UNIT = _dateUtils.constants.TIME_PER_UNIT;

	var DateValueAxis = function (_Axis) {
	    _inherits(DateValueAxis, _Axis);

	    function DateValueAxis(seriesMin, seriesMax) {
	        var axisOptions = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

	        _classCallCheck(this, DateValueAxis);

	        var min = (0, _dateUtils.toDate)(seriesMin);
	        var max = (0, _dateUtils.toDate)(seriesMax);

	        var options = (0, _common.deepExtend)(axisOptions, {
	            min: (0, _dateUtils.toDate)(axisOptions.min),
	            max: (0, _dateUtils.toDate)(axisOptions.max),
	            axisCrossingValue: (0, _dateUtils.toDate)(axisOptions.axisCrossingValues || axisOptions.axisCrossingValue)
	        });
	        options = applyDefaults(min, max, options);

	        var _this = _possibleConstructorReturn(this, (DateValueAxis.__proto__ || Object.getPrototypeOf(DateValueAxis)).call(this, options));

	        _this.seriesMin = min;
	        _this.seriesMax = max;
	        _this.totalMin = (0, _dateUtils.toTime)((0, _dateUtils.floorDate)((0, _dateUtils.toTime)(min) - 1, options.baseUnit));
	        _this.totalMax = (0, _dateUtils.toTime)((0, _dateUtils.ceilDate)((0, _dateUtils.toTime)(max) + 1, options.baseUnit));
	        return _this;
	    }

	    _createClass(DateValueAxis, [{
	        key: 'range',
	        value: function range() {
	            var options = this.options;
	            return { min: options.min, max: options.max };
	        }
	    }, {
	        key: 'getDivisions',
	        value: function getDivisions(stepValue) {
	            var options = this.options;

	            return Math.floor((0, _dateUtils.duration)(options.min, options.max, options.baseUnit) / stepValue + 1);
	        }
	    }, {
	        key: 'getTickPositions',
	        value: function getTickPositions(step) {
	            var options = this.options;
	            var vertical = options.vertical;
	            var lineBox = this.lineBox();
	            var dir = (vertical ? -1 : 1) * (options.reverse ? -1 : 1);
	            var startEdge = dir === 1 ? 1 : 2;
	            var start = lineBox[(vertical ? _constants2.Y : _constants2.X) + startEdge];
	            var divisions = this.getDivisions(step);
	            var timeRange = (0, _dateUtils.dateDiff)(options.max, options.min);
	            var lineSize = vertical ? lineBox.height() : lineBox.width();
	            var scale = lineSize / timeRange;

	            var positions = [start];
	            for (var i = 1; i < divisions; i++) {
	                var date = (0, _dateUtils.addDuration)(options.min, i * step, options.baseUnit);
	                var pos = start + (0, _dateUtils.dateDiff)(date, options.min) * scale * dir;

	                positions.push((0, _common.round)(pos, _constants2.COORD_PRECISION));
	            }

	            return positions;
	        }
	    }, {
	        key: 'getMajorTickPositions',
	        value: function getMajorTickPositions() {
	            return this.getTickPositions(this.options.majorUnit);
	        }
	    }, {
	        key: 'getMinorTickPositions',
	        value: function getMinorTickPositions() {
	            return this.getTickPositions(this.options.minorUnit);
	        }
	    }, {
	        key: 'getSlot',
	        value: function getSlot(a, b, limit) {
	            return _numericAxis2.default.prototype.getSlot.call(this, (0, _dateUtils.toDate)(a), (0, _dateUtils.toDate)(b), limit);
	        }
	    }, {
	        key: 'getValue',
	        value: function getValue(point) {
	            var value = _numericAxis2.default.prototype.getValue.call(this, point);

	            return value !== null ? (0, _dateUtils.toDate)(value) : null;
	        }
	    }, {
	        key: 'labelsCount',
	        value: function labelsCount() {
	            return this.getDivisions(this.options.majorUnit);
	        }
	    }, {
	        key: 'createAxisLabel',
	        value: function createAxisLabel(index, labelOptions) {
	            var options = this.options;
	            var offset = index * options.majorUnit;
	            var date = options.min;

	            if (offset > 0) {
	                date = (0, _dateUtils.addDuration)(date, offset, options.baseUnit);
	            }

	            var unitFormat = labelOptions.dateFormats[options.baseUnit];
	            labelOptions.format = labelOptions.format || unitFormat;

	            var text = this.axisLabelText(date, null, labelOptions);
	            return new _axisLabel2.default(date, text, index, null, labelOptions);
	        }
	    }, {
	        key: 'translateRange',
	        value: function translateRange(delta, exact) {
	            var options = this.options;
	            var baseUnit = options.baseUnit;
	            var weekStartDay = options.weekStartDay;

	            var lineBox = this.lineBox();
	            var size = options.vertical ? lineBox.height() : lineBox.width();
	            var range = this.range();
	            var scale = size / (0, _dateUtils.dateDiff)(range.max, range.min);
	            var offset = (0, _common.round)(delta / scale, _constants2.DEFAULT_PRECISION);
	            var from = (0, _dateUtils.addTicks)(options.min, offset);
	            var to = (0, _dateUtils.addTicks)(options.max, offset);

	            if (!exact) {
	                from = (0, _dateUtils.addDuration)(from, 0, baseUnit, weekStartDay);
	                to = (0, _dateUtils.addDuration)(to, 0, baseUnit, weekStartDay);
	            }

	            return {
	                min: from,
	                max: to
	            };
	        }
	    }, {
	        key: 'scaleRange',
	        value: function scaleRange(delta) {
	            var _options = this.options;
	            var from = _options.min;
	            var to = _options.max;

	            var rounds = Math.abs(delta);

	            while (rounds--) {
	                var range = (0, _dateUtils.dateDiff)(from, to);
	                var step = Math.round(range * 0.1);
	                if (delta < 0) {
	                    from = (0, _dateUtils.addTicks)(from, step);
	                    to = (0, _dateUtils.addTicks)(to, -step);
	                } else {
	                    from = (0, _dateUtils.addTicks)(from, -step);
	                    to = (0, _dateUtils.addTicks)(to, step);
	                }
	            }

	            return { min: from, max: to };
	        }
	    }, {
	        key: 'shouldRenderNote',
	        value: function shouldRenderNote(value) {
	            var range = this.range();

	            return (0, _dateUtils.dateComparer)(value, range.min) >= 0 && (0, _dateUtils.dateComparer)(value, range.max) <= 0;
	        }
	    }, {
	        key: 'pan',
	        value: function pan(delta) {
	            var range = this.translateRange(delta, true);
	            var limittedRange = this.limitRange((0, _dateUtils.toTime)(range.min), (0, _dateUtils.toTime)(range.max), this.totalMin, this.totalMax);

	            if (limittedRange) {
	                return {
	                    min: (0, _dateUtils.toDate)(limittedRange.min),
	                    max: (0, _dateUtils.toDate)(limittedRange.max)
	                };
	            }
	        }
	    }, {
	        key: 'pointsRange',
	        value: function pointsRange(start, end) {
	            var startValue = this.getValue(start);
	            var endValue = this.getValue(end);
	            var min = Math.min(startValue, endValue);
	            var max = Math.max(startValue, endValue);

	            return {
	                min: (0, _dateUtils.toDate)(min),
	                max: (0, _dateUtils.toDate)(max)
	            };
	        }
	    }, {
	        key: 'zoomRange',
	        value: function zoomRange(delta) {
	            var range = this.scaleRange(delta);
	            var min = (0, _dateUtils.toDate)((0, _common.limitValue)((0, _dateUtils.toTime)(range.min), this.totalMin, this.totalMax));
	            var max = (0, _dateUtils.toDate)((0, _common.limitValue)((0, _dateUtils.toTime)(range.max), this.totalMin, this.totalMax));

	            return {
	                min: min,
	                max: max
	            };
	        }
	    }]);

	    return DateValueAxis;
	}(_axis2.default);

	function timeUnits(delta) {
	    var unit = HOURS;

	    if (delta >= TIME_PER_YEAR) {
	        unit = YEARS;
	    } else if (delta >= TIME_PER_MONTH) {
	        unit = MONTHS;
	    } else if (delta >= TIME_PER_WEEK) {
	        unit = WEEKS;
	    } else if (delta >= TIME_PER_DAY) {
	        unit = DAYS;
	    }

	    return unit;
	}

	function applyDefaults(seriesMin, seriesMax, options) {
	    var min = options.min || seriesMin;
	    var max = options.max || seriesMax;
	    var baseUnit = options.baseUnit || (max && min ? timeUnits((0, _dateUtils.absoluteDateDiff)(max, min)) : HOURS);
	    var baseUnitTime = TIME_PER_UNIT[baseUnit];
	    var autoMin = (0, _dateUtils.floorDate)((0, _dateUtils.toTime)(min) - 1, baseUnit) || (0, _dateUtils.toDate)(max);
	    var autoMax = (0, _dateUtils.ceilDate)((0, _dateUtils.toTime)(max) + 1, baseUnit);
	    var userMajorUnit = options.majorUnit ? options.majorUnit : undefined;
	    var majorUnit = userMajorUnit || (0, _ceil2.default)((0, _autoMajorUnit2.default)(autoMin.getTime(), autoMax.getTime()), baseUnitTime) / baseUnitTime;
	    var actualUnits = (0, _dateUtils.duration)(autoMin, autoMax, baseUnit);
	    var totalUnits = (0, _ceil2.default)(actualUnits, majorUnit);
	    var unitsToAdd = totalUnits - actualUnits;
	    var head = Math.floor(unitsToAdd / 2);
	    var tail = unitsToAdd - head;

	    if (!options.baseUnit) {
	        delete options.baseUnit;
	    }

	    options.baseUnit = options.baseUnit || baseUnit;
	    options.min = options.min || (0, _dateUtils.addDuration)(autoMin, -head, baseUnit);
	    options.max = options.max || (0, _dateUtils.addDuration)(autoMax, tail, baseUnit);
	    options.minorUnit = options.minorUnit || majorUnit / 5;
	    options.majorUnit = majorUnit;

	    return options;
	}

	(0, _common.setDefaultOptions)(DateValueAxis.prototype, {
	    type: _constants2.DATE,
	    majorGridLines: {
	        visible: true,
	        width: 1,
	        color: _constants2.BLACK
	    },
	    labels: {
	        dateFormats: _constants.DateLabelFormats
	    }
	});

	exports.default = DateValueAxis;

/***/ },

/***/ 492:
/***/ function(module, exports) {

	module.exports = require("./numeric-axis");

/***/ },

/***/ 493:
/***/ function(module, exports) {

	module.exports = require("./utils/auto-major-unit");

/***/ },

/***/ 494:
/***/ function(module, exports) {

	module.exports = require("./utils/ceil");

/***/ }

/******/ });