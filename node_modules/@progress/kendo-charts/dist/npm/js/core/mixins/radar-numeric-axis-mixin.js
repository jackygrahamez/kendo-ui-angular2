module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(500);


/***/ },

/***/ 5:
/***/ function(module, exports) {

	module.exports = require("../../common/constants");

/***/ },

/***/ 23:
/***/ function(module, exports) {

	module.exports = require("@progress/kendo-drawing");

/***/ },

/***/ 56:
/***/ function(module, exports) {

	module.exports = require("../../common/append");

/***/ },

/***/ 211:
/***/ function(module, exports) {

	module.exports = require("../../common/rad");

/***/ },

/***/ 500:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _kendoDrawing = __webpack_require__(23);

	var _shapeBuilder = __webpack_require__(501);

	var _shapeBuilder2 = _interopRequireDefault(_shapeBuilder);

	var _ring = __webpack_require__(502);

	var _ring2 = _interopRequireDefault(_ring);

	var _point = __webpack_require__(503);

	var _point2 = _interopRequireDefault(_point);

	var _constants = __webpack_require__(5);

	var _deg = __webpack_require__(504);

	var _deg2 = _interopRequireDefault(_deg);

	var _rad = __webpack_require__(211);

	var _rad2 = _interopRequireDefault(_rad);

	var _append = __webpack_require__(56);

	var _append2 = _interopRequireDefault(_append);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var RadarNumericAxisMixin = {
	    options: {
	        majorGridLines: {
	            visible: true
	        }
	    },

	    createPlotBands: function createPlotBands() {
	        var _options = this.options;
	        var type = _options.majorGridLines.type;
	        var _options$plotBands = _options.plotBands;
	        var plotBands = _options$plotBands === undefined ? [] : _options$plotBands;

	        var altAxis = this.plotArea.polarAxis;
	        var majorAngles = altAxis.majorAngles();
	        var center = altAxis.box.center();
	        var group = this._plotbandGroup = new _kendoDrawing.drawing.Group({
	            zIndex: -1
	        });

	        for (var i = 0; i < plotBands.length; i++) {
	            var band = plotBands[i];
	            var bandStyle = {
	                fill: {
	                    color: band.color,
	                    opacity: band.opacity
	                },
	                stroke: {
	                    opacity: band.opacity
	                }
	            };

	            var slot = this.getSlot(band.from, band.to, true);
	            var ring = new _ring2.default(center, center.y - slot.y2, center.y - slot.y1, 0, 360);

	            var shape = void 0;
	            if (type === _constants.ARC) {
	                shape = _shapeBuilder2.default.current.createRing(ring, bandStyle);
	            } else {
	                shape = _kendoDrawing.drawing.Path.fromPoints(this.plotBandPoints(ring, majorAngles), bandStyle).close();
	            }

	            group.append(shape);
	        }

	        this.appendVisual(group);
	    },
	    plotBandPoints: function plotBandPoints(ring, angles) {
	        var innerPoints = [];
	        var outerPoints = [];
	        var center = [ring.center.x, ring.center.y];
	        var innerCircle = new _kendoDrawing.geometry.Circle(center, ring.innerRadius);
	        var outerCircle = new _kendoDrawing.geometry.Circle(center, ring.radius);

	        for (var i = 0; i < angles.length; i++) {
	            innerPoints.push(innerCircle.pointAt(angles[i] + 180));
	            outerPoints.push(outerCircle.pointAt(angles[i] + 180));
	        }

	        innerPoints.reverse();
	        innerPoints.push(innerPoints[0]);
	        outerPoints.push(outerPoints[0]);

	        return outerPoints.concat(innerPoints);
	    },
	    createGridLines: function createGridLines(altAxis) {
	        var options = this.options;
	        var majorTicks = this.radarMajorGridLinePositions();
	        var majorAngles = altAxis.majorAngles();
	        var center = altAxis.box.center();
	        var gridLines = [];

	        if (options.majorGridLines.visible) {
	            gridLines = this.renderGridLines(center, majorTicks, majorAngles, options.majorGridLines);
	        }

	        if (options.minorGridLines.visible) {
	            var minorTicks = this.radarMinorGridLinePositions();
	            (0, _append2.default)(gridLines, this.renderGridLines(center, minorTicks, majorAngles, options.minorGridLines));
	        }

	        return gridLines;
	    },
	    renderGridLines: function renderGridLines(center, ticks, angles, options) {
	        var style = {
	            stroke: {
	                width: options.width,
	                color: options.color,
	                dashType: options.dashType
	            }
	        };
	        var container = this.gridLinesVisual();

	        for (var tickIx = 0; tickIx < ticks.length; tickIx++) {
	            var tickRadius = center.y - ticks[tickIx];
	            if (tickRadius > 0) {
	                var circle = new _kendoDrawing.geometry.Circle([center.x, center.y], tickRadius);
	                if (options.type === _constants.ARC) {
	                    container.append(new _kendoDrawing.drawing.Circle(circle, style));
	                } else {
	                    var line = new _kendoDrawing.drawing.Path(style);
	                    for (var angleIx = 0; angleIx < angles.length; angleIx++) {
	                        line.lineTo(circle.pointAt(angles[angleIx] + 180));
	                    }

	                    line.close();
	                    container.append(line);
	                }
	            }
	        }

	        return container.children;
	    },
	    getValue: function getValue(point) {
	        var lineBox = this.lineBox();
	        var altAxis = this.plotArea.polarAxis;
	        var majorAngles = altAxis.majorAngles();
	        var center = altAxis.box.center();
	        var radius = point.distanceTo(center);
	        var distance = radius;

	        if (this.options.majorGridLines.type !== _constants.ARC && majorAngles.length > 1) {
	            (function () {
	                var dx = point.x - center.x;
	                var dy = point.y - center.y;
	                var theta = ((0, _deg2.default)(Math.atan2(dy, dx)) + 540) % 360;

	                majorAngles.sort(function (a, b) {
	                    return angularDistance(a, theta) - angularDistance(b, theta);
	                });

	                // Solve triangle (center, point, axis X) using one side (radius) and two angles.
	                // Angles are derived from triangle (center, point, gridline X)
	                var midAngle = angularDistance(majorAngles[0], majorAngles[1]) / 2;
	                var alpha = angularDistance(theta, majorAngles[0]);
	                var gamma = 90 - midAngle;
	                var beta = 180 - alpha - gamma;

	                distance = radius * (Math.sin((0, _rad2.default)(beta)) / Math.sin((0, _rad2.default)(gamma)));
	            })();
	        }

	        return this.axisType().prototype.getValue.call(this, new _point2.default(lineBox.x1, lineBox.y2 - distance));
	    }
	};

	function angularDistance(a, b) {
	    return 180 - Math.abs(Math.abs(a - b) - 180);
	}

	exports.default = RadarNumericAxisMixin;

/***/ },

/***/ 501:
/***/ function(module, exports) {

	module.exports = require("../shape-builder");

/***/ },

/***/ 502:
/***/ function(module, exports) {

	module.exports = require("../ring");

/***/ },

/***/ 503:
/***/ function(module, exports) {

	module.exports = require("../point");

/***/ },

/***/ 504:
/***/ function(module, exports) {

	module.exports = require("../../common/deg");

/***/ }

/******/ });