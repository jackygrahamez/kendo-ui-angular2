import 'core-js/es6';

import { RootElement, Box } from '../../src/core';
import LineChart from '../../src/chart/line-chart/line-chart';

import { deepExtend } from '../../src/common';

import { ok, equal, mapSegments } from '../../test/test-helpers';

const chartBox = new Box(0, 0, 800, 600);
const sparseSeries = { data: [1, 2, undefined, 2], style: "step", width: 0 };
const VALUE_AXIS_MAX = 2;
const CATEGORY_AXIS_Y = 2;
let lineChart, root, pointCoordinates;

function setupLineChart(plotArea, options) {
    lineChart = new LineChart(plotArea, options);

    root = new RootElement();
    root.append(lineChart);

    root.reflow();
    root.renderVisual();

    pointCoordinates = mapSegments(lineChart._segments[0].visual.segments);
}

function stubPlotArea(getCategorySlot, getValueSlot, options) {
    return new function() {
        this.categoryAxis = this.primaryCategoryAxis = {
            getSlot: getCategorySlot,
            options: {
                categories: ["A", "B"]
            }
        };

        this.valueAxis = {
            getSlot: getValueSlot,
            options: {},
            startValue: function() {
                return 0;
            }
        };

        this.namedCategoryAxes = {};
        this.namedValueAxes = {};

        this.seriesCategoryAxis = function(series) {
            return series.categoryAxis ?
                this.namedCategoryAxes[series.categoryAxis] : this.primaryCategoryAxis;
        };

        this.options = options;
    };
}

const plotArea = stubPlotArea(
    function(categoryIndex) {
        return new Box(categoryIndex, CATEGORY_AXIS_Y, categoryIndex + 1, CATEGORY_AXIS_Y);
    },
    function(value = 0) {
        const valueY = VALUE_AXIS_MAX - value;
        const slotTop = Math.min(CATEGORY_AXIS_Y, valueY);
        const slotBottom = Math.max(CATEGORY_AXIS_Y, valueY);

        return new Box(0, slotTop, 0, slotBottom);
    }
);

// ------------------------------------------------------------
describe('Step Line Chart / Stack / Missing values', () => {
    beforeEach(() => {
        setupLineChart(plotArea, {
            series: [ sparseSeries, sparseSeries ],
            isStacked: true
        });
    });

    it("line is drawn between existing points", () => {
        setupLineChart(plotArea, {
            series: [
                deepExtend({ missingValues: "interpolate" }, sparseSeries)
            ],
            isStacked: true
        });

        equal(pointCoordinates, [
            [ 0, 1 ], [ 1, 1 ], [ 1, 1 ], [ 1, 0 ],
            [ 2, 0 ], [ 1, 0 ], [ 2, 0 ], [ 3, 0 ],
            [ 3, 0 ], [ 4, 0 ]
        ]);
    });

    it("line stops before missing value", () => {
        setupLineChart(plotArea, {
            series: [
                deepExtend({ missingValues: "gap" }, sparseSeries)
            ],
            isStacked: true
        });

        equal(pointCoordinates, [
            [ 0, 1 ], [ 1, 1 ], [ 1, 0 ], [ 2, 0]
        ]);
    });
});

// ------------------------------------------------------------
describe('Step Line Chart / Rendering / Missing Values', () => {

    it("line stops before missing value", () => {
        setupLineChart(plotArea, {
            series: [
                deepExtend({ missingValues: "gap" }, sparseSeries)
            ]
        });

        equal(pointCoordinates, [
            [ 0, 1 ], [ 1, 1 ], [ 1, 0 ], [ 2, 0 ]
        ]);
    });

    it("line continues after missing value", () => {
        setupLineChart(plotArea, {
            series: [{
                data: [ null, 1, 2 ],
                width: 0,
                style: "step"
            }]
        });

        equal(pointCoordinates, [
            [ 1, 1 ], [ 2, 1 ], [ 2, 1 ], [ 2, 0 ], [ 3, 0 ]
        ]);
    });

    it("line is drawn between existing points", () => {
        setupLineChart(plotArea, {
            series: [
                sparseSeries
            ]
        });

        equal(pointCoordinates, [
            [ 0, 1 ], [ 1, 1 ], [ 1, 1 ],
            [ 1, 0 ], [ 2, 0 ], [ 1, 0 ],
            [ 2, 0 ], [ 3, 0 ], [ 3, 0 ], [ 4, 0 ]
        ]);
    });

    it("line goes to zero for missing point", () => {
        setupLineChart(plotArea, {
            series: [
                deepExtend({ missingValues: "zero" }, sparseSeries)
            ]
        });

        equal(pointCoordinates, [
            [ 0, 1 ], [ 1, 1 ], [ 1, 0 ],
            [ 2, 0 ], [ 1, 0 ], [ 2, 0 ],
            [ 2, 2 ], [ 3, 2 ], [ 2, 2 ],
            [ 3, 2 ], [ 3, 0 ], [ 4, 0 ]
        ]);
    });
});
