module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(187);


/***/ },

/***/ 5:
/***/ function(module, exports) {

	module.exports = require("../../common/constants");

/***/ },

/***/ 7:
/***/ function(module, exports) {

	module.exports = require("../../common/defined");

/***/ },

/***/ 24:
/***/ function(module, exports) {

	module.exports = require("../constants");

/***/ },

/***/ 55:
/***/ function(module, exports) {

	module.exports = require("../../core");

/***/ },

/***/ 187:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _constants = __webpack_require__(24);

	var _core = __webpack_require__(55);

	var _constants2 = __webpack_require__(5);

	var _defined = __webpack_require__(7);

	var _defined2 = _interopRequireDefault(_defined);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var LineChartMixin = {
	    renderSegments: function renderSegments() {
	        var options = this.options;
	        var seriesPoints = this.seriesPoints;

	        var series = options.series;
	        var seriesCount = seriesPoints.length;
	        var lastSegment = void 0;

	        this._segments = [];

	        for (var seriesIx = 0; seriesIx < seriesCount; seriesIx++) {
	            var currentSeries = series[seriesIx];
	            var sortedPoints = this.sortPoints(seriesPoints[seriesIx]);
	            var pointCount = sortedPoints.length;
	            var linePoints = [];

	            for (var pointIx = 0; pointIx < pointCount; pointIx++) {
	                var point = sortedPoints[pointIx];
	                if (point) {
	                    linePoints.push(point);
	                } else if (this.seriesMissingValues(currentSeries) !== _constants.INTERPOLATE) {
	                    if (linePoints.length > 1) {
	                        lastSegment = this.createSegment(linePoints, currentSeries, seriesIx, lastSegment);
	                        this._addSegment(lastSegment);
	                    }
	                    linePoints = [];
	                }
	            }

	            if (linePoints.length > 1) {
	                lastSegment = this.createSegment(linePoints, currentSeries, seriesIx, lastSegment);
	                this._addSegment(lastSegment);
	            }
	        }

	        this.children.unshift.apply(this.children, this._segments);
	    },
	    _addSegment: function _addSegment(segment) {
	        this._segments.push(segment);
	        segment.parent = this;
	    },
	    sortPoints: function sortPoints(points) {
	        return points;
	    },
	    seriesMissingValues: function seriesMissingValues(series) {
	        var missingValues = series.missingValues;
	        var assumeZero = !missingValues && this.options.isStacked;

	        return assumeZero ? _constants.ZERO : missingValues || _constants.INTERPOLATE;
	    },
	    getNearestPoint: function getNearestPoint(x, y, seriesIx) {
	        var target = new _core.Point(x, y);
	        var allPoints = this.seriesPoints[seriesIx];
	        var nearestPointDistance = _constants2.MAX_VALUE;
	        var nearestPoint = void 0;

	        for (var i = 0; i < allPoints.length; i++) {
	            var point = allPoints[i];

	            if (point && (0, _defined2.default)(point.value) && point.value !== null && point.visible !== false) {
	                var pointBox = point.box;
	                var pointDistance = pointBox.center().distanceTo(target);

	                if (pointDistance < nearestPointDistance) {
	                    nearestPoint = point;
	                    nearestPointDistance = pointDistance;
	                }
	            }
	        }

	        return nearestPoint;
	    }
	};

	exports.default = LineChartMixin;

/***/ }

/******/ });