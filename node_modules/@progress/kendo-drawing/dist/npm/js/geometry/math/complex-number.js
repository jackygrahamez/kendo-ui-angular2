module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(173);


/***/ },

/***/ 169:
/***/ function(module, exports) {

	module.exports = require("../constants");

/***/ },

/***/ 170:
/***/ function(module, exports) {

	module.exports = require("../../common/round");

/***/ },

/***/ 173:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _constants = __webpack_require__(169);

	var _round = __webpack_require__(170);

	var _round2 = _interopRequireDefault(_round);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var ComplexNumber = function () {
	    function ComplexNumber() {
	        var real = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];
	        var img = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];

	        _classCallCheck(this, ComplexNumber);

	        this.real = real;
	        this.img = img;
	    }

	    _createClass(ComplexNumber, [{
	        key: 'add',
	        value: function add(cNumber) {
	            return new ComplexNumber((0, _round2.default)(this.real + cNumber.real, _constants.PRECISION), (0, _round2.default)(this.img + cNumber.img, _constants.PRECISION));
	        }
	    }, {
	        key: 'addConstant',
	        value: function addConstant(value) {
	            return new ComplexNumber(this.real + value, this.img);
	        }
	    }, {
	        key: 'negate',
	        value: function negate() {
	            return new ComplexNumber(-this.real, -this.img);
	        }
	    }, {
	        key: 'multiply',
	        value: function multiply(cNumber) {
	            return new ComplexNumber(this.real * cNumber.real - this.img * cNumber.img, this.real * cNumber.img + this.img * cNumber.real);
	        }
	    }, {
	        key: 'multiplyConstant',
	        value: function multiplyConstant(value) {
	            return new ComplexNumber(this.real * value, this.img * value);
	        }
	    }, {
	        key: 'nthRoot',
	        value: function nthRoot(n) {
	            var rad = Math.atan2(this.img, this.real);
	            var r = Math.sqrt(Math.pow(this.img, 2) + Math.pow(this.real, 2));
	            var nthR = Math.pow(r, 1 / n);

	            return new ComplexNumber(nthR * Math.cos(rad / n), nthR * Math.sin(rad / n)); //Moivre's formula
	        }
	    }, {
	        key: 'equals',
	        value: function equals(cNumber) {
	            return this.real === cNumber.real && this.img === cNumber.img;
	        }
	    }, {
	        key: 'isReal',
	        value: function isReal() {
	            return this.img === 0;
	        }
	    }]);

	    return ComplexNumber;
	}();

	exports.default = ComplexNumber;

/***/ }

/******/ });