module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(89);


/***/ },

/***/ 5:
/***/ function(module, exports) {

	module.exports = require("../../common/constants");

/***/ },

/***/ 13:
/***/ function(module, exports) {

	module.exports = require("../../common/is-function");

/***/ },

/***/ 24:
/***/ function(module, exports) {

	module.exports = require("../constants");

/***/ },

/***/ 25:
/***/ function(module, exports) {

	module.exports = require("../../common/set-default-options");

/***/ },

/***/ 50:
/***/ function(module, exports) {

	module.exports = require("../../common/deep-extend");

/***/ },

/***/ 68:
/***/ function(module, exports) {

	module.exports = require("../../common/value-or-default");

/***/ },

/***/ 86:
/***/ function(module, exports) {

	module.exports = require("../../common/auto-format");

/***/ },

/***/ 89:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _scatterChart = __webpack_require__(90);

	var _scatterChart2 = _interopRequireDefault(_scatterChart);

	var _bubble = __webpack_require__(91);

	var _bubble2 = _interopRequireDefault(_bubble);

	var _constants = __webpack_require__(24);

	var _constants2 = __webpack_require__(5);

	var _setDefaultOptions = __webpack_require__(25);

	var _setDefaultOptions2 = _interopRequireDefault(_setDefaultOptions);

	var _valueOrDefault = __webpack_require__(68);

	var _valueOrDefault2 = _interopRequireDefault(_valueOrDefault);

	var _deepExtend = __webpack_require__(50);

	var _deepExtend2 = _interopRequireDefault(_deepExtend);

	var _isFunction = __webpack_require__(13);

	var _isFunction2 = _interopRequireDefault(_isFunction);

	var _autoFormat = __webpack_require__(86);

	var _autoFormat2 = _interopRequireDefault(_autoFormat);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var BubbleChart = function (_ScatterChart) {
	    _inherits(BubbleChart, _ScatterChart);

	    function BubbleChart() {
	        _classCallCheck(this, BubbleChart);

	        return _possibleConstructorReturn(this, (BubbleChart.__proto__ || Object.getPrototypeOf(BubbleChart)).apply(this, arguments));
	    }

	    _createClass(BubbleChart, [{
	        key: '_initFields',
	        value: function _initFields() {
	            this._maxSize = _constants2.MIN_VALUE;
	            _get(BubbleChart.prototype.__proto__ || Object.getPrototypeOf(BubbleChart.prototype), '_initFields', this).call(this);
	        }
	    }, {
	        key: 'addValue',
	        value: function addValue(value, fields) {
	            if (value.size !== null && (value.size > 0 || value.size < 0 && fields.series.negativeValues.visible)) {
	                this._maxSize = Math.max(this._maxSize, Math.abs(value.size));
	                _get(BubbleChart.prototype.__proto__ || Object.getPrototypeOf(BubbleChart.prototype), 'addValue', this).call(this, value, fields);
	            } else {
	                this.points.push(null);
	                this.seriesPoints[fields.seriesIx].push(null);
	            }
	        }
	    }, {
	        key: 'reflow',
	        value: function reflow(box) {
	            this.updateBubblesSize(box);
	            _get(BubbleChart.prototype.__proto__ || Object.getPrototypeOf(BubbleChart.prototype), 'reflow', this).call(this, box);
	        }
	    }, {
	        key: 'pointType',
	        value: function pointType() {
	            return _bubble2.default;
	        }
	    }, {
	        key: 'createPoint',
	        value: function createPoint(value, fields) {
	            var series = fields.series;
	            var pointsCount = series.data.length;
	            var delay = fields.pointIx * (_constants.INITIAL_ANIMATION_DURATION / pointsCount);
	            var animationOptions = {
	                delay: delay,
	                duration: _constants.INITIAL_ANIMATION_DURATION - delay,
	                type: _constants.BUBBLE
	            };

	            var color = fields.color || series.color;
	            if (value.size < 0 && series.negativeValues.visible) {
	                color = (0, _valueOrDefault2.default)(series.negativeValues.color, color);
	            }

	            var pointOptions = (0, _deepExtend2.default)({
	                labels: {
	                    animation: {
	                        delay: delay,
	                        duration: _constants.INITIAL_ANIMATION_DURATION - delay
	                    }
	                }
	            }, this.pointOptions(series, fields.seriesIx), {
	                markers: {
	                    type: _constants2.CIRCLE,
	                    border: series.border,
	                    opacity: series.opacity,
	                    animation: animationOptions
	                }
	            });

	            pointOptions = this.evalPointOptions(pointOptions, value, fields);
	            if ((0, _isFunction2.default)(series.color)) {
	                color = pointOptions.color;
	            }

	            pointOptions.markers.background = color;

	            var point = new _bubble2.default(value, pointOptions);
	            point.color = color;

	            this.append(point);

	            return point;
	        }
	    }, {
	        key: 'updateBubblesSize',
	        value: function updateBubblesSize(box) {
	            var series = this.options.series;

	            var boxSize = Math.min(box.width(), box.height());

	            for (var seriesIx = 0; seriesIx < series.length; seriesIx++) {
	                var currentSeries = series[seriesIx];
	                var seriesPoints = this.seriesPoints[seriesIx];
	                var minSize = currentSeries.minSize || Math.max(boxSize * 0.02, 10);
	                var maxSize = currentSeries.maxSize || boxSize * 0.2;
	                var minR = minSize / 2;
	                var maxR = maxSize / 2;
	                var minArea = Math.PI * minR * minR;
	                var maxArea = Math.PI * maxR * maxR;
	                var areaRange = maxArea - minArea;
	                var areaRatio = areaRange / this._maxSize;

	                for (var pointIx = 0; pointIx < seriesPoints.length; pointIx++) {
	                    var point = seriesPoints[pointIx];
	                    if (point) {
	                        var area = Math.abs(point.value.size) * areaRatio;
	                        var radius = Math.sqrt((minArea + area) / Math.PI);
	                        var baseZIndex = (0, _valueOrDefault2.default)(point.options.zIndex, 0);
	                        var zIndex = baseZIndex + (1 - radius / maxR);

	                        (0, _deepExtend2.default)(point.options, {
	                            zIndex: zIndex,
	                            markers: {
	                                size: radius * 2,
	                                zIndex: zIndex
	                            },
	                            labels: {
	                                zIndex: zIndex + 1
	                            }
	                        });
	                    }
	                }
	            }
	        }
	    }, {
	        key: 'formatPointValue',
	        value: function formatPointValue(point, format) {
	            var value = point.value;
	            return (0, _autoFormat2.default)(format, value.x, value.y, value.size, point.category);
	        }
	    }, {
	        key: 'createAnimation',
	        value: function createAnimation() {}
	    }, {
	        key: 'createVisual',
	        value: function createVisual() {}
	    }]);

	    return BubbleChart;
	}(_scatterChart2.default);

	(0, _setDefaultOptions2.default)(BubbleChart.prototype, {
	    tooltip: {
	        format: "{3}"
	    },
	    labels: {
	        format: "{3}"
	    }
	});

	exports.default = BubbleChart;

/***/ },

/***/ 90:
/***/ function(module, exports) {

	module.exports = require("../scatter-charts/scatter-chart");

/***/ },

/***/ 91:
/***/ function(module, exports) {

	module.exports = require("./bubble");

/***/ }

/******/ });