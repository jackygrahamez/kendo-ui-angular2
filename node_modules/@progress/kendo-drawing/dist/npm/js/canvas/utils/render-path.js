module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(93);


/***/ },

/***/ 93:
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = renderPath;
	function renderPath(ctx, path) {
	    var segments = path.segments;

	    if (segments.length === 0) {
	        return;
	    }

	    var segment = segments[0];
	    var anchor = segment.anchor();
	    ctx.moveTo(anchor.x, anchor.y);

	    for (var i = 1; i < segments.length; i++) {
	        segment = segments[i];
	        anchor = segment.anchor();

	        var prevSeg = segments[i - 1];
	        var prevOut = prevSeg.controlOut();
	        var controlIn = segment.controlIn();

	        if (prevOut && controlIn) {
	            ctx.bezierCurveTo(prevOut.x, prevOut.y, controlIn.x, controlIn.y, anchor.x, anchor.y);
	        } else {
	            ctx.lineTo(anchor.x, anchor.y);
	        }
	    }

	    if (path.options.closed) {
	        ctx.closePath();
	    }
	}

/***/ }

/******/ });