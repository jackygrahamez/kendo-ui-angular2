import 'core-js/es6';
import { $ } from 'e2e-utils';
import { equal, ok } from '../test/test-helpers';
import { TextMetrics, measureText, LRUCache } from '../src/text-metrics';

describe("Text Metrics", () => {
    let metrics;

    function measure(text, style, box) {
        return metrics.measure(text, style, box);
    }

    beforeEach(() => {
        metrics = new TextMetrics();
    });

    it("width varies on text length", () => {
        ok(measure("Foo").width > measure("Fo").width);
    });

    it("empty text measures as 0", () => {
        equal(measure("").width, 0);
    });

    it("width varies with font size", () => {
        ok(measure("Foo", { font: "12px Arial" }).width >
           measure("Foo", { font: "10px Arial" }).width);
    });

    it("height varies with font size", () => {
        ok(measure("Foo", { font: "12px Arial" }).height >
           measure("Foo", { font: "10px Arial" }).height);
    });

    it("height doesn't vary on text length", () => {
        equal(measure("Foo").height, measure("Foooo").height);
    });

    it("baseline varies with font size", () => {
        ok(measure("Foo", { font: "12px Arial" }).baseline >
           measure("Foo", { font: "10px Arial" }).baseline);
    });

    it("baseline doesn't vary on text length", () => {
        equal(measure("Foo").baseline, measure("Foooo").baseline);
    });

    it("measureText alias is exported", () => {
        ok(measureText("Foo"));
    });

    let measureBox = $('<div style="position: absolute !important; top: -4000px !important; height: auto !important;' +
                        'padding: 0 !important; margin: 0 !important; border: 0 !important;' +
                        'line-height: normal !important; visibility: hidden !important;' +
                        'white-space: normal !important; word-break: break-all !important;" />'
                     )[0];

    it("height varies with element styles (width, text-wrap, word-break)", () => {
        ok(measure("FooBarBazFooBarBaz", { width: "20px" }, measureBox).height>
           measure("FooBarBazFooBarBaz", { width: "80px" }, measureBox).height);
    });
});

describe("Text Metrics / LRUCache", () => {
    let lru;

    beforeEach(() => {
        lru = new LRUCache(4);
        lru.put("a", 1);
        lru.put("b", 2);
        lru.put("c", 3);
    });

    it("put sets head", () => {
        equal(lru._head.value, 1);
    });

    it("put sets tail", () => {
        equal(lru._tail.value, 3);
    });

    it("put sets newer ref", () => {
        equal(lru._head.newer.value, 2);
    });

    it("put sets older ref", () => {
        equal(lru._tail.older.value, 2);
    });

    it("put does not clean last element if within size", () => {
        lru.put("d", 4);
        equal(lru._head.value, 1);
    });

    it("put cleans last element if exceeding size", () => {
        lru.put("d", 4);
        lru.put("e", 5);
        equal(lru._head.value, 2);
        equal(lru._head.older, null);
        equal(lru._map["a"], null);
    });

    it("get retrieves value by key", () => {
        equal(lru.get("a"), 1);
    });

    it("get retrieves single value", () => {
        lru = new LRUCache(1);
        lru.put("a", 1);
        equal(lru.get("a"), 1);
    });

    it("get moves head to tail", () => {
        equal(lru.get("a"), 1);
        equal(lru._tail.value, 1);
    });

    it("get patches head reference", () => {
        equal(lru.get("a"), 1);
        equal(lru._head.value, 2);
        equal(lru._head.older, null);
    });

    it("get moves middle to tail", () => {
        equal(lru.get("b"), 2);
        equal(lru._tail.value, 2);
    });

    it("get patches middle references", () => {
        equal(lru.get("b"), 2);
        equal(lru._head.newer.older, lru._head);
    });

    it("get keeps tail in place", () => {
        equal(lru.get("c"), 3);
        equal(lru._tail.value, 3);
    });

});
