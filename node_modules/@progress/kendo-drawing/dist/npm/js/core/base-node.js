module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(117);


/***/ },

/***/ 117:
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var BaseNode = function () {
	    function BaseNode(srcElement) {
	        _classCallCheck(this, BaseNode);

	        this.childNodes = [];
	        this.parent = null;

	        if (srcElement) {
	            this.srcElement = srcElement;
	            this.observe();
	        }
	    }

	    _createClass(BaseNode, [{
	        key: "destroy",
	        value: function destroy() {
	            if (this.srcElement) {
	                this.srcElement.removeObserver(this);
	            }

	            var children = this.childNodes;
	            for (var i = 0; i < children.length; i++) {
	                this.childNodes[i].destroy();
	            }

	            this.parent = null;
	        }
	    }, {
	        key: "load",
	        value: function load() {}
	    }, {
	        key: "observe",
	        value: function observe() {
	            if (this.srcElement) {
	                this.srcElement.addObserver(this);
	            }
	        }
	    }, {
	        key: "append",
	        value: function append(node) {
	            this.childNodes.push(node);
	            node.parent = this;
	        }
	    }, {
	        key: "insertAt",
	        value: function insertAt(node, pos) {
	            this.childNodes.splice(pos, 0, node);
	            node.parent = this;
	        }
	    }, {
	        key: "remove",
	        value: function remove(index, count) {
	            var end = index + count;
	            for (var i = index; i < end; i++) {
	                this.childNodes[i].removeSelf();
	            }
	            this.childNodes.splice(index, count);
	        }
	    }, {
	        key: "removeSelf",
	        value: function removeSelf() {
	            this.clear();
	            this.destroy();
	        }
	    }, {
	        key: "clear",
	        value: function clear() {
	            this.remove(0, this.childNodes.length);
	        }
	    }, {
	        key: "invalidate",
	        value: function invalidate() {
	            if (this.parent) {
	                this.parent.invalidate();
	            }
	        }
	    }, {
	        key: "geometryChange",
	        value: function geometryChange() {
	            this.invalidate();
	        }
	    }, {
	        key: "optionsChange",
	        value: function optionsChange() {
	            this.invalidate();
	        }
	    }, {
	        key: "childrenChange",
	        value: function childrenChange(e) {
	            if (e.action === "add") {
	                this.load(e.items, e.index);
	            } else if (e.action === "remove") {
	                this.remove(e.index, e.items.length);
	            }

	            this.invalidate();
	        }
	    }]);

	    return BaseNode;
	}();

	exports.default = BaseNode;

/***/ }

/******/ });