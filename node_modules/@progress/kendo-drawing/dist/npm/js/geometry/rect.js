module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(195);


/***/ },

/***/ 104:
/***/ function(module, exports) {

	module.exports = require("../mixins/observers-mixin");

/***/ },

/***/ 160:
/***/ function(module, exports) {

	module.exports = require("./point");

/***/ },

/***/ 195:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _observersMixin = __webpack_require__(104);

	var _observersMixin2 = _interopRequireDefault(_observersMixin);

	var _point = __webpack_require__(160);

	var _point2 = _interopRequireDefault(_point);

	var _size = __webpack_require__(196);

	var _size2 = _interopRequireDefault(_size);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Rect = function () {
	    function Rect() {
	        var origin = arguments.length <= 0 || arguments[0] === undefined ? new _point2.default() : arguments[0];
	        var size = arguments.length <= 1 || arguments[1] === undefined ? new _size2.default() : arguments[1];

	        _classCallCheck(this, Rect);

	        this.setOrigin(origin);
	        this.setSize(size);
	    }

	    _createClass(Rect, [{
	        key: 'clone',
	        value: function clone() {
	            return new Rect(this.origin.clone(), this.size.clone());
	        }
	    }, {
	        key: 'equals',
	        value: function equals(other) {
	            return other && other.origin.equals(this.origin) && other.size.equals(this.size);
	        }
	    }, {
	        key: 'setOrigin',
	        value: function setOrigin(value) {
	            this._observerField("origin", _point2.default.create(value));
	            this.geometryChange();
	            return this;
	        }
	    }, {
	        key: 'getOrigin',
	        value: function getOrigin() {
	            return this.origin;
	        }
	    }, {
	        key: 'setSize',
	        value: function setSize(value) {
	            this._observerField("size", _size2.default.create(value));
	            this.geometryChange();
	            return this;
	        }
	    }, {
	        key: 'getSize',
	        value: function getSize() {
	            return this.size;
	        }
	    }, {
	        key: 'width',
	        value: function width() {
	            return this.size.width;
	        }
	    }, {
	        key: 'height',
	        value: function height() {
	            return this.size.height;
	        }
	    }, {
	        key: 'topLeft',
	        value: function topLeft() {
	            return this.origin.clone();
	        }
	    }, {
	        key: 'bottomRight',
	        value: function bottomRight() {
	            return this.origin.clone().translate(this.width(), this.height());
	        }
	    }, {
	        key: 'topRight',
	        value: function topRight() {
	            return this.origin.clone().translate(this.width(), 0);
	        }
	    }, {
	        key: 'bottomLeft',
	        value: function bottomLeft() {
	            return this.origin.clone().translate(0, this.height());
	        }
	    }, {
	        key: 'center',
	        value: function center() {
	            return this.origin.clone().translate(this.width() / 2, this.height() / 2);
	        }
	    }, {
	        key: 'bbox',
	        value: function bbox(matrix) {
	            var tl = this.topLeft().transformCopy(matrix);
	            var tr = this.topRight().transformCopy(matrix);
	            var br = this.bottomRight().transformCopy(matrix);
	            var bl = this.bottomLeft().transformCopy(matrix);

	            return Rect.fromPoints(tl, tr, br, bl);
	        }
	    }, {
	        key: 'transformCopy',
	        value: function transformCopy(m) {
	            return Rect.fromPoints(this.topLeft().transform(m), this.bottomRight().transform(m));
	        }
	    }, {
	        key: 'expand',
	        value: function expand(x) {
	            var y = arguments.length <= 1 || arguments[1] === undefined ? x : arguments[1];


	            this.size.width += 2 * x;
	            this.size.height += 2 * y;

	            this.origin.translate(-x, -y);

	            return this;
	        }
	    }, {
	        key: 'expandCopy',
	        value: function expandCopy(x, y) {
	            return this.clone().expand(x, y);
	        }
	    }, {
	        key: 'containsPoint',
	        value: function containsPoint(point) {
	            var origin = this.origin;
	            var bottomRight = this.bottomRight();
	            return !(point.x < origin.x || point.y < origin.y || bottomRight.x < point.x || bottomRight.y < point.y);
	        }
	    }, {
	        key: '_isOnPath',
	        value: function _isOnPath(point, width) {
	            var rectOuter = this.expandCopy(width, width);
	            var rectInner = this.expandCopy(-width, -width);

	            return rectOuter.containsPoint(point) && !rectInner.containsPoint(point);
	        }
	    }], [{
	        key: 'fromPoints',
	        value: function fromPoints() {
	            var topLeft = _point2.default.min.apply(null, arguments);
	            var bottomRight = _point2.default.max.apply(null, arguments);
	            var size = new _size2.default(bottomRight.x - topLeft.x, bottomRight.y - topLeft.y);

	            return new Rect(topLeft, size);
	        }
	    }, {
	        key: 'union',
	        value: function union(a, b) {
	            return Rect.fromPoints(_point2.default.min(a.topLeft(), b.topLeft()), _point2.default.max(a.bottomRight(), b.bottomRight()));
	        }
	    }, {
	        key: 'intersect',
	        value: function intersect(a, b) {
	            var rect1 = {
	                left: a.topLeft().x,
	                top: a.topLeft().y,
	                right: a.bottomRight().x,
	                bottom: a.bottomRight().y
	            };

	            var rect2 = {
	                left: b.topLeft().x,
	                top: b.topLeft().y,
	                right: b.bottomRight().x,
	                bottom: b.bottomRight().y
	            };

	            if (rect1.left <= rect2.right && rect2.left <= rect1.right && rect1.top <= rect2.bottom && rect2.top <= rect1.bottom) {
	                return Rect.fromPoints(new _point2.default(Math.max(rect1.left, rect2.left), Math.max(rect1.top, rect2.top)), new _point2.default(Math.min(rect1.right, rect2.right), Math.min(rect1.bottom, rect2.bottom)));
	            }
	        }
	    }]);

	    return Rect;
	}();

	_observersMixin2.default.extend(Rect.prototype);

	exports.default = Rect;

/***/ },

/***/ 196:
/***/ function(module, exports) {

	module.exports = require("./size");

/***/ }

/******/ });