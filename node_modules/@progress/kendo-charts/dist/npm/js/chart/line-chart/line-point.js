module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(181);


/***/ },

/***/ 5:
/***/ function(module, exports) {

	module.exports = require("../../common/constants");

/***/ },

/***/ 7:
/***/ function(module, exports) {

	module.exports = require("../../common/defined");

/***/ },

/***/ 23:
/***/ function(module, exports) {

	module.exports = require("@progress/kendo-drawing");

/***/ },

/***/ 24:
/***/ function(module, exports) {

	module.exports = require("../constants");

/***/ },

/***/ 50:
/***/ function(module, exports) {

	module.exports = require("../../common/deep-extend");

/***/ },

/***/ 55:
/***/ function(module, exports) {

	module.exports = require("../../core");

/***/ },

/***/ 63:
/***/ function(module, exports) {

	module.exports = require("../utils/color");

/***/ },

/***/ 65:
/***/ function(module, exports) {

	module.exports = require("../mixins/point-events-mixin");

/***/ },

/***/ 66:
/***/ function(module, exports) {

	module.exports = require("../mixins/note-mixin");

/***/ },

/***/ 68:
/***/ function(module, exports) {

	module.exports = require("../../common/value-or-default");

/***/ },

/***/ 69:
/***/ function(module, exports) {

	module.exports = require("../../common/template");

/***/ },

/***/ 77:
/***/ function(module, exports) {

	module.exports = require("../../common/get-spacing");

/***/ },

/***/ 181:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _kendoDrawing = __webpack_require__(23);

	var _core = __webpack_require__(55);

	var _pointEventsMixin = __webpack_require__(65);

	var _pointEventsMixin2 = _interopRequireDefault(_pointEventsMixin);

	var _noteMixin = __webpack_require__(66);

	var _noteMixin2 = _interopRequireDefault(_noteMixin);

	var _constants = __webpack_require__(24);

	var _color = __webpack_require__(63);

	var _color2 = _interopRequireDefault(_color);

	var _constants2 = __webpack_require__(5);

	var _valueOrDefault = __webpack_require__(68);

	var _valueOrDefault2 = _interopRequireDefault(_valueOrDefault);

	var _deepExtend = __webpack_require__(50);

	var _deepExtend2 = _interopRequireDefault(_deepExtend);

	var _template = __webpack_require__(69);

	var _template2 = _interopRequireDefault(_template);

	var _defined = __webpack_require__(7);

	var _defined2 = _interopRequireDefault(_defined);

	var _getSpacing = __webpack_require__(77);

	var _getSpacing2 = _interopRequireDefault(_getSpacing);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var ABOVE = "above";
	var BELOW = "below";

	var LinePoint = function (_ChartElement) {
	    _inherits(LinePoint, _ChartElement);

	    function LinePoint(value, options) {
	        _classCallCheck(this, LinePoint);

	        var _this = _possibleConstructorReturn(this, (LinePoint.__proto__ || Object.getPrototypeOf(LinePoint)).call(this));

	        _this.value = value;
	        _this.options = options;
	        _this.aboveAxis = (0, _valueOrDefault2.default)(_this.options.aboveAxis, true);
	        _this.tooltipTracking = true;
	        return _this;
	    }

	    _createClass(LinePoint, [{
	        key: 'render',
	        value: function render() {
	            var _options = this.options;
	            var markers = _options.markers;
	            var labels = _options.labels;


	            if (this._rendered) {
	                return;
	            }

	            this._rendered = true;

	            if (markers.visible && markers.size) {
	                this.marker = this.createMarker();
	                this.append(this.marker);
	            }

	            if (labels.visible) {
	                var labelText = this.value;
	                if (labels.template) {
	                    var labelTemplate = (0, _template2.default)(labels.template);
	                    labelText = labelTemplate({
	                        dataItem: this.dataItem,
	                        category: this.category,
	                        value: this.value,
	                        percentage: this.percentage,
	                        stackValue: this.stackValue,
	                        series: this.series
	                    });
	                } else if (labels.format) {
	                    labelText = this.formatValue(labels.format);
	                }
	                this.label = new _core.TextBox(labelText, (0, _deepExtend2.default)({
	                    align: _constants2.CENTER,
	                    vAlign: _constants2.CENTER,
	                    margin: {
	                        left: 5,
	                        right: 5
	                    },
	                    zIndex: (0, _valueOrDefault2.default)(labels.zIndex, this.series.zIndex)
	                }, labels));
	                this.append(this.label);
	            }

	            this.createNote();

	            if (this.errorBar) {
	                this.append(this.errorBar);
	            }
	        }
	    }, {
	        key: 'markerBorder',
	        value: function markerBorder() {
	            var options = this.options.markers;
	            var background = options.background;
	            var border = (0, _deepExtend2.default)({ color: this.color }, options.border);

	            if (!(0, _defined2.default)(border.color)) {
	                border.color = new _color2.default(background).brightness(_constants.BORDER_BRIGHTNESS).toHex();
	            }

	            return border;
	        }
	    }, {
	        key: 'createVisual',
	        value: function createVisual() {}
	    }, {
	        key: 'createMarker',
	        value: function createMarker() {
	            var options = this.options.markers;
	            var marker = new _core.ShapeElement({
	                type: options.type,
	                width: options.size,
	                height: options.size,
	                rotation: options.rotation,
	                background: options.background,
	                border: this.markerBorder(),
	                opacity: options.opacity,
	                zIndex: (0, _valueOrDefault2.default)(options.zIndex, this.series.zIndex),
	                animation: options.animation,
	                visual: options.visual
	            }, {
	                dataItem: this.dataItem,
	                value: this.value,
	                series: this.series,
	                category: this.category
	            });

	            return marker;
	        }
	    }, {
	        key: 'markerBox',
	        value: function markerBox() {
	            if (!this.marker) {
	                this.marker = this.createMarker();
	                this.marker.reflow(this._childBox);
	            }

	            return this.marker.box;
	        }
	    }, {
	        key: 'reflow',
	        value: function reflow(targetBox) {
	            var options = this.options;
	            var aboveAxis = this.aboveAxis;

	            var vertical = options.vertical;

	            this.render();

	            this.box = targetBox;
	            var childBox = targetBox.clone();

	            if (vertical) {
	                if (aboveAxis) {
	                    childBox.y1 -= childBox.height();
	                } else {
	                    childBox.y2 += childBox.height();
	                }
	            } else {
	                if (aboveAxis) {
	                    childBox.x1 += childBox.width();
	                } else {
	                    childBox.x2 -= childBox.width();
	                }
	            }

	            this._childBox = childBox;
	            if (this.marker) {
	                this.marker.reflow(childBox);
	            }

	            this.reflowLabel(childBox);

	            if (this.errorBars) {
	                for (var i = 0; i < this.errorBars.length; i++) {
	                    this.errorBars[i].reflow(childBox);
	                }
	            }

	            if (this.note) {
	                var noteTargetBox = this.markerBox();

	                if (!(options.markers.visible && options.markers.size)) {
	                    var center = noteTargetBox.center();
	                    noteTargetBox = new _core.Box(center.x, center.y, center.x, center.y);
	                }

	                this.note.reflow(noteTargetBox);
	            }
	        }
	    }, {
	        key: 'reflowLabel',
	        value: function reflowLabel(box) {
	            var options = this.options;
	            var label = this.label;

	            var anchor = options.labels.position;

	            if (label) {
	                anchor = anchor === ABOVE ? _constants2.TOP : anchor;
	                anchor = anchor === BELOW ? _constants2.BOTTOM : anchor;

	                label.reflow(box);
	                label.box.alignTo(this.markerBox(), anchor);
	                label.reflow(label.box);
	            }
	        }
	    }, {
	        key: 'createHighlight',
	        value: function createHighlight() {
	            var markers = this.options.highlight.markers;
	            var defaultColor = this.markerBorder().color;
	            var options = this.options.markers;

	            var shadow = new _core.ShapeElement({
	                type: options.type,
	                width: options.size,
	                height: options.size,
	                rotation: options.rotation,
	                background: markers.color || defaultColor,
	                border: {
	                    color: markers.border.color,
	                    width: markers.border.width,
	                    opacity: (0, _valueOrDefault2.default)(markers.border.opacity, 1)
	                },
	                opacity: (0, _valueOrDefault2.default)(markers.opacity, 1)
	            });
	            shadow.reflow(this._childBox);

	            return shadow.getElement();
	        }
	    }, {
	        key: 'highlightVisual',
	        value: function highlightVisual() {
	            return (this.marker || {}).visual;
	        }
	    }, {
	        key: 'highlightVisualArgs',
	        value: function highlightVisualArgs() {
	            var marker = this.marker;
	            var visual = void 0,
	                rect = void 0;

	            if (marker) {
	                rect = marker.paddingBox.toRect();
	                visual = marker.visual;
	            } else {
	                var size = this.options.markers.size;
	                var halfSize = size / 2;
	                var center = this.box.center();
	                rect = new _kendoDrawing.geometry.Rect([center.x - halfSize, center.y - halfSize], [size, size]);
	            }

	            return {
	                options: this.options,
	                rect: rect,
	                visual: visual
	            };
	        }
	    }, {
	        key: 'tooltipAnchor',
	        value: function tooltipAnchor() {
	            var markerBox = this.markerBox();
	            var clipBox = this.owner.pane.clipBox();
	            var showTooltip = !clipBox || clipBox.overlaps(markerBox);

	            if (showTooltip) {
	                var x = markerBox.x2 + _constants.TOOLTIP_OFFSET;
	                var horizontalAlign = _constants2.LEFT;
	                var y = void 0,
	                    verticalAlign = void 0;

	                if (this.aboveAxis) {
	                    y = markerBox.y1;
	                    verticalAlign = _constants2.BOTTOM;
	                } else {
	                    y = markerBox.y2;
	                    verticalAlign = _constants2.TOP;
	                }

	                return {
	                    point: new _core.Point(x, y),
	                    align: {
	                        horizontal: horizontalAlign,
	                        vertical: verticalAlign
	                    }
	                };
	            }
	        }
	    }, {
	        key: 'formatValue',
	        value: function formatValue(format) {
	            return this.owner.formatPointValue(this, format);
	        }
	    }, {
	        key: 'overlapsBox',
	        value: function overlapsBox(box) {
	            var markerBox = this.markerBox();
	            return markerBox.overlaps(box);
	        }
	    }]);

	    return LinePoint;
	}(_core.ChartElement);

	LinePoint.prototype.defaults = {
	    vertical: true,
	    markers: {
	        visible: true,
	        background: _constants2.WHITE,
	        size: _constants.LINE_MARKER_SIZE,
	        type: _constants2.CIRCLE,
	        border: {
	            width: 2
	        },
	        opacity: 1
	    },
	    labels: {
	        visible: false,
	        position: ABOVE,
	        margin: (0, _getSpacing2.default)(3),
	        padding: (0, _getSpacing2.default)(4),
	        animation: {
	            type: _constants.FADEIN,
	            delay: _constants.INITIAL_ANIMATION_DURATION
	        }
	    },
	    notes: {
	        label: {}
	    },
	    highlight: {
	        markers: {
	            border: {}
	        }
	    }
	};

	(0, _deepExtend2.default)(LinePoint.prototype, _pointEventsMixin2.default);
	(0, _deepExtend2.default)(LinePoint.prototype, _noteMixin2.default);

	exports.default = LinePoint;

/***/ }

/******/ });