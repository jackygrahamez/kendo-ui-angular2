module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(192);


/***/ },

/***/ 3:
/***/ function(module, exports) {

	module.exports = require("../common/defined");

/***/ },

/***/ 104:
/***/ function(module, exports) {

	module.exports = require("../mixins/observers-mixin");

/***/ },

/***/ 152:
/***/ function(module, exports) {

	module.exports = require("../accessors/define-accessors");

/***/ },

/***/ 153:
/***/ function(module, exports) {

	module.exports = require("../common/round");

/***/ },

/***/ 159:
/***/ function(module, exports) {

	module.exports = require("./constants");

/***/ },

/***/ 192:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _defineAccessors = __webpack_require__(152);

	var _defineAccessors2 = _interopRequireDefault(_defineAccessors);

	var _observersMixin = __webpack_require__(104);

	var _observersMixin2 = _interopRequireDefault(_observersMixin);

	var _constants = __webpack_require__(159);

	var _toMatrix = __webpack_require__(193);

	var _toMatrix2 = _interopRequireDefault(_toMatrix);

	var _defined = __webpack_require__(3);

	var _defined2 = _interopRequireDefault(_defined);

	var _round2 = __webpack_require__(153);

	var _round3 = _interopRequireDefault(_round2);

	var _matrix = __webpack_require__(194);

	var _matrix2 = _interopRequireDefault(_matrix);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Point = function () {
	    function Point() {
	        var x = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];
	        var y = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];

	        _classCallCheck(this, Point);

	        this.x = x;
	        this.y = y;
	    }

	    _createClass(Point, [{
	        key: 'equals',
	        value: function equals(other) {
	            return other && other.x === this.x && other.y === this.y;
	        }
	    }, {
	        key: 'clone',
	        value: function clone() {
	            return new Point(this.x, this.y);
	        }
	    }, {
	        key: 'rotate',
	        value: function rotate(angle, origin) {
	            var originPoint = Point.create(origin) || Point.ZERO;

	            return this.transform(_matrix2.default.rotate(angle, originPoint.x, originPoint.y));
	        }
	    }, {
	        key: 'translate',
	        value: function translate(x, y) {
	            this.x += x;
	            this.y += y;

	            this.geometryChange();

	            return this;
	        }
	    }, {
	        key: 'translateWith',
	        value: function translateWith(point) {
	            return this.translate(point.x, point.y);
	        }
	    }, {
	        key: 'move',
	        value: function move(x, y) {
	            this.x = this.y = 0;
	            return this.translate(x, y);
	        }
	    }, {
	        key: 'scale',
	        value: function scale(scaleX) {
	            var scaleY = arguments.length <= 1 || arguments[1] === undefined ? scaleX : arguments[1];

	            this.x *= scaleX;
	            this.y *= scaleY;

	            this.geometryChange();

	            return this;
	        }
	    }, {
	        key: 'scaleCopy',
	        value: function scaleCopy(scaleX, scaleY) {
	            return this.clone().scale(scaleX, scaleY);
	        }
	    }, {
	        key: 'transform',
	        value: function transform(transformation) {
	            var matrix = (0, _toMatrix2.default)(transformation);
	            var x = this.x;
	            var y = this.y;


	            this.x = matrix.a * x + matrix.c * y + matrix.e;
	            this.y = matrix.b * x + matrix.d * y + matrix.f;

	            this.geometryChange();

	            return this;
	        }
	    }, {
	        key: 'transformCopy',
	        value: function transformCopy(transformation) {
	            var point = this.clone();

	            if (transformation) {
	                point.transform(transformation);
	            }

	            return point;
	        }
	    }, {
	        key: 'distanceTo',
	        value: function distanceTo(point) {
	            var dx = this.x - point.x;
	            var dy = this.y - point.y;

	            return Math.sqrt(dx * dx + dy * dy);
	        }
	    }, {
	        key: 'round',
	        value: function round(digits) {
	            this.x = (0, _round3.default)(this.x, digits);
	            this.y = (0, _round3.default)(this.y, digits);

	            this.geometryChange();

	            return this;
	        }
	    }, {
	        key: 'toArray',
	        value: function toArray(digits) {
	            var doRound = (0, _defined2.default)(digits);
	            var x = doRound ? (0, _round3.default)(this.x, digits) : this.x;
	            var y = doRound ? (0, _round3.default)(this.y, digits) : this.y;

	            return [x, y];
	        }
	    }, {
	        key: 'toString',
	        value: function toString(digits) {
	            var separator = arguments.length <= 1 || arguments[1] === undefined ? " " : arguments[1];
	            var x = this.x;
	            var y = this.y;


	            if ((0, _defined2.default)(digits)) {
	                x = (0, _round3.default)(x, digits);
	                y = (0, _round3.default)(y, digits);
	            }

	            return x + separator + y;
	        }
	    }], [{
	        key: 'create',
	        value: function create(arg0, arg1) {
	            if ((0, _defined2.default)(arg0)) {
	                if (arg0 instanceof Point) {
	                    return arg0;
	                } else if (arguments.length === 1 && arg0.length === 2) {
	                    return new Point(arg0[0], arg0[1]);
	                }

	                return new Point(arg0, arg1);
	            }
	        }
	    }, {
	        key: 'min',
	        value: function min() {
	            var minX = _constants.MAX_NUM;
	            var minY = _constants.MAX_NUM;

	            for (var i = 0; i < arguments.length; i++) {
	                var point = arguments[i];
	                minX = Math.min(point.x, minX);
	                minY = Math.min(point.y, minY);
	            }

	            return new Point(minX, minY);
	        }
	    }, {
	        key: 'max',
	        value: function max() {
	            var maxX = _constants.MIN_NUM;
	            var maxY = _constants.MIN_NUM;

	            for (var i = 0; i < arguments.length; i++) {
	                var point = arguments[i];
	                maxX = Math.max(point.x, maxX);
	                maxY = Math.max(point.y, maxY);
	            }

	            return new Point(maxX, maxY);
	        }
	    }, {
	        key: 'minPoint',
	        value: function minPoint() {
	            return new Point(_constants.MIN_NUM, _constants.MIN_NUM);
	        }
	    }, {
	        key: 'maxPoint',
	        value: function maxPoint() {
	            return new Point(_constants.MAX_NUM, _constants.MAX_NUM);
	        }
	    }, {
	        key: 'ZERO',
	        get: function get() {
	            return new Point(0, 0);
	        }
	    }]);

	    return Point;
	}();

	(0, _defineAccessors2.default)(Point.prototype, ["x", "y"]);
	_observersMixin2.default.extend(Point.prototype);

	exports.default = Point;

/***/ },

/***/ 193:
/***/ function(module, exports) {

	module.exports = require("../common/to-matrix");

/***/ },

/***/ 194:
/***/ function(module, exports) {

	module.exports = require("./matrix");

/***/ }

/******/ });