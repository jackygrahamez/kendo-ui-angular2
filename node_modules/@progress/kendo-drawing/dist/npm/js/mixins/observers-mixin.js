module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(233);


/***/ },

/***/ 233:
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var ObserversMixin = {
	    extend: function extend(proto) {
	        for (var method in this) {
	            if (method !== "extend") {
	                proto[method] = this[method];
	            }
	        }
	    },

	    observers: function observers() {
	        this._observers = this._observers || [];
	        return this._observers;
	    },

	    addObserver: function addObserver(element) {
	        if (!this._observers) {
	            this._observers = [element];
	        } else {
	            this._observers.push(element);
	        }
	        return this;
	    },

	    removeObserver: function removeObserver(element) {
	        var observers = this.observers();
	        var index = observers.indexOf(element);
	        if (index !== -1) {
	            observers.splice(index, 1);
	        }
	        return this;
	    },

	    trigger: function trigger(methodName, event) {
	        var observers = this._observers;

	        if (observers && !this._suspended) {
	            for (var idx = 0; idx < observers.length; idx++) {
	                var observer = observers[idx];
	                if (observer[methodName]) {
	                    observer[methodName](event);
	                }
	            }
	        }
	        return this;
	    },

	    optionsChange: function optionsChange() {
	        var e = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	        e.element = this;
	        this.trigger("optionsChange", e);
	    },

	    geometryChange: function geometryChange() {
	        this.trigger("geometryChange", {
	            element: this
	        });
	    },

	    suspend: function suspend() {
	        this._suspended = (this._suspended || 0) + 1;
	        return this;
	    },

	    resume: function resume() {
	        this._suspended = Math.max((this._suspended || 0) - 1, 0);
	        return this;
	    },

	    _observerField: function _observerField(field, value) {
	        if (this[field]) {
	            this[field].removeObserver(this);
	        }
	        this[field] = value;
	        value.addObserver(this);
	    }
	};

	exports.default = ObserversMixin;

/***/ }

/******/ });