{"version":3,"sources":["webpack:///webpack/bootstrap ad3edd743ed361bd0e56?6e3f*******************************************************************************","webpack:///external \"@angular/core\"?73d1******************************************************************","webpack:///external \"../common/collection-item.component\"?2549*","webpack:///./src/chart/series-item.component.generated.ts"],"names":[],"mappings":"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","file":"src/chart/series-item.component.generated.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap ad3edd743ed361bd0e56\n **/","module.exports = require(\"@angular/core\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"@angular/core\"\n ** module id = 13\n ** module chunksn **/","module.exports = require(\"../common/collection-item.component\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"../common/collection-item.component\"\n ** module id = 142\n ** module chunks = 26 55 79 118 136 154\n **/","import { Input } from '@angular/core';\r\nimport { CollectionService } from '../common/collection.service';\r\nimport { CollectionItemComponent } from '../common/collection-item.component';\r\nimport { ConfigurationService } from '../common/configuration.service';\r\nimport { Border, BulletTarget, DashType, LabelConnectors } from '../common/property-types';\r\nimport { Margin, NegativeBubbleValues, Overlay, SeriesLine } from '../common/property-types';\r\nimport { SeriesStack, SeriesVisualArgs } from '../common/property-types';\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport abstract class SeriesItemComponentGenerated extends CollectionItemComponent {\r\n  /**\r\n   * The aggregate function to apply for date series.\r\n   *\r\n   * This function is used when a category (an year, month, etc.) contains two or more points.\r\n   * The function return value is displayed instead of the individual points.\r\n   *\r\n   * The supported values are:\r\n   *\r\n   * - `\"avg\"`&mdash;The average of all values for the date period.\r\n   * - `\"count\"`&mdash;The number of values for the date period.\r\n   * - `\"max\"`&mdash;The highest value for the date period.\r\n   * - `\"min\"`&mdash;The lowest value for the date period.\r\n   * - `\"sum\"`&mdash;The sum of all values for the date period. Defaults to `0` if no data points are defined.\r\n   * - `\"sumOrNull\"`&mdash;The sum of all values for the date period. Defaults to `null` if no data points are\r\n   * defined.\r\n   * - `\"first\"`&mdash;The first value.\r\n   * - function(values, series, dataItems, category)&mdash;User-defined aggregate function. Returns a single\r\n   * value or a data item.\r\n   * - object(compound aggregate)&mdash;Applicable to the `\"candlestick\"`, `\"boxPlot\"`, and `\"ohlc\"` series.\r\n   * Specifies the aggregate for each data item field.\r\n   */\r\n  @Input() public aggregate: any;\r\n  /**\r\n   * The name of the value axis to use.\r\n   *\r\n   * The axis option is supported for scatter plots. For scatter plots, refer to `xAxis` and `yAxis`.\r\n   */\r\n  @Input() public axis: string;\r\n  /**\r\n   * The border of the Chart series.\r\n   *\r\n   * The border option is supported when `series.type` is set to `\"bar\"`, `\"column\"`, `\"donut\"`, `\"pie\"`, `\"bubble\"`,\r\n   * `\"boxPlot\"`, `\"candlestick\"`, `\"ohlc\"`, or `\"candlestick\"`.\r\n   */\r\n  @Input() public border: Border;\r\n  /**\r\n   * The data item field which contains the category name or date.\r\n   *\r\n   * If the category is a date, the points are rendered in chronological order.\r\n   */\r\n  @Input() public categoryField: string;\r\n  /**\r\n   * The data field containing the close value.\r\n   *\r\n   * The `closeField` option is supported when `series.type` is set to `\"candlestick\"` or `\"ohlc\"`.\r\n   */\r\n  @Input() public closeField: string;\r\n  /**\r\n   * The series base color. The supported values are:\r\n   *\r\n   * - CSS color string, including hex and rgb.\r\n   * - function(point)&mdash;A user-defined function that is evaluated for each point. Returning undefined\r\n   * assumes the default series color.\r\n   */\r\n  @Input() public color: any;\r\n  /**\r\n   * The data item field which contains the series color.\r\n   *\r\n   * The `colorField` option is supported when `series.type`\r\n   * is set to `\"bar\"`, `\"column\"`, `\"rangeBar\"`, `\"rangeColumn\"`, `\"bubble\"`, `\"donut\"`, `\"pie\"`, `\"candlestick\"`,\r\n   * `\"ohlc\"`, or `\"waterfall\"`.\r\n   */\r\n  @Input() public colorField: string;\r\n  /**\r\n   * The label connectors options.\r\n   *\r\n   * The connectors option is supported when `series.type` is set to `\"donut\"` or `\"pie\"`` and\r\n   * `series.labels.visible` is set to `true`.\r\n   */\r\n  @Input() public connectors: LabelConnectors;\r\n  /**\r\n   * The data item field containing the current value.\r\n   *\r\n   * The `currentField` option is supported when `series.type` is set to `\"bullet\"` or `\"verticalBullet\"`.\r\n   */\r\n  @Input() public currentField: string;\r\n  /**\r\n   * The dash type of line Chart.\r\n   *\r\n   * The `dashType` option is taken into consideration only if the `series.type` option is set to `\"line\"`.\r\n   *\r\n   * The following dash types are supported:\r\n   *\r\n   * - `\"dash\"`&mdash;A line consisting of dashes.\r\n   * - `\"dashDot\"`&mdash;A line consisting of a repeating pattern of dash-dot.\r\n   * - `\"dot\"`&mdash;A line consisting of dots.\r\n   * - `\"longDash\"`&mdash;A line consisting of a repeating pattern of long-dash.\r\n   * - `\"longDashDot\"`&mdash;A line consisting of a repeating pattern of long-dash-dot.\r\n   * - `\"longDashDotDot\"`&mdash;A line consisting of a repeating pattern of long-dash-dot-dot.\r\n   * - `\"solid\"`&mdash;A solid line.\r\n   */\r\n  @Input() public dashType: DashType;\r\n  /**\r\n   * The array of data items which represent the series data.\r\n   *\r\n   * Can be set to :\r\n   *\r\n   * - Array of objects. Each point is bound to the field specified via the `series.field` option.\r\n   * - Array of numbers. Supported when the `series.type` option is set to `\"area\"`, `\"bar\"`, `\"column\"`,\r\n   * `\"donut\"`, `\"pie\"`, `\"line\"`, or `\"waterfall\"`.\r\n   * - Array of arrays of numbers. Supported when the `series.type` option is set to the `\"bubble\"`, `\"scatter\"`,\r\n   * `\"scatterLine\"`, `\"ohlc\"`, or `\"polar\"` series.\r\n   * The Bubble series need arrays of three values - X value, Y value, and Size value&mdash;for example, `[1, 1, 10]Scatter`.\r\n   * The Scatter Line series need arrays of two values - X value and Y valueOHLC. The Candlestick series\r\n   * need arrays of four values - open, high, low, and close.\r\n   */\r\n  @Input() public data: any[];\r\n  /**\r\n   * The series color when the open value is greater than the close value.\r\n   *\r\n   * The `downColor` option is supported when `series.type` is set to `\"candlestick\"`.\r\n   */\r\n  @Input() public downColor: string;\r\n  /**\r\n   * The data field containing the color applied when the open value is greater than the close value.\r\n   *\r\n   * The `downColorField` option is supported when `series.type` is set to `\"candlestick\"`.\r\n   */\r\n  @Input() public downColorField: string;\r\n  /**\r\n   * The `dynamicHeight` option is supported when `series.type` is set to `\"funnel\"`.\r\n   *\r\n   * When set to `false`, all segments become with the same height. Otherwise, the height of each segment is\r\n   * based on its value.\r\n   */\r\n  @Input() public dynamicHeight: boolean;\r\n  /**\r\n   * The `dynamicSlope` option is supported when `series.type` is set to `\"funnel\"`.\r\n   *\r\n   * When set to `true`, the ratio of the bases of each segment is calculated based on the ratio of\r\n   * `currentDataItem.value`/`nextDataItem.value`.\r\n   * The last element is always created like a rectangle since there is no following element.\r\n   */\r\n  @Input() public dynamicSlope: boolean;\r\n  /**\r\n   * The data item field which contains the `series.errorBars` high value.\r\n   *\r\n   * The `errorHighField` option is supported when `series.type` is set to `\"bar\"`, `\"column\"`, `\"line\"`, or `\"area\"`.\r\n   */\r\n  @Input() public errorHighField: string;\r\n  /**\r\n   * The data item field which contains the `series.errorBars` low value.\r\n   *\r\n   * The `errorLowField` option is supported when `series.type` is set to `\"bar\"`, `\"column\"`, `\"line\"`, or `\"area\"`.\r\n   */\r\n  @Input() public errorLowField: string;\r\n  /**\r\n   * The data item field which contains a Boolean value indicating whether the sector is exploded.\r\n   *\r\n   * The `explodeField` option is supported when `series.type` is set to `\"donut\"` or `\"pie\"`.\r\n   */\r\n  @Input() public explodeField: string;\r\n  /**\r\n   * The data item field which contains the series value.\r\n   */\r\n  @Input() public field: string;\r\n  /**\r\n   * The data item field which contains the series from value.\r\n   */\r\n  @Input() public fromField: string;\r\n  /**\r\n   * The distance between categories expressed as a percentage of the bar width.\r\n   *\r\n   * See the related spacing setting.\r\n   *\r\n   * The gap option is supported when `series.type` is set to `\"bar\"`, `\"column\"`, `\"candlestick\"`, `\"ohlc\"`,\r\n   * `\"radarColumn\"`, or `\"waterfall\"`.\r\n   */\r\n  @Input() public gap: number;\r\n  /**\r\n   * The data field containing the high value.\r\n   *\r\n   * The `highField` option is supported when `series.type` is set to `\"candlestick\"` or `\"ohlc\"`.\r\n   */\r\n  @Input() public highField: string;\r\n  /**\r\n   * The diameter of the donut hole in pixels.\r\n   *\r\n   * The `holeSize` option is supported when `series.type` is set to `\"donut\"`.\r\n   */\r\n  @Input() public holeSize: number;\r\n  /**\r\n   * The Chart line configuration options.\r\n   *\r\n   * The line option is supported when the `series.type` option is set to `\"area\"`, `\"candlestick\"`, `\"ohlc\"`, or\r\n   * `\"waterfall\"`.\r\n   */\r\n  @Input() public line: SeriesLine;\r\n  /**\r\n   * The data field containing the low value.\r\n   *\r\n   * The `lowField` option is supported when `series.type` is set to `\"candlestick\"` or `\"ohlc\"`.\r\n   */\r\n  @Input() public lowField: string;\r\n  /**\r\n   * The data item field which contains the series lower value.\r\n   */\r\n  @Input() public lowerField: string;\r\n  /**\r\n   * The margin around each donut series (ring). A numeric value sets all margins.\r\n   */\r\n  @Input() public margin: Margin | number;\r\n  /**\r\n   * The maximum size of the chart bubble series marker.\r\n   */\r\n  @Input() public maxSize: number;\r\n  /**\r\n   * The data item field which contains the series mean value.\r\n   */\r\n  @Input() public meanField: string;\r\n  /**\r\n   * The data item field which contains the series median value.\r\n   */\r\n  @Input() public medianField: string;\r\n  /**\r\n   * The minimum size of the Chart bubble series marker.\r\n   */\r\n  @Input() public minSize: number;\r\n  /**\r\n   * The behavior for handling missing values. The supported values are:\r\n   *\r\n   * - `\"gap\"`&mdash;The plot stops before the missing point and continues after it.\r\n   * - `\"interpolate\"`&mdash;The value is interpolated from neighboring points.\r\n   * - `\"zero\"`&mdash;The value is assumed to be zero.\r\n   *\r\n   * The default value is `\"interpolate\"`, except for the `\"area\"` and stacked series which default to `\"zero\"`.\r\n   *\r\n   * The `missingValues` option is supported when `series.type` is set to `\"area\"`, `\"line\"`, `\"scatterLine\"`,\r\n   * `\"radarLine\"`, `\"radarArea\"`, `\"polarLine\"`, or `\"polarArea\"`.\r\n   */\r\n  @Input() public missingValues: string;\r\n  /**\r\n   * The name of the Chart series which is visible in the legend.\r\n   */\r\n  @Input() public name: string;\r\n  /**\r\n   * Specifies the top-base/bottom-base ratio of the whole Chart. If the `neckRatio` is set to `3`, it means the top\r\n   * base is three times smaller than the bottom base.\r\n   *\r\n   * The `neckRatio` option is supported when `series.type` is set to `\"funnel\"` and `dynamicSlope` is set to `false`.\r\n   */\r\n  @Input() public neckRatio: number;\r\n  /**\r\n   * The color to use for the Bar, Column, or Waterfall series with negative values. Accepts a valid CSS color\r\n   * string, including hex and rgb.\r\n   */\r\n  @Input() public negativeColor: string;\r\n  /**\r\n   * The options for displaying the Chart negative bubble values.\r\n   */\r\n  @Input() public negativeValues: NegativeBubbleValues;\r\n  /**\r\n   * The data item field which contains the series note text.\r\n   */\r\n  @Input() public noteTextField: string;\r\n  /**\r\n   * The series opacity. By default, the series are opaque.\r\n   */\r\n  @Input() public opacity: number;\r\n  /**\r\n   * The data field containing the open value.\r\n   *\r\n   * The `openField` option is supported when `series.type` is set to `\"candlestick\"` or `\"ohlc\"`.\r\n   */\r\n  @Input() public openField: string;\r\n  /**\r\n   * The data item field which contains the series outliers value.\r\n   */\r\n  @Input() public outliersField: string;\r\n  /**\r\n   * The Chart series overlay options.\r\n   */\r\n  @Input() public overlay: Overlay;\r\n  /**\r\n   * The padding around the Chart (equal on all sides).\r\n   *\r\n   * The padding option is supported when `series.type` is set to `\"donut\"` or `\"pie\"`.\r\n   */\r\n  @Input() public padding: number;\r\n  /**\r\n   * The data item field which contains the series `q1` value.\r\n   */\r\n  @Input() public q1Field: string;\r\n  /**\r\n   * The data item field which contains the series `q3` value.\r\n   */\r\n  @Input() public q3Field: string;\r\n  /**\r\n   * The space in pixels between the different segments of the Funnel Chart.\r\n   *\r\n   * The `segmentSpacing` option is supported when `series.type` is set to `\"funnel\"`.\r\n   */\r\n  @Input() public segmentSpacing: number;\r\n  /**\r\n   * The radius of the Chart Donut series in pixels. If not set, the available space is split evenly\r\n   * between the series.\r\n   */\r\n  @Input() public size: number;\r\n  /**\r\n   * The data field containing the bubble size value.\r\n   */\r\n  @Input() public sizeField: string;\r\n  /**\r\n   * The distance between series points within a category. Expressed as a percentage of the bar width.\r\n   *\r\n   * See the related gap setting.\r\n   *\r\n   * The spacing option is supported when `series.type` is set to `\"bar\"`, `\"column\"`, `\"candlestick\"`, `\"ohlc\"`, or\r\n   * `\"radarColumn\"`.\r\n   */\r\n  @Input() public spacing: number;\r\n  /**\r\n   * A Boolean value indicating if the series have to be stacked.\r\n   * A string value is interpreted as `series.stack.group`.\r\n   *\r\n   * The `stack` option is supported when `series.type` is set to `\"bar\"`, `\"column\"`, `\"line\"`, `\"area\"`,\r\n   * `\"verticalLine\"`, `\"verticalArea\"`, `\"radarLine\"`, `\"radarArea\"`, and `\"radarColumn\"`.\r\n   *\r\n   * If not overridden, the stack settings of the first series are inherited as a default value by the rest of the series.\r\n   */\r\n  @Input() public stack: SeriesStack;\r\n  /**\r\n   * The start angle (in degrees) of the first Donut or Pie segment.\r\n   *\r\n   * Angles increase clockwise and zero is to the left. Negative values are acceptable.\r\n   */\r\n  @Input() public startAngle: number;\r\n  /**\r\n   * The supported values are:\r\n   *\r\n   * - `\"normal\"`&mdash;The values will be connected with a straight line.\r\n   * - `\"step\"`&mdash;The values will be connected with a right-angled line.\r\n   * - `\"smooth\"`&mdash;The values will be connected with a smooth line.\r\n   *\r\n   * The default value is `\"normal\"`.\r\n   *\r\n   * The style option is supported when `series.type` is set to `\"line\"`, `\"scatterLine\"`, `\"radarLine\"`, or\r\n   * `\"polarLine\"`.\r\n   *\r\n   * The step value is only supported when `series.type` is set to `\"line\"`.\r\n   *\r\n   * The smooth options is not supported for stacked area series with missing values.\r\n   */\r\n  @Input() public style: string;\r\n  /**\r\n   * The data item field which contains the summary type for waterfall series.\r\n   * Summary columns are optional and can be one of two types:\r\n   *\r\n   * - `\"runningTotal\"`&mdash;Displays the sum of all items since the last `\"runningTotal\"` point.\r\n   * - `\"total\"`&mdash;Displays the sum of all previous items.\r\n   *\r\n   * The value (if any) of a data item marked as a summary point will be discarded.\r\n   */\r\n  @Input() public summaryField: string;\r\n  /**\r\n   * The configuration options of the target.\r\n   *\r\n   * The target option is supported when `series.type` is set to `\"bullet\"` or `\"verticalBullet\"`.\r\n   */\r\n  @Input() public target: BulletTarget;\r\n  /**\r\n   * The data item field which contains the series to value.\r\n   */\r\n  @Input() public toField: string;\r\n  /**\r\n   * The type of the series.\r\n   *\r\n   * The supported values are:\r\n   *\r\n   * - `area`\r\n   * - `bar`\r\n   * - `bubble`\r\n   * - `bullet`\r\n   * - `candlestick`\r\n   * - `column`\r\n   * - `donut`\r\n   * - `funnel`\r\n   * - `horizontalWaterfall`\r\n   * - `line`\r\n   * - `ohlc`\r\n   * - `pie`\r\n   * - `polarArea`\r\n   * - `polarLine`\r\n   * - `polarScatter`\r\n   * - `radarArea`\r\n   * - `radarColumn`\r\n   * - `radarLine`\r\n   * - `rangeBar`\r\n   * - `rangeColumn`\r\n   * - `scatter`\r\n   * - `scatterLine`\r\n   * - `verticalArea`\r\n   * - `verticalBoxPlot`\r\n   * - `verticalBullet`\r\n   * - `verticalLine`\r\n   * - `waterfall`\r\n   */\r\n  @Input() public type: string;\r\n  /**\r\n   * The data item field which contains the series upper value.\r\n   */\r\n  @Input() public upperField: string;\r\n  /**\r\n   * Sets the visible property of a Chart series.\r\n   */\r\n  @Input() public visible: boolean;\r\n  /**\r\n   * A value indicating whether to show the point category (for Funnel, Donut, and Pie series)\r\n   * or series name (for other available series types) in the legend.\r\n   */\r\n  @Input() public visibleInLegend: boolean;\r\n  /**\r\n   * The data item field which indicates whether to show the point category name in the legend.\r\n   *\r\n   * The `visibleInLegendField` option is supported when `series.type` is set to `\"funnel\"`, `\"donut\"`, or `\"pie\"`.\r\n   */\r\n  @Input() public visibleInLegendField: string;\r\n  /**\r\n   * A function that can be used to create a custom visual for the points. Applicable for the Bar, Column,\r\n   * Pie, Donut, Funnel, rangeBar, rangeColumn and Waterfall series.\r\n   *\r\n   * The available argument fields are:\r\n   *\r\n   * - `rect`&mdash;The `kendo.geometry.Rect` that defines where the visual has to be rendered.\r\n   * - `options`&mdash;The point options.\r\n   * - `createVisual`&mdash;A function that can be used to get the default visual.\r\n   * - `category`&mdash;The point category.\r\n   * - `dataItem`&mdash;The point `dataItem`.\r\n   * - `value`&mdash;The point value.\r\n   * - `stackValue`&mdash;The cumulative point value on the stack. Available only for the stackable series.\r\n   * - `sender`&mdash;The Chart instance.\r\n   * - `series`&mdash;The point series.\r\n   * - `percentage`&mdash;The point value represented as a percentage value. Available only for the Donut, Pie, and\r\n   * 100% stacked Charts.\r\n   * - `runningTotal`&mdash;The sum of point values since the last `\"runningTotal\"` summary point. Available for\r\n   * the Waterfall series.\r\n   * - `total`&mdash;The sum of all previous series values. Available for the Waterfall series.\r\n   * - `radius`&mdash;The segment radius. Available for the Donut and Pie series.\r\n   * - `innerRadius`&mdash;The segment inner radius. Available for the Donut series.\r\n   * - `startAngle`&mdash;The segment start angle. Available for the Donut and Pie series.\r\n   * - `endAngle`&mdash;The segment end angle. Available for the Donut and Pie series.\r\n   * - `center`&mdash;The segment center point. Available for the Donut and Pie series.\r\n   * - `points`&mdash;The segment points. Available for the Funnel series.\r\n   */\r\n  @Input() public visual: (e: SeriesVisualArgs) => void;\r\n  /**\r\n   * The line width.\r\n   *\r\n   * The width option is supported when `series.type` is set to `\"line\"`, `\"scatterLine\"`, `\"radarLine\"`, or\r\n   * `\"polarLine\"`.\r\n   */\r\n  @Input() public width: number;\r\n  /**\r\n   * The name of the x axis to use.\r\n   *\r\n   * The `xAxis` option is supported when `series.type` is set to `\"bubble\"`, `\"scatter\"`, `\"scatterLine\"`, or `\"polar\"`\r\n   * series.\r\n   *\r\n   * For the Polar series, the `xAxis` range is expressed in degrees.\r\n   */\r\n  @Input() public xAxis: string;\r\n  /**\r\n   * The data item field which contains the `series.errorBars` xAxis high value.\r\n   *\r\n   * The `xErrorHighField` option is supported when `series.type` is set to `\"scatter\"``, `\"scatterLine\"`, or\r\n   * `\"bubble\"`.\r\n   */\r\n  @Input() public xErrorHighField: string;\r\n  /**\r\n   * The data item field which contains the `series.errorBars` xAxis low value.\r\n   *\r\n   * The `xErrorLowField` option is supported when `series.type` is set to `\"scatter\"`, `\"scatterLine\"`, or\r\n   * `\"bubble\"`.\r\n   */\r\n  @Input() public xErrorLowField: string;\r\n  /**\r\n   * The data item field containing the x value.\r\n   *\r\n   * The `xField` option is supported when `series.type` is set to `\"bubble\"`, `\"scatter\"`, `\"scatterLine\"`, or\r\n   * `\"polar\"` series.\r\n   */\r\n  @Input() public xField: string;\r\n  /**\r\n   * The name of the y axis to use.\r\n   *\r\n   * Available for the Bubble, Scatter, scatterLine, and Polar series.\r\n   */\r\n  @Input() public yAxis: string;\r\n  /**\r\n   * The data item field which contains the `series.errorBars` yAxis high value.\r\n   *\r\n   * The `yErrorHighField` option is supported when `series.type` is set to `\"scatter\"`, `\"scatterLine\"`, or\r\n   * `\"bubble\"`.\r\n   */\r\n  @Input() public yErrorHighField: string;\r\n  /**\r\n   * The data item field which contains the `series.errorBars` yAxis low value.\r\n   *\r\n   * The `yErrorLowField` option is supported when `series.type` is set to `\"scatter\"`, `\"scatterLine\"`, or\r\n   * `\"bubble\"`.\r\n   */\r\n  @Input() public yErrorLowField: string;\r\n  /**\r\n   * The data item field containing the y value.\r\n   *\r\n   * The `yField` option is supported when `series.type` is set to `\"bubble\"`, `\"scatter\"`, or `\"scatterLine\"`.\r\n   */\r\n  @Input() public yField: string;\r\n  /**\r\n   * An optional Z-index that can be used to change the default stacking order of series.\r\n   *\r\n   * The series with the highest Z-index are placed on top.\r\n   *\r\n   * Series with no Z-index use the default stacking order based on the series type.\r\n   * For example, Line series will be on top with the Bar and Area following after.\r\n   */\r\n  @Input() public zIndex: number;\r\n\r\n  // These options are also available as child components\r\n  /**\r\n   * The error bars of the Chart series.\r\n   *\r\n   * The `errorBars` option is supported when `series.type` is set to `\"bar\"`, `\"column\"`, `\"line\"`, `\"area\"`,\r\n   * `\"scatter\"`, `\"scatterLine\"`, or `\"bubble\"`.\r\n   */\r\n  @Input() public errorBars: any;\r\n  /**\r\n   * The Chart series extremes configuration. Applies to extreme outliers. For more information, refer to `series.outliers`.\r\n   */\r\n  @Input() public extremes: any;\r\n  /**\r\n   * The Chart series highlighting configuration options.\r\n   */\r\n  @Input() public highlight: any;\r\n  /**\r\n   * The Chart series label configuration.\r\n   *\r\n   * The Chart displays the series labels when the `series.labels.visible` option is set to `true`.\r\n   */\r\n  @Input() public labels: any;\r\n  /**\r\n   * The Chart series marker configuration.\r\n   *\r\n   * The Chart displays the series labels when the `series.markers.visible` option is set to `true`.\r\n   * The markers option is supported when `series.type` is set to `\"area\"`, `\"line\"`, `\"scatter\"`, `\"scatterLine\"`,\r\n   * `\"radarLine\"`, `\"radarArea\"`, `\"polarLine\"`, `\"polarScatter\"`, or `\"polarArea\"`.\r\n   */\r\n  @Input() public markers: any;\r\n  /**\r\n   * The series notes configuration.\r\n   */\r\n  @Input() public notes: any;\r\n  /**\r\n   * The Chart series outliers configuration. Applies to mild outliers. For more information, refer to `series.extremes`.\r\n   */\r\n  @Input() public outliers: any;\r\n  /**\r\n   * The configuration options of the chart series tooltip.\r\n   *\r\n   * The chart series tooltip is displayed when the `series.tooltip.visible` option is set to `true`.\r\n   */\r\n  @Input() public tooltip: any;\r\n\r\n  constructor(protected configurationService: ConfigurationService,\r\n              protected collectionService: CollectionService) {\r\n    super(configurationService, collectionService);\r\n  }\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/chart/series-item.component.generated.ts\n **/"],"sourceRoot":""}