import 'core-js/es6';

import SeriesBinder from '../../src/chart/series-binder';

import '../../src/chart/register-charts';
import deepExtend from '../../src/common/deep-extend';


import { createChart, destroyChart } from '../test-helpers';
import { equal } from '../../test/test-helpers';

// ------------------------------------------------------------
function zIndexTests(seriesType) {
    let chart, widget;

    describe('Chart / Z-Index / ' + seriesType + ' / ', () => {
        beforeEach(() => {
            const series = {
                type: seriesType,
                zIndex: 100
            };

            const fields = SeriesBinder.current.valueFields(series);
            const sample = fields.map(function() {
                return 1;
            });

            series.data = [sample];
            widget = createChart({
                series: [series]
            });

            chart = widget._plotArea.charts[0];
        });

        afterEach(() => {
            destroyChart(widget);
        });

        it("z-index is applied to points", function() {
            equal(chart.points[0].options.zIndex, 100);
        });
    });
}

const targets = [
    "area", "bar", "column",
    "boxPlot", "ohlc", "candlestick",
    "bubble", "bullet", "line",
    "polarLine", "polarScatter", "polarArea",
    "radarLine", "radarArea", "radarColumn",
    "rangeBar", "waterfall",
    "scatter", "scatterLine"
];

for (let idx = 0; idx < targets.length; idx++) {
    zIndexTests(targets[idx]);
}

// ------------------------------------------------------------
(function() {
    let chart, widget;

    function createLineChart(seriesOptions) {
        seriesOptions = deepExtend({
            type: "line",
            data: [1, 1]
        }, seriesOptions);

        widget = createChart({
            series: [seriesOptions]
        });

        chart = widget._plotArea.charts[0];
    }

    describe('Chart / Z-Index / LinePoint', () => {
        afterEach(() => {
            destroyChart(widget);
        });

        it("segment zIndex defaults to base zIndex", function() {
            createLineChart({
                zIndex: 100
            });
            equal(chart._segments[0].visual.options.zIndex, 100);
        });

        it("segment zIndex defaults to base zIndex (smooth style)", function() {
            createLineChart({
                style: "smooth",
                zIndex: 100
            });
            equal(chart._segments[0].visual.options.zIndex, 100);
        });
    });
})();

// ------------------------------------------------------------
(function() {
    let pane, widget;

    describe('Chart / Z-Index / Pane', () => {
        beforeEach(() => {
            widget = createChart({
                panes: [{
                    background: "red"
                }]
            });

            pane = widget._plotArea.panes[0];
        });
        afterEach(() => {
            destroyChart(widget);
        });

        it("background is rendered below other elements", function() {
            equal(pane.visual.children[0].options.fill.color, "red");
        });
    });
})();
