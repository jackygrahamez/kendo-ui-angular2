{"version":3,"sources":["webpack:///webpack/bootstrap ad3edd743ed361bd0e56?6e3f*********************************************************************************","webpack:///external \"@angular/core\"?73d1********************************************************************","webpack:///external \"../../common/settings.component\"?7c8e**********************","webpack:///./src/chart/series-item/error-bars.component.generated.ts"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;ACtCA,2C;;;;;;;ACAA,6D;;;;;;;;;;;;;;;;;;;;;;ACAA,kCAAsB,EAAe,CAAC;AAEtC,gDAAkC,GAAiC,CAAC;AAGpE;;IAEG;AACH;KAAgE,qDAAiB;KAiE/E,2CAAmB,oBAA0C;SAC3D,kBAAM,WAAW,EAAE,oBAAoB,CAAC,CAAC;SADxB,yBAAoB,GAApB,oBAAoB,CAAsB;KAE7D,CAAC;KA/DD;SAAC,YAAK,EAAE;;qEAAA;KAKR;SAAC,YAAK,EAAE;;uEAAA;KAKR;SAAC,YAAK,EAAE;;oEAAA;KAmBR;SAAC,YAAK,EAAE;;qEAAA;KAcR;SAAC,YAAK,EAAE;;sEAAA;KAQR;SAAC,YAAK,EAAE;;sEAAA;KAQR;SAAC,YAAK,EAAE;;sEAAA;KAKV,wCAAC;AAAD,EAAC,CApE+D,sCAAiB,GAoEhF;AApEqB,0CAAiC,oCAoEtD","file":"src/chart/series-item/error-bars.component.generated.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap ad3edd743ed361bd0e56\n **/","module.exports = require(\"@angular/core\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"@angular/core\"\n ** module id = 13\n ** module chunksn **/","module.exports = require(\"../../common/settings.component\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"../../common/settings.component\"\n ** module id = 128\n ** module chunks = 18 20 22 24 28 30 32 34 36 38 40 42 51 53 57 65 67 69 71 73 75 77 81 83 85 87 89 91 93 95 97 99 101 103 120 122 124 126 128 130 132 138 140 142 144 146 148 150 156 158 160 162 164 166 168\n **/","import { Input } from '@angular/core';\r\nimport { ConfigurationService } from '../../common/configuration.service';\r\nimport { SettingsComponent } from '../../common/settings.component';\r\nimport { ErrorBarLine, ErrorBarsVisualArgs } from '../../common/property-types';\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport abstract class SeriesErrorBarsComponentGenerated extends SettingsComponent {\r\n  /**\r\n   * The color of the error bars. Accepts a valid CSS color string, including hex and rgb.\r\n   */\r\n  @Input() public color: string;\r\n\r\n  /**\r\n   * If set to `false`, the error bars caps are not displayed. By default, the caps are visible.\r\n   */\r\n  @Input() public endCaps: boolean;\r\n\r\n  /**\r\n   * The error bars line options.\r\n   */\r\n  @Input() public line: ErrorBarLine;\r\n\r\n  /**\r\n   * The error bars value.\r\n   *\r\n   * The value option is supported when `series.type` is set to `\"bar\"`, `\"column\"`, `\"line\"`, or `\"area\"`.\r\n   *\r\n   * The following value types are supported:\r\n   *\r\n   * - `\"stderr\"`&mdash;The standard error of the series values will be used to calculate the point low and\r\n   * high values.\r\n   * - `\"stddev(n)\"`&mdash;The standard deviation of the series values will be used to calculate the point low\r\n   * and high values. Between the parentheses, a number can be specified that will be multiplied by the\r\n   * calculated standard deviation.\r\n   * - `\"percentage(n)\"`&mdash;A percentage of the point value.\r\n   * - A number that will be subtracted or added to the point value.\r\n   * - An array that holds the low and high difference from the point value.\r\n   * - A function that returns the `errorBars` point value.\r\n   */\r\n  @Input() public value: string;\r\n\r\n  /**\r\n   * A function that can be used to create a custom visual for the error bars.\r\n   *\r\n   * The available argument fields are:\r\n   *\r\n   * - `rect`&mdash;The `kendo.geometry.Rect` that defines where the visual has to be rendered.\r\n   * - `options`&mdash;The error bar options.\r\n   * - `createVisual`&mdash;A function that can be used to get the default visual.\r\n   * - `low`&mdash;The error bar low value.\r\n   * - `high`&mdash;The error bar high value.\r\n   * - `sender`&mdash;The Chart instance.\r\n   */\r\n  @Input() public visual: (e: ErrorBarsVisualArgs) => void;\r\n\r\n  /**\r\n   * The `xAxis` error bars value. For a list of the supported value\r\n   * types, refer to the `series.errorBars.value` option.\r\n   *\r\n   * The `xValue` option is supported when `series.type` is set to `\"scatter\"`, `\"scatterLine\"`, or `\"bubble\"`.\r\n   */\r\n  @Input() public xValue: string;\r\n\r\n  /**\r\n   * The `yAxis` error bars value. For a list of supported value types, refer\r\n   * to the `series.errorBars.value` option.\r\n   *\r\n   * The `yValue` option is supported when `series.type` is set to `\"scatter\"`, `\"scatterLine\"`, or `\"bubble\"`.\r\n   */\r\n  @Input() public yValue: string;\r\n\r\n  constructor(public configurationService: ConfigurationService) {\r\n    super('errorBars', configurationService);\r\n  }\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/chart/series-item/error-bars.component.generated.ts\n **/"],"sourceRoot":""}