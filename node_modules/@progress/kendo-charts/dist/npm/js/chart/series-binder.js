module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(303);


/***/ },

/***/ 60:
/***/ function(module, exports) {

	module.exports = require("../common/constants");

/***/ },

/***/ 113:
/***/ function(module, exports) {

	module.exports = require("../common/defined");

/***/ },

/***/ 131:
/***/ function(module, exports) {

	module.exports = require("./utils/get-field");

/***/ },

/***/ 303:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _getField = __webpack_require__(131);

	var _getField2 = _interopRequireDefault(_getField);

	var _constants = __webpack_require__(60);

	var _defined = __webpack_require__(113);

	var _defined2 = _interopRequireDefault(_defined);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var SeriesBinder = function () {
	    function SeriesBinder() {
	        _classCallCheck(this, SeriesBinder);

	        this._valueFields = {};
	        this._otherFields = {};
	        this._nullValue = {};
	        this._undefinedValue = {};
	    }

	    _createClass(SeriesBinder, [{
	        key: 'register',
	        value: function register(seriesTypes) {
	            var valueFields = arguments.length <= 1 || arguments[1] === undefined ? [_constants.VALUE] : arguments[1];
	            var otherFields = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];


	            for (var i = 0; i < seriesTypes.length; i++) {
	                var type = seriesTypes[i];

	                this._valueFields[type] = valueFields;
	                this._otherFields[type] = otherFields;
	                this._nullValue[type] = this._makeValue(valueFields, null);
	                this._undefinedValue[type] = this._makeValue(valueFields, undefined);
	            }
	        }
	    }, {
	        key: 'canonicalFields',
	        value: function canonicalFields(series) {
	            return this.valueFields(series).concat(this.otherFields(series));
	        }
	    }, {
	        key: 'valueFields',
	        value: function valueFields(series) {
	            return this._valueFields[series.type] || [_constants.VALUE];
	        }
	    }, {
	        key: 'otherFields',
	        value: function otherFields(series) {
	            return this._otherFields[series.type] || [_constants.VALUE];
	        }
	    }, {
	        key: 'bindPoint',
	        value: function bindPoint(series, pointIx, item) {
	            var data = series.data;
	            var pointData = (0, _defined2.default)(item) ? item : data[pointIx];
	            var result = { valueFields: { value: pointData } };
	            var valueFields = this.valueFields(series);
	            var otherFields = this._otherFields[series.type];
	            var fields = void 0,
	                value = void 0;

	            if (pointData === null) {
	                value = this._nullValue[series.type];
	            } else if (!(0, _defined2.default)(pointData)) {
	                value = this._undefinedValue[series.type];
	            } else if (Array.isArray(pointData)) {
	                var fieldData = pointData.slice(valueFields.length);
	                value = this._bindFromArray(pointData, valueFields);
	                fields = this._bindFromArray(fieldData, otherFields);
	            } else if ((typeof pointData === 'undefined' ? 'undefined' : _typeof(pointData)) === "object") {
	                var srcValueFields = this.sourceFields(series, valueFields);
	                var srcPointFields = this.sourceFields(series, otherFields);

	                value = this._bindFromObject(pointData, valueFields, srcValueFields);
	                fields = this._bindFromObject(pointData, otherFields, srcPointFields);
	            }

	            if ((0, _defined2.default)(value)) {
	                if (valueFields.length === 1) {
	                    result.valueFields.value = value[valueFields[0]];
	                } else {
	                    result.valueFields = value;
	                }
	            }

	            result.fields = fields || {};

	            return result;
	        }
	    }, {
	        key: '_makeValue',
	        value: function _makeValue(fields, initialValue) {
	            var value = {};
	            var length = fields.length;

	            for (var i = 0; i < length; i++) {
	                var fieldName = fields[i];
	                value[fieldName] = initialValue;
	            }

	            return value;
	        }
	    }, {
	        key: '_bindFromArray',
	        value: function _bindFromArray(array, fields) {
	            var value = {};

	            if (fields) {
	                var length = Math.min(fields.length, array.length);

	                for (var i = 0; i < length; i++) {
	                    value[fields[i]] = array[i];
	                }
	            }

	            return value;
	        }
	    }, {
	        key: '_bindFromObject',
	        value: function _bindFromObject(object, fields) {
	            var srcFields = arguments.length <= 2 || arguments[2] === undefined ? fields : arguments[2];

	            var value = {};

	            if (fields) {
	                var length = fields.length;

	                for (var i = 0; i < length; i++) {
	                    var fieldName = fields[i];
	                    var srcFieldName = srcFields[i];
	                    value[fieldName] = (0, _getField2.default)(srcFieldName, object);
	                }
	            }

	            return value;
	        }
	    }, {
	        key: 'sourceFields',
	        value: function sourceFields(series, canonicalFields) {
	            var sourceFields = [];

	            if (canonicalFields) {
	                var length = canonicalFields.length;

	                for (var i = 0; i < length; i++) {
	                    var fieldName = canonicalFields[i];
	                    var sourceFieldName = fieldName === _constants.VALUE ? "field" : fieldName + "Field";

	                    sourceFields.push(series[sourceFieldName] || fieldName);
	                }
	            }

	            return sourceFields;
	        }
	    }]);

	    return SeriesBinder;
	}();

	SeriesBinder.current = new SeriesBinder();

	exports.default = SeriesBinder;

/***/ }

/******/ });