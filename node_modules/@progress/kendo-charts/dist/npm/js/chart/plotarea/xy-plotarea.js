module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(255);


/***/ },

/***/ 5:
/***/ function(module, exports) {

	module.exports = require("../../common/constants");

/***/ },

/***/ 15:
/***/ function(module, exports) {

	module.exports = require("../../common/in-array");

/***/ },

/***/ 24:
/***/ function(module, exports) {

	module.exports = require("../constants");

/***/ },

/***/ 25:
/***/ function(module, exports) {

	module.exports = require("../../common/set-default-options");

/***/ },

/***/ 50:
/***/ function(module, exports) {

	module.exports = require("../../common/deep-extend");

/***/ },

/***/ 55:
/***/ function(module, exports) {

	module.exports = require("../../core");

/***/ },

/***/ 90:
/***/ function(module, exports) {

	module.exports = require("../scatter-charts/scatter-chart");

/***/ },

/***/ 158:
/***/ function(module, exports) {

	module.exports = require("../series-binder");

/***/ },

/***/ 213:
/***/ function(module, exports) {

	module.exports = require("./plotarea-base");

/***/ },

/***/ 214:
/***/ function(module, exports) {

	module.exports = require("../axis-group-range-tracker");

/***/ },

/***/ 215:
/***/ function(module, exports) {

	module.exports = require("../mixins/plotarea-events-mixin");

/***/ },

/***/ 224:
/***/ function(module, exports) {

	module.exports = require("../utils/filter-series-by-type");

/***/ },

/***/ 225:
/***/ function(module, exports) {

	module.exports = require("../utils/equals-ignore-case");

/***/ },

/***/ 230:
/***/ function(module, exports) {

	module.exports = require("../utils/single-item-or-array");

/***/ },

/***/ 232:
/***/ function(module, exports) {

	module.exports = require("../../common/grep");

/***/ },

/***/ 255:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _plotareaBase = __webpack_require__(213);

	var _plotareaBase2 = _interopRequireDefault(_plotareaBase);

	var _axisGroupRangeTracker = __webpack_require__(214);

	var _axisGroupRangeTracker2 = _interopRequireDefault(_axisGroupRangeTracker);

	var _plotareaEventsMixin = __webpack_require__(215);

	var _plotareaEventsMixin2 = _interopRequireDefault(_plotareaEventsMixin);

	var _scatterChart = __webpack_require__(90);

	var _scatterChart2 = _interopRequireDefault(_scatterChart);

	var _scatterLineChart = __webpack_require__(256);

	var _scatterLineChart2 = _interopRequireDefault(_scatterLineChart);

	var _bubbleChart = __webpack_require__(257);

	var _bubbleChart2 = _interopRequireDefault(_bubbleChart);

	var _seriesBinder = __webpack_require__(158);

	var _seriesBinder2 = _interopRequireDefault(_seriesBinder);

	var _core = __webpack_require__(55);

	var _filterSeriesByType = __webpack_require__(224);

	var _filterSeriesByType2 = _interopRequireDefault(_filterSeriesByType);

	var _equalsIgnoreCase = __webpack_require__(225);

	var _equalsIgnoreCase2 = _interopRequireDefault(_equalsIgnoreCase);

	var _singleItemOrArray = __webpack_require__(230);

	var _singleItemOrArray2 = _interopRequireDefault(_singleItemOrArray);

	var _constants = __webpack_require__(24);

	var _constants2 = __webpack_require__(5);

	var _setDefaultOptions = __webpack_require__(25);

	var _setDefaultOptions2 = _interopRequireDefault(_setDefaultOptions);

	var _deepExtend = __webpack_require__(50);

	var _deepExtend2 = _interopRequireDefault(_deepExtend);

	var _grep = __webpack_require__(232);

	var _grep2 = _interopRequireDefault(_grep);

	var _inArray = __webpack_require__(15);

	var _inArray2 = _interopRequireDefault(_inArray);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var XYPlotArea = function (_PlotAreaBase) {
	    _inherits(XYPlotArea, _PlotAreaBase);

	    function XYPlotArea() {
	        _classCallCheck(this, XYPlotArea);

	        return _possibleConstructorReturn(this, (XYPlotArea.__proto__ || Object.getPrototypeOf(XYPlotArea)).apply(this, arguments));
	    }

	    _createClass(XYPlotArea, [{
	        key: 'initFields',
	        value: function initFields() {
	            this.namedXAxes = {};
	            this.namedYAxes = {};

	            this.xAxisRangeTracker = new _axisGroupRangeTracker2.default();
	            this.yAxisRangeTracker = new _axisGroupRangeTracker2.default();
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var panes = arguments.length <= 0 || arguments[0] === undefined ? this.panes : arguments[0];

	            var seriesByPane = this.groupSeriesByPane();

	            for (var i = 0; i < panes.length; i++) {
	                var pane = panes[i];
	                var paneSeries = seriesByPane[pane.options.name || "default"] || [];
	                this.addToLegend(paneSeries);
	                var filteredSeries = this.filterVisibleSeries(paneSeries);

	                if (!filteredSeries) {
	                    continue;
	                }

	                this.createScatterChart((0, _filterSeriesByType2.default)(filteredSeries, _constants.SCATTER), pane);

	                this.createScatterLineChart((0, _filterSeriesByType2.default)(filteredSeries, _constants.SCATTER_LINE), pane);

	                this.createBubbleChart((0, _filterSeriesByType2.default)(filteredSeries, _constants.BUBBLE), pane);
	            }

	            this.createAxes(panes);
	        }
	    }, {
	        key: 'appendChart',
	        value: function appendChart(chart, pane) {
	            this.xAxisRangeTracker.update(chart.xAxisRanges);
	            this.yAxisRangeTracker.update(chart.yAxisRanges);

	            _get(XYPlotArea.prototype.__proto__ || Object.getPrototypeOf(XYPlotArea.prototype), 'appendChart', this).call(this, chart, pane);
	        }
	    }, {
	        key: 'removeAxis',
	        value: function removeAxis(axis) {
	            var axisName = axis.options.name;

	            _get(XYPlotArea.prototype.__proto__ || Object.getPrototypeOf(XYPlotArea.prototype), 'removeAxis', this).call(this, axis);

	            if (axis.options.vertical) {
	                this.yAxisRangeTracker.reset(axisName);
	                delete this.namedYAxes[axisName];
	            } else {
	                this.xAxisRangeTracker.reset(axisName);
	                delete this.namedXAxes[axisName];
	            }

	            if (axis === this.axisX) {
	                delete this.axisX;
	            }

	            if (axis === this.axisY) {
	                delete this.axisY;
	            }
	        }

	        // TODO: Refactor, optionally use series.pane option

	    }, {
	        key: 'seriesPaneName',
	        value: function seriesPaneName(series) {
	            var options = this.options;
	            var xAxisName = series.xAxis;
	            var xAxisOptions = [].concat(options.xAxis);
	            var xAxis = (0, _grep2.default)(xAxisOptions, function (a) {
	                return a.name === xAxisName;
	            })[0];
	            var yAxisName = series.yAxis;
	            var yAxisOptions = [].concat(options.yAxis);
	            var yAxis = (0, _grep2.default)(yAxisOptions, function (a) {
	                return a.name === yAxisName;
	            })[0];
	            var panes = options.panes || [{}];
	            var defaultPaneName = panes[0].name || "default";
	            var paneName = (xAxis || {}).pane || (yAxis || {}).pane || defaultPaneName;

	            return paneName;
	        }
	    }, {
	        key: 'createScatterChart',
	        value: function createScatterChart(series, pane) {
	            if (series.length > 0) {
	                this.appendChart(new _scatterChart2.default(this, { series: series, clip: pane.options.clip }), pane);
	            }
	        }
	    }, {
	        key: 'createScatterLineChart',
	        value: function createScatterLineChart(series, pane) {
	            if (series.length > 0) {
	                this.appendChart(new _scatterLineChart2.default(this, { series: series, clip: pane.options.clip }), pane);
	            }
	        }
	    }, {
	        key: 'createBubbleChart',
	        value: function createBubbleChart(series, pane) {
	            if (series.length > 0) {
	                this.appendChart(new _bubbleChart2.default(this, { series: series, clip: pane.options.clip }), pane);
	            }
	        }
	    }, {
	        key: 'createXYAxis',
	        value: function createXYAxis(options, vertical, axisIndex) {
	            var axisName = options.name;
	            var namedAxes = vertical ? this.namedYAxes : this.namedXAxes;
	            var tracker = vertical ? this.yAxisRangeTracker : this.xAxisRangeTracker;
	            var axisOptions = (0, _deepExtend2.default)({}, options, { vertical: vertical });
	            var isLog = (0, _equalsIgnoreCase2.default)(axisOptions.type, _constants.LOGARITHMIC);
	            var defaultRange = tracker.query();
	            var defaultAxisRange = isLog ? { min: 0.1, max: 1 } : { min: 0, max: 1 };
	            var range = tracker.query(axisName) || defaultRange || defaultAxisRange;
	            var typeSamples = [axisOptions.min, axisOptions.max];
	            var series = this.series;

	            for (var seriesIx = 0; seriesIx < series.length; seriesIx++) {
	                var currentSeries = series[seriesIx];
	                var seriesAxisName = currentSeries[vertical ? "yAxis" : "xAxis"];
	                if (seriesAxisName === axisOptions.name || axisIndex === 0 && !seriesAxisName) {
	                    var firstPointValue = _seriesBinder2.default.current.bindPoint(currentSeries, 0).valueFields;
	                    typeSamples.push(firstPointValue[vertical ? "y" : "x"]);

	                    break;
	                }
	            }

	            if (axisIndex === 0 && defaultRange) {
	                range.min = Math.min(range.min, defaultRange.min);
	                range.max = Math.max(range.max, defaultRange.max);
	            }

	            var inferredDate = void 0;

	            for (var i = 0; i < typeSamples.length; i++) {
	                if (typeSamples[i] instanceof Date) {
	                    inferredDate = true;
	                    break;
	                }
	            }

	            var axisType = void 0;
	            if ((0, _equalsIgnoreCase2.default)(axisOptions.type, _constants2.DATE) || !axisOptions.type && inferredDate) {
	                axisType = _core.DateValueAxis;
	            } else if (isLog) {
	                axisType = _core.LogarithmicAxis;
	            } else {
	                axisType = _core.NumericAxis;
	            }

	            var axis = new axisType(range.min, range.max, axisOptions);
	            axis.axisIndex = axisIndex;

	            if (axisName) {
	                if (namedAxes[axisName]) {
	                    throw new Error((vertical ? "Y" : "X") + ' axis with name ' + axisName + ' is already defined');
	                }
	                namedAxes[axisName] = axis;
	            }

	            this.appendAxis(axis);

	            return axis;
	        }
	    }, {
	        key: 'createAxes',
	        value: function createAxes(panes) {
	            var options = this.options;
	            var xAxesOptions = [].concat(options.xAxis);
	            var xAxes = [];
	            var yAxesOptions = [].concat(options.yAxis);
	            var yAxes = [];

	            for (var idx = 0; idx < xAxesOptions.length; idx++) {
	                var axisPane = this.findPane(xAxesOptions[idx].pane);
	                if ((0, _inArray2.default)(axisPane, panes)) {
	                    xAxes.push(this.createXYAxis(xAxesOptions[idx], false, idx));
	                }
	            }

	            for (var _idx = 0; _idx < yAxesOptions.length; _idx++) {
	                var _axisPane = this.findPane(yAxesOptions[_idx].pane);
	                if ((0, _inArray2.default)(_axisPane, panes)) {
	                    yAxes.push(this.createXYAxis(yAxesOptions[_idx], true, _idx));
	                }
	            }

	            this.axisX = this.axisX || xAxes[0];
	            this.axisY = this.axisY || yAxes[0];
	        }
	    }, {
	        key: '_dispatchEvent',
	        value: function _dispatchEvent(chart, e, eventType) {
	            var coords = chart._eventCoordinates(e);
	            var point = new _core.Point(coords.x, coords.y);
	            var allAxes = this.axes;
	            var length = allAxes.length;
	            var xValues = [];
	            var yValues = [];

	            for (var i = 0; i < length; i++) {
	                var axis = allAxes[i];
	                var values = axis.options.vertical ? yValues : xValues;
	                var currentValue = axis.getValue(point);
	                if (currentValue !== null) {
	                    values.push(currentValue);
	                }
	            }

	            if (xValues.length > 0 && yValues.length > 0) {
	                chart.trigger(eventType, {
	                    element: e.target,
	                    originalEvent: e,
	                    x: (0, _singleItemOrArray2.default)(xValues),
	                    y: (0, _singleItemOrArray2.default)(yValues)
	                });
	            }
	        }
	    }, {
	        key: 'updateAxisOptions',
	        value: function updateAxisOptions(axis, options) {
	            var vertical = axis.options.vertical;
	            var axes = this.groupAxes(this.panes);
	            var index = (vertical ? axes.y : axes.x).indexOf(axis);
	            var axisOptions = [].concat(vertical ? this.options.yAxis : this.options.xAxis)[index];
	            (0, _deepExtend2.default)(axisOptions, options);
	        }
	    }]);

	    return XYPlotArea;
	}(_plotareaBase2.default);

	(0, _setDefaultOptions2.default)(XYPlotArea.prototype, {
	    xAxis: {},
	    yAxis: {}
	});

	(0, _deepExtend2.default)(XYPlotArea.prototype, _plotareaEventsMixin2.default);

	exports.default = XYPlotArea;

/***/ },

/***/ 256:
/***/ function(module, exports) {

	module.exports = require("../scatter-charts/scatter-line-chart");

/***/ },

/***/ 257:
/***/ function(module, exports) {

	module.exports = require("../bubble-chart/bubble-chart");

/***/ }

/******/ });