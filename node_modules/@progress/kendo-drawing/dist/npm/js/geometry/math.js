module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(165);


/***/ },

/***/ 153:
/***/ function(module, exports) {

	module.exports = require("../common/round");

/***/ },

/***/ 159:
/***/ function(module, exports) {

	module.exports = require("./constants");

/***/ },

/***/ 165:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.solveQuadraticEquation = solveQuadraticEquation;
	exports.solveCubicEquation = solveCubicEquation;
	exports.calculateCurveAt = calculateCurveAt;
	exports.curveIntersectionsCount = curveIntersectionsCount;
	exports.lineIntersectionsCount = lineIntersectionsCount;
	exports.close = close;
	exports.closeOrLess = closeOrLess;
	exports.isOutOfEndPoint = isOutOfEndPoint;
	exports.hasRootsInRange = hasRootsInRange;
	exports.deg = deg;
	exports.rad = rad;
	exports.ellipseExtremeAngles = ellipseExtremeAngles;

	var _complexNumber = __webpack_require__(166);

	var _complexNumber2 = _interopRequireDefault(_complexNumber);

	var _constants = __webpack_require__(159);

	var _round = __webpack_require__(153);

	var _round2 = _interopRequireDefault(_round);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function numberSign(x) {
	    return x < 0 ? -1 : 1;
	}

	function solveQuadraticEquation(a, b, c) {
	    var squareRoot = Math.sqrt(Math.pow(b, 2) - 4 * a * c);
	    return [(-b + squareRoot) / (2 * a), (-b - squareRoot) / (2 * a)];
	}

	//Cardano's formula
	function solveCubicEquation(a, b, c, d) {
	    if (a === 0) {
	        return solveQuadraticEquation(b, c, d);
	    }

	    var p = (3 * a * c - Math.pow(b, 2)) / (3 * Math.pow(a, 2));
	    var q = (2 * Math.pow(b, 3) - 9 * a * b * c + 27 * Math.pow(a, 2) * d) / (27 * Math.pow(a, 3));
	    var Q = Math.pow(p / 3, 3) + Math.pow(q / 2, 2);
	    var i = new _complexNumber2.default(0, 1);
	    var b3a = -b / (3 * a);
	    var x1 = void 0,
	        x2 = void 0,
	        y1 = void 0,
	        y2 = void 0,
	        y3 = void 0,
	        z1 = void 0,
	        z2 = void 0;

	    if (Q < 0) {
	        x1 = new _complexNumber2.default(-q / 2, Math.sqrt(-Q)).nthRoot(3);
	        x2 = new _complexNumber2.default(-q / 2, -Math.sqrt(-Q)).nthRoot(3);
	    } else {
	        x1 = -q / 2 + Math.sqrt(Q);
	        x1 = new _complexNumber2.default(numberSign(x1) * Math.pow(Math.abs(x1), 1 / 3));
	        x2 = -q / 2 - Math.sqrt(Q);
	        x2 = new _complexNumber2.default(numberSign(x2) * Math.pow(Math.abs(x2), 1 / 3));
	    }

	    y1 = x1.add(x2);

	    z1 = x1.add(x2).multiplyConstant(-1 / 2);
	    z2 = x1.add(x2.negate()).multiplyConstant(Math.sqrt(3) / 2);

	    y2 = z1.add(i.multiply(z2));
	    y3 = z1.add(i.negate().multiply(z2));

	    var result = [];

	    if (y1.isReal()) {
	        result.push((0, _round2.default)(y1.real + b3a, _constants.PRECISION));
	    }
	    if (y2.isReal()) {
	        result.push((0, _round2.default)(y2.real + b3a, _constants.PRECISION));
	    }
	    if (y3.isReal()) {
	        result.push((0, _round2.default)(y3.real + b3a, _constants.PRECISION));
	    }

	    return result;
	}

	function toCubicPolynomial(points, field) {
	    return [-points[0][field] + 3 * points[1][field] - 3 * points[2][field] + points[3][field], 3 * (points[0][field] - 2 * points[1][field] + points[2][field]), 3 * (-points[0][field] + points[1][field]), points[0][field]];
	}

	function calculateCurveAt(t, field, points) {
	    var t1 = 1 - t;
	    return Math.pow(t1, 3) * points[0][field] + 3 * Math.pow(t1, 2) * t * points[1][field] + 3 * Math.pow(t, 2) * t1 * points[2][field] + Math.pow(t, 3) * points[3][field];
	}

	function curveIntersectionsCount(points, point, bbox) {
	    var polynomial = toCubicPolynomial(points, "x");
	    var roots = solveCubicEquation(polynomial[0], polynomial[1], polynomial[2], polynomial[3] - point.x);
	    var rayIntersection = void 0,
	        intersectsRay = void 0;
	    var count = 0;
	    for (var i = 0; i < roots.length; i++) {
	        rayIntersection = calculateCurveAt(roots[i], "y", points);
	        intersectsRay = close(rayIntersection, point.y) || rayIntersection > point.y;
	        if (intersectsRay && ((roots[i] === 0 || roots[i] === 1) && bbox.bottomRight().x > point.x || 0 < roots[i] && roots[i] < 1)) {
	            count++;
	        }
	    }

	    return count;
	}

	function lineIntersectionsCount(a, b, point) {
	    var intersects = void 0;
	    if (a.x !== b.x) {
	        var minX = Math.min(a.x, b.x);
	        var maxX = Math.max(a.x, b.x);
	        var minY = Math.min(a.y, b.y);
	        var maxY = Math.max(a.y, b.y);
	        var inRange = minX <= point.x && point.x < maxX;

	        if (minY === maxY) {
	            intersects = point.y <= minY && inRange;
	        } else {
	            intersects = inRange && (maxY - minY) * ((a.x - b.x) * (a.y - b.y) > 0 ? point.x - minX : maxX - point.x) / (maxX - minX) + minY - point.y >= 0;
	        }
	    }
	    return intersects ? 1 : 0;
	}

	function close(a, b) {
	    var tolerance = arguments.length <= 2 || arguments[2] === undefined ? _constants.PRECISION : arguments[2];

	    return (0, _round2.default)(Math.abs(a - b), tolerance) === 0;
	}

	function closeOrLess(a, b, tolerance) {
	    return a < b || close(a, b, tolerance);
	}

	function isOutOfEndPoint(endPoint, controlPoint, point) {
	    var angle = deg(Math.atan2(controlPoint.y - endPoint.y, controlPoint.x - endPoint.x));
	    var rotatedPoint = point.clone().rotate(-angle, endPoint);

	    return rotatedPoint.x < endPoint.x;
	}

	function hasRootsInRange(points, point, field, rootField, range) {
	    var polynomial = toCubicPolynomial(points, rootField);
	    var roots = solveCubicEquation(polynomial[0], polynomial[1], polynomial[2], polynomial[3] - point[rootField]);
	    var intersection = void 0;

	    for (var idx = 0; idx < roots.length; idx++) {
	        if (0 <= roots[idx] && roots[idx] <= 1) {
	            intersection = calculateCurveAt(roots[idx], field, points);
	            if (Math.abs(intersection - point[field]) <= range) {
	                return true;
	            }
	        }
	    }
	}

	function deg(radians) {
	    return radians / _constants.DEG_TO_RAD;
	}

	function rad(degrees) {
	    return degrees * _constants.DEG_TO_RAD;
	}

	function ellipseExtremeAngles(center, rx, ry, matrix) {
	    var extremeX = 0;
	    var extremeY = 0;

	    if (matrix) {
	        extremeX = Math.atan2(matrix.c * ry, matrix.a * rx);
	        if (matrix.b !== 0) {
	            extremeY = Math.atan2(matrix.d * ry, matrix.b * rx);
	        }
	    }

	    return {
	        x: extremeX,
	        y: extremeY
	    };
	}

/***/ },

/***/ 166:
/***/ function(module, exports) {

	module.exports = require("./complex-number");

/***/ }

/******/ });