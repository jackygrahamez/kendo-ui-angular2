{"version":3,"sources":["webpack:///webpack/bootstrap ad3edd743ed361bd0e56?6e3f*************************************************************************************","webpack:///external \"@angular/core\"?73d1************************************************************************","webpack:///external \"../../common/settings.component\"?7c8e************************","webpack:///./src/chart/series-item/highlight.component.generated.ts"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;ACtCA,2C;;;;;;;ACAA,6D;;;;;;;;;;;;;;;;;;;;;;ACAA,kCAAsB,EAAe,CAAC;AAEtC,gDAAkC,GAAiC,CAAC;AAGpE;;IAEG;AACH;KAAgE,qDAAiB;KA4E/E,2CAAmB,oBAA0C;SAC3D,kBAAM,WAAW,EAAE,oBAAoB,CAAC,CAAC;SADxB,yBAAoB,GAApB,oBAAoB,CAAsB;KAE7D,CAAC;KAtED;SAAC,YAAK,EAAE;;sEAAA;KAOR;SAAC,YAAK,EAAE;;qEAAA;KAQR;SAAC,YAAK,EAAE;;oEAAA;KAOR;SAAC,YAAK,EAAE;;uEAAA;KAeR;SAAC,YAAK,EAAE;;sEAAA;KAMR;SAAC,YAAK,EAAE;;uEAAA;KAuBR;SAAC,YAAK,EAAE;;sEAAA;KAKV,wCAAC;AAAD,EAAC,CA/E+D,sCAAiB,GA+EhF;AA/EqB,0CAAiC,oCA+EtD","file":"src/chart/series-item/highlight.component.generated.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap ad3edd743ed361bd0e56\n **/","module.exports = require(\"@angular/core\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"@angular/core\"\n ** module id = 13\n ** module chunks = 11 12 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 111 112 113 114 115 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 176 177 184 185 186\n **/","module.exports = require(\"../../common/settings.component\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"../../common/settings.component\"\n ** module id = 128\n ** module chunks = 18 20 22 24 28 30 32 34 36 38 40 42 51 53 57 65 67 69 71 73 75 77 81 83 85 87 89 91 93 95 97 99 101 103 120 122 124 126 128 130 132 138 140 142 144 146 148 150 156 158 160 162 164 166 168\n **/","import { Input } from '@angular/core';\r\nimport { ConfigurationService } from '../../common/configuration.service';\r\nimport { SettingsComponent } from '../../common/settings.component';\r\nimport { Border, HighlightLine, HighlightVisualArgs } from '../../common/property-types';\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport abstract class SeriesHighlightComponentGenerated extends SettingsComponent {\r\n  /**\r\n   * The border of the highlighted Chart series. The color is computed automatically from the base point\r\n   * color.\r\n   *\r\n   * The border option is supported when `series.type` is set to `\"donut\"`, `\"bubble\"`, `\"pie\"`, `\"candlestick\"`, or\r\n   * `\"ohlc\"`.\r\n   */\r\n  @Input() public border: Border;\r\n\r\n  /**\r\n   * The highlight color. Accepts a valid CSS color string, including hex and rgb.\r\n   *\r\n   * The color option is supported when `series.type` is set to `\"donut\"` or `\"pie\"`.\r\n   */\r\n  @Input() public color: string;\r\n\r\n  /**\r\n   * The line of the highlighted Chart series. The color is computed automatically from the base point\r\n   * color.\r\n   *\r\n   * The line option is supported when `series.type` is set to `\"candlestick\"` or `\"ohlc\"`.\r\n   */\r\n  @Input() public line: HighlightLine;\r\n\r\n  /**\r\n   * The opacity of the highlighted points.\r\n   *\r\n   * The opacity option is supported when `series.type` is set to `\"bubble\"`, `\"pie\"`, or `\"donut\"`.\r\n   */\r\n  @Input() public opacity: number;\r\n\r\n  /**\r\n   * A function that can be used to handle the toggling of the points highlight.\r\n   *\r\n   * The available argument fields are:\r\n   *\r\n   * - `preventDefault`&mdash;A function that can be used to prevent the showing of the default highlight overlay.\r\n   * - `show`&mdash;A Boolean value indicating whether the highlight has to be shown.\r\n   * - `visual`&mdash;The visual element that needs to be highlighted.\r\n   * - `category`&mdash;The point category.\r\n   * - `dataItem`&mdash;The point `dataItem`.\r\n   * - `value`&mdash;The point value.\r\n   * - `series`&mdash;The point series.\r\n   */\r\n  @Input() public toggle: Function;\r\n\r\n  /**\r\n   * If set to `true`, the Chart will highlight the series when the user hovers it with the mouse.\r\n   * By default, the highlighting of the Chart series is enabled.\r\n   */\r\n  @Input() public visible: boolean;\r\n\r\n  /**\r\n   * A function that can be used to set custom visual for the point highlight.\r\n   *\r\n   * The available argument fields are:\r\n   *\r\n   * - `createVisual`&mdash;A function that can be used to get the default highlight visual.\r\n   * - `rect`&mdash;The `kendo.geometry.Rect` that defines where the visual has to be rendered.\r\n   * - `visual`&mdash;The visual element that needs to be highlighted.\r\n   * - `options`&mdash;The point options.\r\n   * - `category`&mdash;The point category.\r\n   * - `dataItem`&mdash;The point `dataItem`.\r\n   * - `value`&mdash;The point value.\r\n   * - `sender`&mdash;The Chart instance.\r\n   * - `series`&mdash;The point series.\r\n   * - `stackValue`&mdash;The cumulative point value on the stack. Available only for the stackable series.\r\n   * - `percentage`&mdash;The point value represented as a percentage value. Available only for the Donut, Pie, and\r\n   * 100% stacked charts.\r\n   * - `runningTotal`&mdash;The sum of point values since the last `\"runningTotal\"` summary point. Available for\r\n   * the Waterfall series.\r\n   * - `total`&mdash;The sum of all previous series values. Available for the Waterfall series.\r\n   */\r\n  @Input() public visual: (e: HighlightVisualArgs) => void;\r\n\r\n  constructor(public configurationService: ConfigurationService) {\r\n    super('highlight', configurationService);\r\n  }\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/chart/series-item/highlight.component.generated.ts\n **/"],"sourceRoot":""}