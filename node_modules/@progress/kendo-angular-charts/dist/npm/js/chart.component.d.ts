import { ComponentFactoryResolver, OnDestroy } from '@angular/core';
import { QueryList } from '@angular/core';
import { ElementRef, ViewContainerRef } from '@angular/core';
import { EventEmitter } from '@angular/core';
import 'rxjs/add/operator/combineLatest';
import 'rxjs/add/operator/auditTime';
import { ChartComponentGenerated } from './chart.component.generated';
import { ConfigurationService } from './common/configuration.service';
import { IntlService } from '@progress/kendo-angular-intl';
import { LegendItemClickEvent } from './events/legend-item-click-event';
import { SeriesItemComponent } from './chart/series-item.component';
import { ThemeService } from './common/theme.service';
import { TooltipPopupComponent } from './chart/tooltip/tooltip-popup.component';
import { CrosshairTooltipsContainerComponent } from './chart/tooltip/crosshair-tooltips-container.component';
import '@telerik/kendo-theme-default/styles/packages/charts';
/**
 * The root Chart component.
 *
 * @example
 * ```ts
 * import { Component } from '@angular/core';
 *
 * @@Component({
 *   selector: 'my-app',
 *   template: `
 *     <button (click)="toggleLegend()">Toggle Legend</button>
 *     <button (click)="toggleSeries()">Toggle Series</button>
 *     <kendo-chart>
 *       <kendo-chart-legend [visible]="legendVisible">
 *       </kendo-chart-legend>
 *       <kendo-chart-series>
 *         <kendo-chart-series-item *ngIf="seriesVisible" name="Series #1"
 *                                   type="line" [data]="[1, 2, 3]">
 *         </kendo-chart-series-item>
 *       </kendo-chart-series>
 *     </kendo-chart>
 *   `
 * })
 * class AppComponent {
 *   private legendVisible: boolean = true;
 *   private seriesVisible: boolean = true;
 *
 *   public toggleSeries(): void {
 *     this.seriesVisible = !this.seriesVisible;
 *   }
 *
 *   public toggleLegend(): void {
 *     this.legendVisible = !this.legendVisible;
 *   }
 * }
 *
 * ```
 */
export declare class ChartComponent extends ChartComponentGenerated implements OnDestroy {
    configurationService: ConfigurationService;
    themeService: ThemeService;
    private element;
    private viewContainer;
    private componentResolver;
    private intl;
    /**
     * Fires when an legend item is clicked, before the selected series visibility is toggled.
     * Can be prevented.
     */
    legendItemClick: EventEmitter<LegendItemClickEvent>;
    protected readonly className: string;
    protected seriesComponents: QueryList<SeriesItemComponent>;
    protected tooltipInstance: TooltipPopupComponent;
    protected crossahirTooltips: CrosshairTooltipsContainerComponent;
    private options;
    private theme;
    private subscription;
    private suppressTransitions;
    constructor(configurationService: ConfigurationService, themeService: ThemeService, element: ElementRef, viewContainer: ViewContainerRef, componentResolver: ComponentFactoryResolver, intl: IntlService);
    ngOnDestroy(): void;
    protected init(): void;
    protected bindEvents(): void;
    protected unbindEvents(): void;
    protected refresh(): void;
    private refreshWait();
    private loadTheme();
    private tooltipMouseleave(e);
    private chartMouseleave(e);
}
