module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(250);


/***/ },

/***/ 5:
/***/ function(module, exports) {

	module.exports = require("../../common/constants");

/***/ },

/***/ 24:
/***/ function(module, exports) {

	module.exports = require("../constants");

/***/ },

/***/ 25:
/***/ function(module, exports) {

	module.exports = require("../../common/set-default-options");

/***/ },

/***/ 50:
/***/ function(module, exports) {

	module.exports = require("../../common/deep-extend");

/***/ },

/***/ 55:
/***/ function(module, exports) {

	module.exports = require("../../core");

/***/ },

/***/ 215:
/***/ function(module, exports) {

	module.exports = require("../mixins/plotarea-events-mixin");

/***/ },

/***/ 224:
/***/ function(module, exports) {

	module.exports = require("../utils/filter-series-by-type");

/***/ },

/***/ 245:
/***/ function(module, exports) {

	module.exports = require("./polar-plotarea-base");

/***/ },

/***/ 250:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _polarPlotareaBase = __webpack_require__(245);

	var _polarPlotareaBase2 = _interopRequireDefault(_polarPlotareaBase);

	var _categoricalPlotarea = __webpack_require__(251);

	var _categoricalPlotarea2 = _interopRequireDefault(_categoricalPlotarea);

	var _radarAreaChart = __webpack_require__(252);

	var _radarAreaChart2 = _interopRequireDefault(_radarAreaChart);

	var _radarLineChart = __webpack_require__(253);

	var _radarLineChart2 = _interopRequireDefault(_radarLineChart);

	var _radarBarChart = __webpack_require__(254);

	var _radarBarChart2 = _interopRequireDefault(_radarBarChart);

	var _plotareaEventsMixin = __webpack_require__(215);

	var _plotareaEventsMixin2 = _interopRequireDefault(_plotareaEventsMixin);

	var _core = __webpack_require__(55);

	var _constants = __webpack_require__(24);

	var _filterSeriesByType = __webpack_require__(224);

	var _filterSeriesByType2 = _interopRequireDefault(_filterSeriesByType);

	var _constants2 = __webpack_require__(5);

	var _setDefaultOptions = __webpack_require__(25);

	var _setDefaultOptions2 = _interopRequireDefault(_setDefaultOptions);

	var _deepExtend = __webpack_require__(50);

	var _deepExtend2 = _interopRequireDefault(_deepExtend);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var RadarPlotArea = function (_PolarPlotAreaBase) {
	    _inherits(RadarPlotArea, _PolarPlotAreaBase);

	    function RadarPlotArea() {
	        _classCallCheck(this, RadarPlotArea);

	        return _possibleConstructorReturn(this, (RadarPlotArea.__proto__ || Object.getPrototypeOf(RadarPlotArea)).apply(this, arguments));
	    }

	    _createClass(RadarPlotArea, [{
	        key: 'createPolarAxis',
	        value: function createPolarAxis() {
	            var categoryAxis = new _core.RadarCategoryAxis(this.options.categoryAxis);

	            this.polarAxis = categoryAxis;
	            this.categoryAxis = categoryAxis;
	            this.appendAxis(categoryAxis);
	            this.aggregateCategories();
	        }
	    }, {
	        key: 'valueAxisOptions',
	        value: function valueAxisOptions(defaults) {
	            if (this._hasBarCharts) {
	                (0, _deepExtend2.default)(defaults, {
	                    majorGridLines: { type: _constants2.ARC },
	                    minorGridLines: { type: _constants2.ARC }
	                });
	            }

	            if (this._isStacked100) {
	                (0, _deepExtend2.default)(defaults, {
	                    roundToMajorUnit: false,
	                    labels: { format: "P0" }
	                });
	            }

	            return (0, _deepExtend2.default)(defaults, this.options.valueAxis);
	        }
	    }, {
	        key: 'aggregateCategories',
	        value: function aggregateCategories() {
	            // No separate panes in radar charts
	            _categoricalPlotarea2.default.prototype.aggregateCategories.call(this, this.panes);
	        }
	    }, {
	        key: 'filterSeries',
	        value: function filterSeries(currentSeries) {
	            // Not supported for radar charts
	            return currentSeries;
	        }
	    }, {
	        key: 'createCharts',
	        value: function createCharts() {
	            var series = this.filterVisibleSeries(this.series);
	            var pane = this.panes[0];

	            this.createAreaChart((0, _filterSeriesByType2.default)(series, [_constants.RADAR_AREA]), pane);

	            this.createLineChart((0, _filterSeriesByType2.default)(series, [_constants.RADAR_LINE]), pane);

	            this.createBarChart((0, _filterSeriesByType2.default)(series, [_constants.RADAR_COLUMN]), pane);
	        }
	    }, {
	        key: 'chartOptions',
	        value: function chartOptions(series) {
	            var options = { series: series };
	            var firstSeries = series[0];
	            if (firstSeries) {
	                var filteredSeries = this.filterVisibleSeries(series);
	                var stack = firstSeries.stack;
	                options.isStacked = stack && filteredSeries.length > 1;
	                options.isStacked100 = stack && stack.type === "100%" && filteredSeries.length > 1;

	                if (options.isStacked100) {
	                    this._isStacked100 = true;
	                }
	            }

	            return options;
	        }
	    }, {
	        key: 'createAreaChart',
	        value: function createAreaChart(series, pane) {
	            if (series.length === 0) {
	                return;
	            }

	            var areaChart = new _radarAreaChart2.default(this, this.chartOptions(series));
	            this.appendChart(areaChart, pane);
	        }
	    }, {
	        key: 'createLineChart',
	        value: function createLineChart(series, pane) {
	            if (series.length === 0) {
	                return;
	            }

	            var lineChart = new _radarLineChart2.default(this, this.chartOptions(series));
	            this.appendChart(lineChart, pane);
	        }
	    }, {
	        key: 'createBarChart',
	        value: function createBarChart(series, pane) {
	            if (series.length === 0) {
	                return;
	            }

	            var firstSeries = series[0];
	            var options = this.chartOptions(series);
	            options.gap = firstSeries.gap;
	            options.spacing = firstSeries.spacing;

	            var barChart = new _radarBarChart2.default(this, options);
	            this.appendChart(barChart, pane);

	            this._hasBarCharts = true;
	        }
	    }, {
	        key: 'seriesCategoryAxis',
	        value: function seriesCategoryAxis() {
	            return this.categoryAxis;
	        }
	    }, {
	        key: '_dispatchEvent',
	        value: function _dispatchEvent(chart, e, eventType) {
	            var coords = chart._eventCoordinates(e);
	            var point = new _core.Point(coords.x, coords.y);
	            var category = this.categoryAxis.getCategory(point);
	            var value = this.valueAxis.getValue(point);

	            if (category !== null && value !== null) {
	                chart.trigger(eventType, {
	                    element: e.target,
	                    category: category,
	                    value: value
	                });
	            }
	        }
	    }, {
	        key: 'createCrosshairs',
	        value: function createCrosshairs() {}
	    }]);

	    return RadarPlotArea;
	}(_polarPlotareaBase2.default);

	(0, _deepExtend2.default)(RadarPlotArea.prototype, _plotareaEventsMixin2.default, {
	    appendChart: _categoricalPlotarea2.default.prototype.appendChart,
	    aggregateSeries: _categoricalPlotarea2.default.prototype.aggregateSeries
	});

	(0, _setDefaultOptions2.default)(RadarPlotArea.prototype, {
	    categoryAxis: {
	        categories: []
	    },
	    valueAxis: {}
	});

	exports.default = RadarPlotArea;

/***/ },

/***/ 251:
/***/ function(module, exports) {

	module.exports = require("./categorical-plotarea");

/***/ },

/***/ 252:
/***/ function(module, exports) {

	module.exports = require("../radar-area-chart/radar-area-chart");

/***/ },

/***/ 253:
/***/ function(module, exports) {

	module.exports = require("../radar-line-chart/radar-line-chart");

/***/ },

/***/ 254:
/***/ function(module, exports) {

	module.exports = require("../radar-bar-chart/radar-bar-chart");

/***/ }

/******/ });