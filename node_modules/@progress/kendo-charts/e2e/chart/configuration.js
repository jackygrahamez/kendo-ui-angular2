import 'core-js/es6';
import { drawing } from '@progress/kendo-drawing';
import { $ } from 'e2e-utils';

import { CategoryAxis, NumericAxis, Title } from '../../src/core';

import LineChart from '../../src/chart/line-chart/line-chart';
import BarChart from '../../src/chart/bar-chart/bar-chart';
import AreaChart from '../../src/chart/area-chart/area-chart';
import PieChart from '../../src/chart/pie-chart/pie-chart';
import ScatterChart from '../../src/chart/scatter-charts/scatter-chart';
import ScatterLineChart from '../../src/chart/scatter-charts/scatter-line-chart';
import CategoricalPlotArea from '../../src/chart/plotarea/categorical-plotarea';
import XYPlotArea from '../../src/chart/plotarea/xy-plotarea';
import PiePlotArea from '../../src/chart/plotarea/pie-plotarea';

import { baseTheme } from '../../src/chart/base-theme';
import { deepExtend } from '../../src/common';

import { ok, equal, notEqual, stubMethod } from '../../test/test-helpers';
import { createChart, destroyChart }  from '../test-helpers';

let chart,
    plotArea;

function setupChart(options, themeOptions) {
    chart = createChart(options, themeOptions);

    if (chart._model) {
        plotArea = chart._model.children[1];    
    }
}

function createBarChart(options) {
    setupChart(deepExtend({
        series: [{
            type: "bar",
            data: [1, 2]
        }]
    }, options));
}

function createScatterChart(options) {
    setupChart(deepExtend({
        series: [{
            type: "scatter",
            data: [[1, 1]]
        }]
    }, options));
}

// ------------------------------------------------------------
describe('Category Axis Configuration', () => {
    afterEach(() => {
        destroyChart(chart);
    });

    it("categories are set", () => {
        setupChart({
            categoryAxis: {
                categories: ["Alpha", "Beta", "Charlie"]
            }
        });

        equal(plotArea.categoryAxis.options.categories,
             chart.options.categoryAxis.categories);
    });

    it("category axis is rendered horizontally by default", () => {
        setupChart();
        ok(plotArea.categoryAxis instanceof CategoryAxis);
    });

    it("categories are empty by default", () => {
        setupChart();

        equal(plotArea.categoryAxis.options.categories.length, 0);
    });

    it("global color is applied to line", () => {
        setupChart({
            categoryAxis: {
                color: "#f00"
            }
        });

        equal(plotArea.categoryAxis.options.line.color, "#f00");
    });

    it("line color overrides global color", () => {
        setupChart({
            categoryAxis: {
                color: "#0f0", line: { color: "#f00" }
            }
        });

        equal(plotArea.categoryAxis.options.line.color, "#f00");
    });

    it("global color is applied to labels", () => {
        setupChart({
            categoryAxis: {
                color: "#f00"
            }
        });

        equal(plotArea.categoryAxis.options.labels.color, "#f00");
    });

    it("labels color overrides global color", () => {
        setupChart({
            categoryAxis: {
                color: "#0f0", labels: { color: "#f00" }
            }
        });

        equal(plotArea.categoryAxis.options.labels.color, "#f00");
    });

    it("categoryAxes alias overrides categoryAxis", () => {
        setupChart({
            categoryAxis: {},
            categoryAxes: [{
                flag: true
            }]
        });

        ok(plotArea.categoryAxis.options.flag);
    });

    it("min greater than the category count is ignored", 0, () => {
        setupChart({
            series: [{ type: "line" }],
            categoryAxis: {
                min: 2
            }
        });
    });

    it("min greater than the category count is ignored (with data)", 0, () => {
        setupChart({
            series: [{ type: "line", data: [1, 2, 3, 4, 5] }],
            categoryAxis: {
                min: 2
            }
        });
    });

    it("max greater than the category count is ignored", 0, () => {
        setupChart({
            series: [{ type: "line" }],
            categoryAxis: {
                max: 2
            }
        });
    });

    it("valueAxes alias overrides valueAxis", () => {
        setupChart({
            valueAxis: {},
            valueAxes: [{
                flag: true
            }]
        });

        ok(plotArea.valueAxis.options.flag);
    });

    it("xAxes alias overrides xAxis", () => {
        setupChart({
            xAxis: {},
            xAxes: [{
                flag: true
            }],
            series: [{ type: "scatterLine" }]
        });

        ok(plotArea.axisX.options.flag);
    });

    it("yAxes alias overrides yAxis", () => {
        setupChart({
            yAxis: {},
            yAxes: [{
                flag: true
            }],
            series: [{ type: "scatterLine" }]
        });

        ok(plotArea.axisY.options.flag);
    });
});

// ------------------------------------------------------------
describe('Value Axis Configuration', () => {
    afterEach(() => {
        destroyChart(chart);
    });

    it("default value axis type is numeric", () => {
        setupChart();
        equal(plotArea.valueAxis.options.type, "numeric");
    });

    it("value axis is rendered vertically by default", () => {
        setupChart();
        ok(plotArea.valueAxis instanceof NumericAxis);
    });

    it("global color is applied to line", () => {
        setupChart({
            valueAxis: {
                color: "#f00"
            }
        });

        equal(plotArea.valueAxis.options.line.color, "#f00");
    });

    it("line color overrides global color", () => {
        setupChart({
            valueAxis: {
                color: "#0f0", line: { color: "#f00" }
            }
        });

        equal(plotArea.valueAxis.options.line.color, "#f00");
    });

    it("global color is applied to labels", () => {
        setupChart({
            valueAxis: {
                color: "#f00"
            }
        });

        equal(plotArea.valueAxis.options.labels.color, "#f00");
    });

    it("labels color overrides global color", () => {
        setupChart({
            valueAxis: {
                color: "#0f0", labels: { color: "#f00" }
            }
        });

        equal(plotArea.valueAxis.options.labels.color, "#f00");
    });

    it("global color is applied to title", () => {
        setupChart({
            valueAxis: {
                color: "#f00"
            }
        });

        equal(plotArea.valueAxis.options.title.color, "#f00");
    });

    it("title color overrides global color", () => {
        setupChart({
            valueAxis: {
                color: "#0f0", title: { color: "#f00" }
            }
        });

        equal(plotArea.valueAxis.options.title.color, "#f00");
    });
});

// ------------------------------------------------------------
describe('Axis Configuration / Scatter Chart', () => {
    afterEach(() => {
        destroyChart(chart);
    });

    it("xAxis settings are applied to primary X Axis", () => {
        createScatterChart({ xAxis: { min: 100 } });
        equal(plotArea.axisX.options.min, 100);
    });

    it("xAxis can't be set to vertical", () => {
        createScatterChart({ xAxis: { vertical: true } });
        equal(plotArea.axisX.options.vertical, false);
    });

    it("yAxis settings are applied to primary Y Axis", () => {
        createScatterChart({ yAxis: { min: 100 } });
        equal(plotArea.axisY.options.min, 100);
    });

    it("yAxis can't be set to horizontal", () => {
        createScatterChart({ yAxis: { vertical: false } });
        equal(plotArea.axisY.options.vertical, true);
    });
});

// ------------------------------------------------------------
describe('Axis defaults', () => {
    afterEach(() => {
        destroyChart(chart);
    });

    it("axisDefaults are applied to categoryAxis", () => {
        setupChart({
            axisDefaults: {
                flag: true
            }
        });

        ok(chart.options.categoryAxis.flag === true);
    });

    it("axisDefaults.categoryAxis are applied to categoryAxis", () => {
        setupChart({
            axisDefaults: {
                categoryAxis: {
                    flag: true
                }
            }
        });

        ok(chart.options.categoryAxis.flag === true);
    });

    it("axisDefaults options are applied to categoryAxes", () => {
        setupChart({
            axisDefaults: {
                flag: true
            },
            categoryAxes: [{ local: true }]
        });

        ok(plotArea.categoryAxis.options.flag && plotArea.categoryAxis.options.local);
    });

    it("axisDefaults.categoryAxis are applied to categoryAxes", () => {
        setupChart({
            axisDefaults: {
                categoryAxis: {
                    flag: true
                }
            },
            categoryAxes: [{ local: true }]
        });

        ok(plotArea.categoryAxis.options.flag && plotArea.categoryAxis.options.local);
    });

    it("axisDefaults are applied to valueAxis", () => {
        setupChart({
            axisDefaults: {
                flag: true
            }
        });

        ok(chart.options.valueAxis.flag === true);
    });

    it("axisDefaults.valueAxis are applied to valueAxis", () => {
        setupChart({
            axisDefaults: {
                valueAxis: {
                    flag: true
                }
            }
        });

        ok(chart.options.valueAxis.flag === true);
    });

    it("axisDefaults are applied to all value axes", () => {
        setupChart({
            axisDefaults: {
                flag: true
            },
            valueAxis: [{ }, { name: "secondary" }]
        });

        ok(chart.options.valueAxis[0].flag === true);
        ok(chart.options.valueAxis[1].flag === true);
    });

    it("axisDefaults options are applied to valueAxes", () => {
        setupChart({
            axisDefaults: {
                flag: true
            },
            valueAxes: [{ local: true }]
        });

        ok(plotArea.valueAxis.options.flag && plotArea.valueAxis.options.local);
    });

    it("axisDefaults.valueAxis options are applied to valueAxes", () => {
        setupChart({
            axisDefaults: {
                valueAxis: {
                    flag: true
                }
            },
            valueAxes: [{ local: true }]
        });

        ok(plotArea.valueAxis.options.flag && plotArea.valueAxis.options.local);
    });

    it("axisDefaults are applied to xAxis", () => {
        setupChart({
            axisDefaults: {
                flag: true
            }
        });

        ok(chart.options.xAxis.flag === true);
    });

    it("axisDefaults are applied to yAxis", () => {
        setupChart({
            axisDefaults: {
                flag: true
            }
        });

        ok(chart.options.yAxis.flag === true);
    });

    it("axisDefaults options are applied to xAxes", () => {
        setupChart({
            axisDefaults: {
                flag: true
            },
            xAxes: [{ local: true }],
            series: [{ type: "scatterLine" }]
        });

        ok(plotArea.axisX.options.flag && plotArea.axisX.options.local);
    });

    it("axisDefaults options are applied to yAxes", () => {
        setupChart({
            axisDefaults: {
                flag: true
            },
            yAxes: [{ local: true }],
            series: [{ type: "scatterLine" }]
        });

        ok(plotArea.axisY.options.flag && plotArea.axisY.options.local);
    });

    it("categoryAxis settings override axisDefaults settings", () => {
        setupChart({
            axisDefaults: {
                flag: false
            },
            categoryAxis: {
                flag: true
            }
        });

        ok(chart.options.categoryAxis.flag === true);
    });

    it("valueAxis settings override axisDefaults settings", () => {
        setupChart({
            axisDefaults: {
                flag: false
            },
            valueAxis: {
                flag: true
            }
        });

        ok(chart.options.valueAxis.flag === true);
    });

    it("xAxis settings override axisDefaults settings", () => {
        setupChart({
            axisDefaults: {
                flag: false
            },
            xAxis: {
                flag: true
            }
        });

        ok(chart.options.xAxis.flag === true);
    });

    it("yAxis settings override axisDefaults settings", () => {
        setupChart({
            axisDefaults: {
                flag: false
            },
            yAxis: {
                flag: true
            }
        });

        ok(chart.options.yAxis.flag === true);
    });

    it("axisDefaults override theme base", () => {
        const themeOptions = $.extend(true, {}, baseTheme(), {
            categoryAxis: {
                flag: true
            }
        });

        setupChart({
            theme: "test",
            axisDefaults: {
                flag: false
            }
        }, themeOptions);

        ok(chart.options.categoryAxis.flag === false);
    });

    it("axisDefaults override theme with specific type", () => {
        const themeOptions = $.extend(true, {}, baseTheme(), {
            axisDefaults: {
                categoryAxis: {
                    flag: true
                }
            }
        });

        setupChart({
            theme: "test",
            categoryAxis: {
                flag: false
            }
        }, themeOptions);

        ok(chart.options.categoryAxis.flag === false);
    });
});

// ------------------------------------------------------------
const plotAreaConfig = [{
        series: "bar",
        plotArea: CategoricalPlotArea,
        chart: BarChart
    }, {
        series: "column",
        plotArea: CategoricalPlotArea,
        chart: BarChart
    }, {
        series: "line",
        plotArea: CategoricalPlotArea,
        chart: LineChart
    }, {
        series: "verticalLine",
        plotArea: CategoricalPlotArea,
        chart: LineChart
    }, {
        series: "area",
        plotArea: CategoricalPlotArea,
        chart: AreaChart
    }, {
        series: "verticalArea",
        plotArea: CategoricalPlotArea,
        chart: AreaChart
    }, {
        series: "pie",
        plotArea: PiePlotArea,
        chart: PieChart
    }, {
        series: "scatter",
        plotArea: XYPlotArea,
        chart: ScatterChart
    }, {
        series: "scatterLine",
        plotArea: XYPlotArea,
        chart: ScatterLineChart
    }
];

describe('Plot Area', () => {

    it("Initialization and chart creation", () => {
        for (let i = 0; i < plotAreaConfig.length; i++) {
            const config = plotAreaConfig[i];

            setupChart({
                series: [{ type: config.series }]
            });

            ok( plotArea instanceof config.plotArea, "PlotArea type for '" + config.series + "' series");

            ok( plotArea.charts[0] instanceof config.chart, "Series of type '" + config.series + "' added to plot area");

            destroyChart(chart);
        }
    });
});

// ------------------------------------------------------------
describe('Series defaults', () => {
    afterEach(() => {
        destroyChart(chart);
    });

    it("default type is set to column", () => {
        setupChart({
            series: [{ }]
        });

        equal(chart.options.series[0].type, "column");
    });

    it("type is set", () => {
        setupChart({
            seriesDefaults: {
                type: "line"
            },
            series: [{ }]
        });

        equal(chart.options.series[0].type, "line");
    });

    it("tooltip is set", () => {
        setupChart({
            seriesDefaults: {
                tooltip: {
                    flag: true
                }
            },
            series: [{ }]
        });

        ok(chart.options.series[0].tooltip.flag);
    });

    it("tooltip override tooltip options", () => {
        setupChart({
            seriesDefaults: {
                tooltip: {
                    flag: true
                }
            },
            series: [{ }],
            tooltip: {
                flag: false
            }
        });

        ok(chart.options.series[0].tooltip.flag);
    });

    it("series colors are set", () => {
        setupChart({
            seriesColors: ["#fff", "#f00"],
            series: [{}, {}]
        });

        equal(chart.options.series[0].color, "#fff");
        equal(chart.options.series[1].color, "#f00");
    });

    it("series colors are preserved", () => {
        setupChart({
            seriesColors: ["#fff"],
            series: [{ color: "#000" }]
        });

        equal(chart.options.series[0].color, "#000");
    });

    it("series colors are reused", () => {
        setupChart({
            seriesColors: ["#f00"],
            series: [{}, {}]
        });

        equal(chart.options.series[0].color, "#f00");
        equal(chart.options.series[1].color, "#f00");
    });

    it("bar series defaults are applied", () => {
        setupChart({
            seriesDefaults: {
                bar: {
                    gap: 1
                }
            },
            series: [{ type: "bar" }]
        });

        equal(chart.options.series[0].gap, 1);
    });

    it("bar series defaults are not applied to other series", () => {
        setupChart({
            seriesDefaults: {
                bar: {
                    gap: 1
                }
            },
            series: [{ type: "line" }]
        });

        notEqual(chart.options.series[0].gap, 1);
    });

    it("bar series defaults are not copied in series", () => {
        setupChart({
            seriesDefaults: {
                bar: { }
            },
            series: [{ type: "bar" }]
        });

        ok(typeof(chart.options.series[0].bar) === "undefined");
    });

    it("column series defaults are applied", () => {
        setupChart({
            seriesDefaults: {
                column: {
                    gap: 1
                }
            },
            series: [{ type: "column" }]
        });

        equal(chart.options.series[0].gap, 1);
    });

    it("column series defaults are applied to series with default type", () => {
        setupChart({
            seriesDefaults: {
                column: {
                    gap: 1
                }
            },
            series: [{}]
        });

        equal(chart.options.series[0].gap, 1);
    });

    it("column series defaults are not applied to other series", () => {
        setupChart({
            seriesDefaults: {
                bar: {
                    gap: 1
                }
            },
            series: [{ type: "line" }]
        });

        notEqual(chart.options.series[0].gap, 1);
    });

    it("column series defaults are not copied in series", () => {
        setupChart({
            seriesDefaults: {
                column: { }
            },
            series: [{ type: "column" }]
        });

        ok(typeof(chart.options.series[0].column) === "undefined");
    });

    it("line series defaults are applied", () => {
        setupChart({
            seriesDefaults: {
                line: {
                    width: 2
                }
            },
            series: [{ type: "line" }]
        });

        equal(chart.options.series[0].width, 2);
    });

    it("line series defaults are not applied to other series", () => {
        setupChart({
            seriesDefaults: {
                line: {
                    width: 1
                }
            },
            series: [{ type: "bar" }]
        });

        notEqual(chart.options.series[0].width, 1);
    });

    it("line series defaults are not copied in series", () => {
        setupChart({
            seriesDefaults: {
                line: { }
            },
            series: [{ type: "line" }]
        });

        ok(typeof(chart.options.series[0].line) === "undefined");
    });

    it("verticalLine series defaults are applied", () => {
        setupChart({
            seriesDefaults: {
                verticalLine: {
                    width: 2
                }
            },
            series: [{ type: "verticalLine" }]
        });

        equal(chart.options.series[0].width, 2);
    });

    it("verticalLine series defaults are not applied to other series", () => {
        setupChart({
            seriesDefaults: {
                verticalLine: {
                    width: 1
                }
            },
            series: [{ type: "bar" }]
        });

        notEqual(chart.options.series[0].width, 1);
    });

    it("verticalLine series defaults are not copied in series", () => {
        setupChart({
            seriesDefaults: {
                verticalLine: { }
            },
            series: [{ type: "verticalLine" }]
        });

        ok(typeof(chart.options.series[0].verticalLine) === "undefined");
    });

    it("area series defaults are applied", () => {
        setupChart({
            seriesDefaults: {
                area: {
                    width: 2
                }
            },
            series: [{ type: "area" }]
        });

        equal(chart.options.series[0].width, 2);
    });

    it("area series defaults are not applied to other series", () => {
        setupChart({
            seriesDefaults: {
                area: {
                    width: 1
                }
            },
            series: [{ type: "bar" }]
        });

        notEqual(chart.options.series[0].width, 1);
    });

    it("area series defaults are not copied in series", () => {
        setupChart({
            seriesDefaults: {
                area: { }
            },
            series: [{ type: "area" }]
        });

        ok(typeof(chart.options.series[0].area) === "undefined");
    });

    it("verticalArea series defaults are applied", () => {
        setupChart({
            seriesDefaults: {
                verticalArea: {
                    width: 2
                }
            },
            series: [{ type: "verticalArea" }]
        });

        equal(chart.options.series[0].width, 2);
    });

    it("verticalArea series defaults are not applied to other series", () => {
        setupChart({
            seriesDefaults: {
                verticalArea: {
                    width: 1
                }
            },
            series: [{ type: "bar" }]
        });

        notEqual(chart.options.series[0].width, 1);
    });

    it("verticalArea series defaults are not copied in series", () => {
        setupChart({
            seriesDefaults: {
                verticalArea: { }
            },
            series: [{ type: "verticalArea" }]
        });

        ok(typeof(chart.options.series[0].verticalArea) === "undefined");
    });

    it("pie series defaults are applied", () => {
        setupChart({
            seriesDefaults: {
                pie: {
                    width: 2
                }
            },
            series: [{ type: "pie" }]
        });

        equal(chart.options.series[0].width, 2);
    });

    it("pie series defaults are not applied to other series", () => {
        setupChart({
            seriesDefaults: {
                pie: {
                    width: 1
                }
            },
            series: [{ type: "bar" }]
        });

        notEqual(chart.options.series[0].width, 1);
    });

    it("pie series defaults are not copied in series", () => {
        setupChart({
            seriesDefaults: {
                pie: { }
            },
            series: [{ type: "pie" }]
        });

        ok(typeof(chart.options.series[0].pie) === "undefined");
    });

    it("scatter series defaults are applied", () => {
        setupChart({
            seriesDefaults: {
                scatter: {
                    width: 2
                }
            },
            series: [{ type: "scatter" }]
        });

        equal(chart.options.series[0].width, 2);
    });

    it("scatter series defaults are not applied to other series", () => {
        setupChart({
            seriesDefaults: {
                scatter: {
                    width: 1
                }
            },
            series: [{ type: "bar" }]
        });

        notEqual(chart.options.series[0].width, 1);
    });

    it("scatter series defaults are not copied in series", () => {
        setupChart({
            seriesDefaults: {
                scatter: { }
            },
            series: [{ type: "scatter" }]
        });

        ok(typeof(chart.options.series[0].scatter) === "undefined");
    });

    it("scatterLine series defaults are applied", () => {
        setupChart({
            seriesDefaults: {
                scatterLine: {
                    width: 2
                }
            },
            series: [{ type: "scatterLine" }]
        });

        equal(chart.options.series[0].width, 2);
    });

    it("scatterLine series defaults are not applied to other series", () => {
        setupChart({
            seriesDefaults: {
                scatterLine: {
                    width: 1
                }
            },
            series: [{ type: "bar" }]
        });

        notEqual(chart.options.series[0].width, 1);
    });

    it("scatterLine series defaults are not copied in series", () => {
        setupChart({
            seriesDefaults: {
                scatterLine: { }
            },
            series: [{ type: "scatterLine" }]
        });

        ok(typeof(chart.options.series[0].scatterLine) === "undefined");
    });
});

// ------------------------------------------------------------
describe('Title', () => {
    afterEach(() => {
        destroyChart(chart);
    });

    it("text is set", () => {
        setupChart({
            title: {
                text: "My Title"
            }
        });

        equal(chart._model.children[0].options.text, "My Title");
    });

    it("text can be set directly", () => {
        setupChart({
            title: "My Title"
        });

        equal(chart._model.children[0].options.text, "My Title");
    });

    it("font is set", (done) => {
        setupChart({
            title: {
                text: "My Title",
                font: "10pt Comic Sans"
            },
            render: function() {
                equal(chart._model.children[0].options.font, "10pt Comic Sans");
                done();
            }
        });        
    });

    it("not created if no text is set", () => {
        setupChart({
            title: {
                text: ""
            }
        });
        ok(!(chart._model.children[0] instanceof Title));
    });

    it("not created if no visible is false", () => {
        setupChart({
            title: {
                text: "Title",
                visible: false
            }
        });
        ok(!(chart._model.children[0] instanceof Title));
    });
});

// ------------------------------------------------------------
describe('Size', () => {

    afterEach(() => {
        destroyChart(chart);
    });

    it("picks width from container", () => {
        setupChart();
        ok(chart._model.options.width >= $(chart.element).width());
    });

    it("picks height from container", () => {
        setupChart();
        equal(chart._model.options.height, $(chart.element).height());
    });

    it("picks width from container on refresh", () => {
        setupChart();
        $(chart.element).css("width", "200px");
        chart.refresh();

        equal(chart._model.options.width, 200);
    });

    it("picks width from container on redraw", () => {
        setupChart();
        $(chart.element).css("width", "200px");
        chart.redraw();

        equal(chart._model.options.width, 200);
    });

    it("picks height from container on refresh", () => {
        setupChart();
        $(chart.element).css("height", "200px");
        chart.refresh();

        equal(chart._model.options.height, 200);
    });

    it("picks height from container on redraw", () => {
        setupChart();
        $(chart.element).css("height", "200px");
        chart.redraw();

        equal(chart._model.options.height, 200);
    });

    it("applies set width", () => {
        setupChart({ chartArea: { width: 200, height: 200 }});

        equal(chart._model.options.width, 200);
    });

    it("applies set height", () => {
        setupChart({ chartArea: { width: 200, height: 200 }});

        equal(chart._model.options.height, 200);
    });

    it("maintains set width after refresh", () => {
        setupChart({ chartArea: { width: 200, height: 200 }});
        chart.refresh();

        equal(chart._model.options.width, 200);
    });

    it("maintains set height after refresh", () => {
        setupChart({ chartArea: { width: 200, height: 200 }});
        chart.refresh();

        equal(chart._model.options.height, 200);
    });

    it("uses default width when none is available", () => {
        try {
            $(document.body).hide();
            setupChart();

            equal(chart._model.options.width, 600);
        } finally {
            $(document.body).show();
        }
    });

    it("uses default height when none is available", () => {
        try {
            $(document.body).hide();
            setupChart();

            equal(chart._model.options.height, 400);
        } finally {
            $(document.body).show();
        }
    });

    it("sets width on rootElement", () => {
        setupChart({ chartArea: { width: 200 } });

        equal(chart._model.options.width, 200);
    });

    it("sets height on rootElement", () => {
        setupChart({ chartArea: { height: 200 } });

        equal(chart._model.options.height, 200);
    });
});

// ------------------------------------------------------------
describe('Themes', () => {

    function setup(options, themeOptions) {
        const testTheme = $.extend(true, {}, baseTheme(), {
            flag: true,
            seriesColors: ["#f00", "#cf0"],
            seriesDefaults: {
                seriesDefaultsFlag: true,
                scatter: {
                    flag: false
                }
            }
        }, themeOptions);
        setupChart(options, testTheme);
    }

    afterEach(() => {
        destroyChart(chart);
    });

    it("applies theme", () => {
        setup();

        ok(chart.options.flag);
    });

    it("overrides series colors", () => {
        setup({
            series: [{}, {}]
        });

        equal(chart.options.series[0].color, "#f00");
        equal(chart.options.series[1].color, "#cf0");
    });

    it("seriesDefaults overrides theme series settings", () => {
        setup({
            seriesDefaults: {
                overlay: {
                    gradient: "foo"
                }
            },
            series: [{}, {}]
        });

        equal(chart.options.series[0].overlay.gradient, "foo");
    });

    it("applies theme seriesDefaults", () => {
        setup({
            series: [{}, {}]
        });

        ok(chart.options.series[0].seriesDefaultsFlag);
    });

    it("applies theme seriesDefaults with specific type", () => {
        setup({
            seriesDefaults: {
                type: "scatter"
            },
            series: [{}, {}]
        });

        ok(chart.options.series[0].flag === false);
    });

    it("seriesDefaults overrides theme seriesDefaults", () => {
        setup({
            seriesDefaults: {
                type: "scatter",
                scatter: {
                    flag: true
                }
            },
            series: [{}, {}]
        });

        ok(chart.options.series[0].flag);
    });

    it("theme options are applied to categoryAxes", () => {

        setup({
            categoryAxes: [{ local: true }]
        }, {
            categoryAxis: {
                flag: true
            }
        });

        ok(plotArea.categoryAxis.options.flag && plotArea.categoryAxis.options.local);
    });

    it("theme options are applied to valueAxes", () => {
        setup({
            valueAxes: [{ local: true }]
        }, {
            valueAxis: {
                flag: true
            }
        });

        ok(plotArea.valueAxis.options.flag && plotArea.valueAxis.options.local);
    });

    it("theme options are applied to xAxes", () => {
        setup({
            xAxes: [{ local: true }],
            series: [{ type: "scatterLine" }]
        }, {
            xAxis: {
                flag: true
            }
        });

        ok(plotArea.axisX.options.flag && plotArea.axisX.options.local);
    });

    it("theme options are applied to yAxes", () => {
        setup({
            yAxes: [{ local: true }],
            series: [{ type: "scatterLine" }]
        }, {
            yAxis: {
                flag: true
            }
        });

        ok(plotArea.axisY.options.flag && plotArea.axisY.options.local);
    });
});

// ------------------------------------------------------------
describe('Tooltip', () => {
    afterEach(() => {
        destroyChart(chart);
    });

    it("created when visible", () => {
        setupChart({
            tooltip: {
                visible: true
            }
        });

        ok(typeof chart._tooltip !== "undefined");
    });

    it("sets format", () => {
        setupChart({
            tooltip: {
                visible: true,
                format: "{0}%"
            }
        });

        equal(chart._tooltip.options.format, "{0}%");
    });

    it("sets font", (done) => {
        setupChart({ 
            tooltip: {
                visible: true,
                font: "100px Verdana"
            },
            render: function() {
                equal(this._tooltip.options.font, "100px Verdana");
                done();
            }
        });
    });

    it("sets background", () => {
        setupChart({
            tooltip: {
                visible: true,
                background: "red"
            }
        });

        equal(chart._tooltip.options.background, "red");
    });
});

// ------------------------------------------------------------
describe('Transitions', () => {
    let animations;
    function logAnimations(callback) {
        animations = 0;
        stubMethod(drawing.Animation.prototype, "play",
            function() {
                animations++;
            }, callback
        );
    }

    afterEach(() => {
        destroyChart(chart);
    });

    it("initial transitions are enabled by default", () => {
        logAnimations(
            function() {
                createBarChart();
                ok(animations > 0);
            }
        );
    });

    it("transitions can be disabled (transitions: false)", () => {
        logAnimations(
            function() {
                createBarChart({
                    transitions: false
                });

                equal(animations, 0);
            }
        );
    });
});

// ------------------------------------------------------------
describe('Misc', () => {
    afterEach(() => {
        destroyChart(chart);
    });

    it("renders k-chart class", () => {
        setupChart({ theme: "test" });

        ok($("#container").hasClass("k-chart"));
    });
});
