import { ConfigurationService } from '../../common/configuration.service';
import { SettingsComponent } from '../../common/settings.component';
import { Border, HighlightLine, HighlightVisualArgs } from '../../common/property-types';
/**
 * @hidden
 */
export declare abstract class SeriesHighlightComponentGenerated extends SettingsComponent {
    configurationService: ConfigurationService;
    /**
     * The border of the highlighted Chart series. The color is computed automatically from the base point
     * color.
     *
     * The border option is supported when `series.type` is set to `"donut"`, `"bubble"`, `"pie"`, `"candlestick"`, or
     * `"ohlc"`.
     */
    border: Border;
    /**
     * The highlight color. Accepts a valid CSS color string, including hex and rgb.
     *
     * The color option is supported when `series.type` is set to `"donut"` or `"pie"`.
     */
    color: string;
    /**
     * The line of the highlighted Chart series. The color is computed automatically from the base point
     * color.
     *
     * The line option is supported when `series.type` is set to `"candlestick"` or `"ohlc"`.
     */
    line: HighlightLine;
    /**
     * The opacity of the highlighted points.
     *
     * The opacity option is supported when `series.type` is set to `"bubble"`, `"pie"`, or `"donut"`.
     */
    opacity: number;
    /**
     * A function that can be used to handle the toggling of the points highlight.
     *
     * The available argument fields are:
     *
     * - `preventDefault`&mdash;A function that can be used to prevent the showing of the default highlight overlay.
     * - `show`&mdash;A Boolean value indicating whether the highlight has to be shown.
     * - `visual`&mdash;The visual element that needs to be highlighted.
     * - `category`&mdash;The point category.
     * - `dataItem`&mdash;The point `dataItem`.
     * - `value`&mdash;The point value.
     * - `series`&mdash;The point series.
     */
    toggle: Function;
    /**
     * If set to `true`, the Chart will highlight the series when the user hovers it with the mouse.
     * By default, the highlighting of the Chart series is enabled.
     */
    visible: boolean;
    /**
     * A function that can be used to set custom visual for the point highlight.
     *
     * The available argument fields are:
     *
     * - `createVisual`&mdash;A function that can be used to get the default highlight visual.
     * - `rect`&mdash;The `kendo.geometry.Rect` that defines where the visual has to be rendered.
     * - `visual`&mdash;The visual element that needs to be highlighted.
     * - `options`&mdash;The point options.
     * - `category`&mdash;The point category.
     * - `dataItem`&mdash;The point `dataItem`.
     * - `value`&mdash;The point value.
     * - `sender`&mdash;The Chart instance.
     * - `series`&mdash;The point series.
     * - `stackValue`&mdash;The cumulative point value on the stack. Available only for the stackable series.
     * - `percentage`&mdash;The point value represented as a percentage value. Available only for the Donut, Pie, and
     * 100% stacked charts.
     * - `runningTotal`&mdash;The sum of point values since the last `"runningTotal"` summary point. Available for
     * the Waterfall series.
     * - `total`&mdash;The sum of all previous series values. Available for the Waterfall series.
     */
    visual: (e: HighlightVisualArgs) => void;
    constructor(configurationService: ConfigurationService);
}
