module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(249);


/***/ },

/***/ 24:
/***/ function(module, exports) {

	module.exports = require("../constants");

/***/ },

/***/ 55:
/***/ function(module, exports) {

	module.exports = require("../../core");

/***/ },

/***/ 77:
/***/ function(module, exports) {

	module.exports = require("../../common/get-spacing");

/***/ },

/***/ 213:
/***/ function(module, exports) {

	module.exports = require("./plotarea-base");

/***/ },

/***/ 214:
/***/ function(module, exports) {

	module.exports = require("../axis-group-range-tracker");

/***/ },

/***/ 249:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _plotareaBase = __webpack_require__(213);

	var _plotareaBase2 = _interopRequireDefault(_plotareaBase);

	var _axisGroupRangeTracker = __webpack_require__(214);

	var _axisGroupRangeTracker2 = _interopRequireDefault(_axisGroupRangeTracker);

	var _core = __webpack_require__(55);

	var _constants = __webpack_require__(24);

	var _getSpacing = __webpack_require__(77);

	var _getSpacing2 = _interopRequireDefault(_getSpacing);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var DEFAULT_PADDING = 0.15;

	var PolarPlotAreaBase = function (_PlotAreaBase) {
	    _inherits(PolarPlotAreaBase, _PlotAreaBase);

	    function PolarPlotAreaBase() {
	        _classCallCheck(this, PolarPlotAreaBase);

	        return _possibleConstructorReturn(this, (PolarPlotAreaBase.__proto__ || Object.getPrototypeOf(PolarPlotAreaBase)).apply(this, arguments));
	    }

	    _createClass(PolarPlotAreaBase, [{
	        key: 'initFields',
	        value: function initFields() {
	            this.valueAxisRangeTracker = new _axisGroupRangeTracker2.default();
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            this.addToLegend(this.series);
	            this.createPolarAxis();
	            this.createCharts();
	            this.createValueAxis();
	        }
	    }, {
	        key: 'alignAxes',
	        value: function alignAxes() {
	            var axis = this.valueAxis;
	            var range = axis.range();
	            var crossingValue = axis.options.reverse ? range.max : range.min;
	            var slot = axis.getSlot(crossingValue);
	            var center = this.polarAxis.getSlot(0).center;
	            var axisBox = axis.box.translate(center.x - slot.x1, center.y - slot.y1);

	            axis.reflow(axisBox);
	        }
	    }, {
	        key: 'createValueAxis',
	        value: function createValueAxis() {
	            var tracker = this.valueAxisRangeTracker;
	            var defaultRange = tracker.query();
	            var axisOptions = this.valueAxisOptions({
	                roundToMajorUnit: false,
	                zIndex: -1
	            });
	            var axisType = void 0,
	                axisDefaultRange = void 0;

	            if (axisOptions.type === _constants.LOGARITHMIC) {
	                axisType = _core.RadarLogarithmicAxis;
	                axisDefaultRange = { min: 0.1, max: 1 };
	            } else {
	                axisType = _core.RadarNumericAxis;
	                axisDefaultRange = { min: 0, max: 1 };
	            }

	            var range = tracker.query(name) || defaultRange || axisDefaultRange;

	            if (range && defaultRange) {
	                range.min = Math.min(range.min, defaultRange.min);
	                range.max = Math.max(range.max, defaultRange.max);
	            }

	            var valueAxis = new axisType(range.min, range.max, axisOptions);

	            this.valueAxis = valueAxis;
	            this.appendAxis(valueAxis);
	        }
	    }, {
	        key: 'reflowAxes',
	        value: function reflowAxes() {
	            var options = this.options.plotArea;
	            var valueAxis = this.valueAxis;
	            var polarAxis = this.polarAxis;
	            var box = this.box;

	            var defaultPadding = Math.min(box.width(), box.height()) * DEFAULT_PADDING;
	            var padding = (0, _getSpacing2.default)(options.padding || {}, defaultPadding);
	            var axisBox = box.clone().unpad(padding);
	            var valueAxisBox = axisBox.clone().shrink(0, axisBox.height() / 2);

	            polarAxis.reflow(axisBox);
	            valueAxis.reflow(valueAxisBox);
	            var heightDiff = valueAxis.lineBox().height() - valueAxis.box.height();
	            valueAxis.reflow(valueAxis.box.unpad({ top: heightDiff }));

	            this.axisBox = axisBox;
	            this.alignAxes(axisBox);
	        }
	    }, {
	        key: 'backgroundBox',
	        value: function backgroundBox() {
	            return this.box;
	        }
	    }]);

	    return PolarPlotAreaBase;
	}(_plotareaBase2.default);

	exports.default = PolarPlotAreaBase;

/***/ }

/******/ });