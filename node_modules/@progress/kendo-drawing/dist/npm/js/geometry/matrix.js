module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(191);


/***/ },

/***/ 3:
/***/ function(module, exports) {

	module.exports = require("../common/defined");

/***/ },

/***/ 153:
/***/ function(module, exports) {

	module.exports = require("../common/round");

/***/ },

/***/ 154:
/***/ function(module, exports) {

	module.exports = require("./math/rad");

/***/ },

/***/ 191:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _defined = __webpack_require__(3);

	var _defined2 = _interopRequireDefault(_defined);

	var _round2 = __webpack_require__(153);

	var _round3 = _interopRequireDefault(_round2);

	var _rad = __webpack_require__(154);

	var _rad2 = _interopRequireDefault(_rad);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Matrix = function () {
	    function Matrix() {
	        var a = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];
	        var b = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];
	        var c = arguments.length <= 2 || arguments[2] === undefined ? 0 : arguments[2];
	        var d = arguments.length <= 3 || arguments[3] === undefined ? 0 : arguments[3];
	        var e = arguments.length <= 4 || arguments[4] === undefined ? 0 : arguments[4];
	        var f = arguments.length <= 5 || arguments[5] === undefined ? 0 : arguments[5];

	        _classCallCheck(this, Matrix);

	        this.a = a;
	        this.b = b;
	        this.c = c;
	        this.d = d;
	        this.e = e;
	        this.f = f;
	    }

	    _createClass(Matrix, [{
	        key: 'multiplyCopy',
	        value: function multiplyCopy(matrix) {
	            return new Matrix(this.a * matrix.a + this.c * matrix.b, this.b * matrix.a + this.d * matrix.b, this.a * matrix.c + this.c * matrix.d, this.b * matrix.c + this.d * matrix.d, this.a * matrix.e + this.c * matrix.f + this.e, this.b * matrix.e + this.d * matrix.f + this.f);
	        }
	    }, {
	        key: 'invert',
	        value: function invert() {
	            var a = this.a;
	            var b = this.b;
	            var d = this.c;
	            var e = this.d;
	            var g = this.e;
	            var h = this.f;

	            var det = a * e - b * d;

	            if (det === 0) {
	                return null;
	            }

	            return new Matrix(e / det, -b / det, -d / det, a / det, (d * h - e * g) / det, (b * g - a * h) / det);
	        }
	    }, {
	        key: 'clone',
	        value: function clone() {
	            return new Matrix(this.a, this.b, this.c, this.d, this.e, this.f);
	        }
	    }, {
	        key: 'equals',
	        value: function equals(other) {
	            if (!other) {
	                return false;
	            }

	            return this.a === other.a && this.b === other.b && this.c === other.c && this.d === other.d && this.e === other.e && this.f === other.f;
	        }
	    }, {
	        key: 'round',
	        value: function round(precision) {
	            this.a = (0, _round3.default)(this.a, precision);
	            this.b = (0, _round3.default)(this.b, precision);
	            this.c = (0, _round3.default)(this.c, precision);
	            this.d = (0, _round3.default)(this.d, precision);
	            this.e = (0, _round3.default)(this.e, precision);
	            this.f = (0, _round3.default)(this.f, precision);

	            return this;
	        }
	    }, {
	        key: 'toArray',
	        value: function toArray(precision) {
	            var result = [this.a, this.b, this.c, this.d, this.e, this.f];

	            if ((0, _defined2.default)(precision)) {
	                for (var i = 0; i < result.length; i++) {
	                    result[i] = (0, _round3.default)(result[i], precision);
	                }
	            }

	            return result;
	        }
	    }, {
	        key: 'toString',
	        value: function toString(precision) {
	            var separator = arguments.length <= 1 || arguments[1] === undefined ? "," : arguments[1];

	            return this.toArray(precision).join(separator);
	        }
	    }], [{
	        key: 'translate',
	        value: function translate(x, y) {
	            return new Matrix(1, 0, 0, 1, x, y);
	        }
	    }, {
	        key: 'unit',
	        value: function unit() {
	            return new Matrix(1, 0, 0, 1, 0, 0);
	        }
	    }, {
	        key: 'rotate',
	        value: function rotate(angle, x, y) {
	            var matrix = new Matrix();
	            matrix.a = Math.cos((0, _rad2.default)(angle));
	            matrix.b = Math.sin((0, _rad2.default)(angle));
	            matrix.c = -matrix.b;
	            matrix.d = matrix.a;
	            matrix.e = x - x * matrix.a + y * matrix.b || 0;
	            matrix.f = y - y * matrix.a - x * matrix.b || 0;

	            return matrix;
	        }
	    }, {
	        key: 'scale',
	        value: function scale(scaleX, scaleY) {
	            return new Matrix(scaleX, 0, 0, scaleY, 0, 0);
	        }
	    }]);

	    return Matrix;
	}();

	Matrix.IDENTITY = Matrix.unit();

	exports.default = Matrix;

/***/ }

/******/ });