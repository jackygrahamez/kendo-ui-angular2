module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(202);


/***/ },

/***/ 60:
/***/ function(module, exports) {

	module.exports = require("../common/constants");

/***/ },

/***/ 110:
/***/ function(module, exports) {

	module.exports = require("../core");

/***/ },

/***/ 111:
/***/ function(module, exports) {

	module.exports = require("../common/set-default-options");

/***/ },

/***/ 112:
/***/ function(module, exports) {

	module.exports = require("../common/deep-extend");

/***/ },

/***/ 202:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _core = __webpack_require__(110);

	var _chartContainer = __webpack_require__(203);

	var _chartContainer2 = _interopRequireDefault(_chartContainer);

	var _constants = __webpack_require__(60);

	var _setDefaultOptions = __webpack_require__(111);

	var _setDefaultOptions2 = _interopRequireDefault(_setDefaultOptions);

	var _isObject = __webpack_require__(204);

	var _isObject2 = _interopRequireDefault(_isObject);

	var _deepExtend = __webpack_require__(112);

	var _deepExtend2 = _interopRequireDefault(_deepExtend);

	var _last = __webpack_require__(205);

	var _last2 = _interopRequireDefault(_last);

	var _append = __webpack_require__(206);

	var _append2 = _interopRequireDefault(_append);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Pane = function (_BoxElement) {
	    _inherits(Pane, _BoxElement);

	    function Pane(options) {
	        _classCallCheck(this, Pane);

	        var _this = _possibleConstructorReturn(this, (Pane.__proto__ || Object.getPrototypeOf(Pane)).call(this, options));

	        _this.id = paneID();

	        _this.createTitle();

	        _this.content = new _core.ChartElement();

	        _this.chartContainer = new _chartContainer2.default({}, _this);
	        _this.append(_this.content);

	        _this.axes = [];
	        _this.charts = [];
	        return _this;
	    }

	    _createClass(Pane, [{
	        key: 'createTitle',
	        value: function createTitle() {
	            var titleOptions = this.options.title;
	            if ((0, _isObject2.default)(titleOptions)) {
	                titleOptions = (0, _deepExtend2.default)({}, titleOptions, {
	                    align: titleOptions.position,
	                    position: _constants.TOP
	                });
	            }

	            this.title = _core.Title.buildTitle(titleOptions, this, Pane.prototype.options.title);
	        }
	    }, {
	        key: 'appendAxis',
	        value: function appendAxis(axis) {
	            this.content.append(axis);
	            this.axes.push(axis);
	            axis.pane = this;
	        }
	    }, {
	        key: 'appendChart',
	        value: function appendChart(chart) {
	            if (this.chartContainer.parent !== this.content) {
	                this.content.append(this.chartContainer);
	            }

	            this.charts.push(chart);
	            this.chartContainer.append(chart);
	            chart.pane = this;
	        }
	    }, {
	        key: 'empty',
	        value: function empty() {
	            var plotArea = this.parent;

	            if (plotArea) {
	                for (var i = 0; i < this.axes.length; i++) {
	                    plotArea.removeAxis(this.axes[i]);
	                }

	                for (var _i = 0; _i < this.charts.length; _i++) {
	                    plotArea.removeChart(this.charts[_i]);
	                }
	            }

	            this.axes = [];
	            this.charts = [];

	            this.content.destroy();
	            this.content.children = [];
	            this.chartContainer.children = [];
	        }
	    }, {
	        key: 'reflow',
	        value: function reflow(targetBox) {
	            // Content (such as charts) is rendered, but excluded from reflows
	            var content = void 0;
	            if ((0, _last2.default)(this.children) === this.content) {
	                content = this.children.pop();
	            }

	            _get(Pane.prototype.__proto__ || Object.getPrototypeOf(Pane.prototype), 'reflow', this).call(this, targetBox);

	            if (content) {
	                this.children.push(content);
	            }

	            if (this.title) {
	                this.contentBox.y1 += this.title.box.height();
	            }
	        }
	    }, {
	        key: 'visualStyle',
	        value: function visualStyle() {
	            var style = _get(Pane.prototype.__proto__ || Object.getPrototypeOf(Pane.prototype), 'visualStyle', this).call(this);
	            style.zIndex = -10;

	            return style;
	        }
	    }, {
	        key: 'renderComplete',
	        value: function renderComplete() {
	            if (this.options.visible) {
	                this.createGridLines();
	            }
	        }
	    }, {
	        key: 'stackRoot',
	        value: function stackRoot() {
	            return this;
	        }
	    }, {
	        key: 'clipRoot',
	        value: function clipRoot() {
	            return this;
	        }
	    }, {
	        key: 'createGridLines',
	        value: function createGridLines() {
	            var axes = this.axes;
	            var allAxes = axes.concat(this.parent.axes);
	            var vGridLines = [];
	            var hGridLines = [];

	            // TODO
	            // Is full combination really necessary?
	            for (var i = 0; i < axes.length; i++) {
	                var axis = axes[i];
	                var vertical = axis.options.vertical;
	                var gridLines = vertical ? vGridLines : hGridLines;
	                for (var j = 0; j < allAxes.length; j++) {
	                    if (gridLines.length === 0) {
	                        var altAxis = allAxes[j];
	                        if (vertical !== altAxis.options.vertical) {
	                            (0, _append2.default)(gridLines, axis.createGridLines(altAxis));
	                        }
	                    }
	                }
	            }
	        }
	    }, {
	        key: 'refresh',
	        value: function refresh() {
	            this.visual.clear();

	            this.content.parent = null;
	            this.content.createGradient = this.createGradient.bind(this);
	            this.content.renderVisual();
	            this.content.parent = this;

	            if (this.title) {
	                this.visual.append(this.title.visual);
	            }

	            this.visual.append(this.content.visual);

	            this.renderComplete();
	        }
	    }, {
	        key: 'chartsBox',
	        value: function chartsBox() {
	            var axes = this.axes;
	            var length = axes.length;
	            var chartsBox = new _core.Box();

	            for (var idx = 0; idx < length; idx++) {
	                var axis = axes[idx];
	                var axisValueField = axis.options.vertical ? _constants.Y : _constants.X;
	                var lineBox = axis.lineBox();
	                chartsBox[axisValueField + 1] = lineBox[axisValueField + 1];
	                chartsBox[axisValueField + 2] = lineBox[axisValueField + 2];
	            }

	            if (chartsBox.x2 === 0) {
	                var allAxes = this.parent.axes;
	                var _length = allAxes.length;

	                for (var _idx = 0; _idx < _length; _idx++) {
	                    var _axis = allAxes[_idx];
	                    if (!_axis.options.vertical) {
	                        var _lineBox = _axis.lineBox();
	                        chartsBox.x1 = _lineBox.x1;
	                        chartsBox.x2 = _lineBox.x2;
	                    }
	                }
	            }
	            return chartsBox;
	        }
	    }, {
	        key: 'clipBox',
	        value: function clipBox() {
	            return this.chartContainer.clipBox;
	        }
	    }]);

	    return Pane;
	}(_core.BoxElement);

	var ID = 1;

	function paneID() {
	    return "pane" + ID++;
	}

	(0, _setDefaultOptions2.default)(Pane.prototype, {
	    zIndex: -1,
	    shrinkToFit: true,
	    title: {
	        align: _constants.LEFT
	    },
	    visible: true
	});

	exports.default = Pane;

/***/ },

/***/ 203:
/***/ function(module, exports) {

	module.exports = require("./chart-container");

/***/ },

/***/ 204:
/***/ function(module, exports) {

	module.exports = require("../common/is-object");

/***/ },

/***/ 205:
/***/ function(module, exports) {

	module.exports = require("../common/last");

/***/ },

/***/ 206:
/***/ function(module, exports) {

	module.exports = require("../common/append");

/***/ }

/******/ });