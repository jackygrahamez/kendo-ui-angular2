module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(44);


/***/ },

/***/ 44:
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.swing = swing;
	exports.linear = linear;
	exports.easeOutElastic = easeOutElastic;
	function swing(position) {
	    return 0.5 - Math.cos(position * Math.PI) / 2;
	}

	function linear(position) {
	    return position;
	}

	function easeOutElastic(position, time, start, diff) {
	    var s = 1.70158,
	        p = 0,
	        a = diff;

	    if (position === 0) {
	        return start;
	    }

	    if (position === 1) {
	        return start + diff;
	    }

	    if (!p) {
	        p = 0.5;
	    }

	    if (a < Math.abs(diff)) {
	        a = diff;
	        s = p / 4;
	    } else {
	        s = p / (2 * Math.PI) * Math.asin(diff / a);
	    }

	    return a * Math.pow(2, -10 * position) * Math.sin((Number(position) - s) * (1.1 * Math.PI) / p) + diff + start;
	}

/***/ }

/******/ });