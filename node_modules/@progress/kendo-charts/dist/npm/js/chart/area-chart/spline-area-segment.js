module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(54);


/***/ },

/***/ 5:
/***/ function(module, exports) {

	module.exports = require("../../common/constants");

/***/ },

/***/ 13:
/***/ function(module, exports) {

	module.exports = require("../../common/is-function");

/***/ },

/***/ 23:
/***/ function(module, exports) {

	module.exports = require("@progress/kendo-drawing");

/***/ },

/***/ 44:
/***/ function(module, exports) {

	module.exports = require("./area-segment");

/***/ },

/***/ 49:
/***/ function(module, exports) {

	module.exports = require("../line-chart/line-segment");

/***/ },

/***/ 50:
/***/ function(module, exports) {

	module.exports = require("../../common/deep-extend");

/***/ },

/***/ 52:
/***/ function(module, exports) {

	module.exports = require("../../common/limit-value");

/***/ },

/***/ 53:
/***/ function(module, exports) {

	module.exports = require("../../common/last");

/***/ },

/***/ 54:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _kendoDrawing = __webpack_require__(23);

	var _areaSegment = __webpack_require__(44);

	var _areaSegment2 = _interopRequireDefault(_areaSegment);

	var _lineSegment = __webpack_require__(49);

	var _lineSegment2 = _interopRequireDefault(_lineSegment);

	var _core = __webpack_require__(55);

	var _constants = __webpack_require__(5);

	var _isFunction = __webpack_require__(13);

	var _isFunction2 = _interopRequireDefault(_isFunction);

	var _deepExtend = __webpack_require__(50);

	var _deepExtend2 = _interopRequireDefault(_deepExtend);

	var _append = __webpack_require__(56);

	var _append2 = _interopRequireDefault(_append);

	var _last = __webpack_require__(53);

	var _last2 = _interopRequireDefault(_last);

	var _limitValue = __webpack_require__(52);

	var _limitValue2 = _interopRequireDefault(_limitValue);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var SplineAreaSegment = function (_AreaSegment) {
	    _inherits(SplineAreaSegment, _AreaSegment);

	    function SplineAreaSegment(linePoints, prevSegment, isStacked, currentSeries, seriesIx) {
	        _classCallCheck(this, SplineAreaSegment);

	        var _this = _possibleConstructorReturn(this, (SplineAreaSegment.__proto__ || Object.getPrototypeOf(SplineAreaSegment)).call(this, linePoints, [], currentSeries, seriesIx));

	        _this.prevSegment = prevSegment;
	        _this.isStacked = isStacked;
	        return _this;
	    }

	    _createClass(SplineAreaSegment, [{
	        key: 'strokeSegments',
	        value: function strokeSegments() {
	            var segments = this._strokeSegments;

	            if (!segments) {
	                var curveProcessor = new _core.CurveProcessor(this.options.closed);
	                var linePoints = _lineSegment2.default.prototype.points.call(this);
	                segments = this._strokeSegments = curveProcessor.process(linePoints);
	            }

	            return segments;
	        }
	    }, {
	        key: 'createVisual',
	        value: function createVisual() {
	            var series = this.series;
	            var defaults = series._defaults;
	            var color = series.color;

	            if ((0, _isFunction2.default)(color) && defaults) {
	                color = defaults.color;
	            }

	            this.visual = new _kendoDrawing.drawing.Group({
	                zIndex: series.zIndex
	            });

	            this.createFill({
	                fill: {
	                    color: color,
	                    opacity: series.opacity
	                },
	                stroke: null
	            });

	            this.createStroke({
	                stroke: (0, _deepExtend2.default)({
	                    color: color,
	                    opacity: series.opacity,
	                    lineCap: "butt"
	                }, series.line)
	            });
	        }
	    }, {
	        key: 'createFill',
	        value: function createFill(style) {
	            var strokeSegments = this.strokeSegments();
	            var fillSegments = strokeSegments.slice(0);
	            var prevSegment = this.prevSegment;

	            if (this.isStacked && prevSegment) {
	                var prevStrokeSegments = prevSegment.strokeSegments();
	                var prevAnchor = (0, _last2.default)(prevStrokeSegments).anchor();

	                fillSegments.push(new _kendoDrawing.geometry.Segment(prevAnchor, prevAnchor, (0, _last2.default)(strokeSegments).anchor()));

	                var stackSegments = [];
	                for (var idx = prevStrokeSegments.length - 1; idx >= 0; idx--) {
	                    var segment = prevStrokeSegments[idx];
	                    stackSegments.push(new _kendoDrawing.geometry.Segment(segment.anchor(), segment.controlOut(), segment.controlIn()));
	                }

	                (0, _append2.default)(fillSegments, stackSegments);

	                var firstAnchor = fillSegments[0].anchor();
	                fillSegments.push(new _kendoDrawing.geometry.Segment(firstAnchor, firstAnchor, (0, _last2.default)(stackSegments).anchor()));
	            }

	            var fill = new _kendoDrawing.drawing.Path(style);
	            fill.segments.push.apply(fill.segments, fillSegments);
	            this.closeFill(fill);

	            this.visual.append(fill);
	        }
	    }, {
	        key: 'closeFill',
	        value: function closeFill(fillPath) {
	            var chart = this.parent;
	            var prevSegment = this.prevSegment;
	            var plotArea = chart.plotArea;
	            var invertAxes = chart.options.invertAxes;
	            var valueAxis = chart.seriesValueAxis(this.series);
	            var valueAxisLineBox = valueAxis.lineBox();
	            var categoryAxis = plotArea.seriesCategoryAxis(this.series);
	            var categoryAxisLineBox = categoryAxis.lineBox();
	            var pos = invertAxes ? _constants.X : _constants.Y;
	            var segments = this.strokeSegments();
	            var firstPoint = segments[0].anchor();
	            var lastPoint = (0, _last2.default)(segments).anchor();
	            var end = invertAxes ? categoryAxisLineBox.x1 : categoryAxisLineBox.y1;

	            end = (0, _limitValue2.default)(end, valueAxisLineBox[pos + 1], valueAxisLineBox[pos + 2]);
	            if (!(chart.options.isStacked && prevSegment) && segments.length > 1) {
	                if (invertAxes) {
	                    fillPath.lineTo(end, lastPoint.y).lineTo(end, firstPoint.y);
	                } else {
	                    fillPath.lineTo(lastPoint.x, end).lineTo(firstPoint.x, end);
	                }
	            }
	        }
	    }, {
	        key: 'createStroke',
	        value: function createStroke(style) {
	            if (style.stroke.width > 0) {
	                var stroke = new _kendoDrawing.drawing.Path(style);
	                stroke.segments.push.apply(stroke.segments, this.strokeSegments());

	                this.visual.append(stroke);
	            }
	        }
	    }]);

	    return SplineAreaSegment;
	}(_areaSegment2.default);

	exports.default = SplineAreaSegment;

/***/ },

/***/ 55:
/***/ function(module, exports) {

	module.exports = require("../../core");

/***/ },

/***/ 56:
/***/ function(module, exports) {

	module.exports = require("../../common/append");

/***/ }

/******/ });