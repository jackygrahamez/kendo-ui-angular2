import 'core-js/es6';
import { $ } from 'e2e-utils';

import MousewheelZoom from '../../src/chart/pan-and-zoom/mousewheel-zoom';
import ZoomSelection from '../../src/chart/pan-and-zoom/zoom-selection';
import { deepExtend } from '../../src/common';
import { Box } from '../../src/core';

import { ok, equal } from '../../test/test-helpers';
import { createChart, destroyChart }  from '../test-helpers';

function noop() {}

(function() {
    const chartOptions = {
        categoryAxis: {
            categories: ["A", "B", "C", "D"],
            name: "foo",
            min: 1,
            max: 2
        }
    };
    let chart, zoom;

    function setup(options, zoomOptions){
        chart = createChart(deepExtend({
            zoomable: true
        }, options));

        zoom = new MousewheelZoom(chart, deepExtend({
            key: "none"
        }, zoomOptions));
    }

    // ------------------------------------------------------------
    describe('MousewheelZoom', () => {
        afterEach(() => {
            destroyChart(chart);
        });

        it("updateRanges returns updated ranges based on delta", () => {
            setup(chartOptions);

            const ranges = zoom.updateRanges(1);

            equal(ranges.foo.min, 0);
            equal(ranges.foo.max, 3);
        });

        it("updateRanges does not update range if the axis is locked", () => {
            setup(chartOptions, {
                lock: "x"
            });

            const ranges = zoom.updateRanges(1);

            ok(!ranges.foo);
        });

        it("zoom updates plotArea axes options", () => {
            setup(chartOptions);

            const ranges = zoom.updateRanges(1);
            zoom.zoom();
            const options = chart._plotArea.options.categoryAxis;

            equal(options.min, 0);
            equal(options.max, 3);
        });

        it("zoom redraws plotArea", () => {
            setup(chartOptions);

            const ranges = zoom.updateRanges(1);
            chart._plotArea.redraw = function() {
                ok(true)
            };
            zoom.zoom();
        });

        it("Scatter Chart w/multiple axes", () => {
            setup({
                xAxis: [{}, {}],
                yAxis: [{}, {}],
                series: [{
                    type: "scatterLine",
                    data: []
                }]
            });
            zoom.updateRanges(2);
            zoom.zoom();

            ok(true);
        });
    });

    // ------------------------------------------------------------

    function triggerMousewheel(delta) {
        chart._mousewheel({
            detail: delta * 3,
            pageX: 100,
            pageY: 100,
            preventDefault: function() {},
            stopPropagation: function() {}
        });
    }

    describe('MousewheelZoom / event handling', () => {
        beforeEach(() => {
            setup(chartOptions);
        });

        afterEach(() => {
            destroyChart(chart);
        });

        it("unsets active point", 1, () => {
            chart._unsetActivePoint = function() {
                ok(true);
            };
            triggerMousewheel(1);

            chart._unsetActivePoint = noop;
        });

        it("does not unset active point if zoomStart is prevented", 0, () => {
            chart.bind("zoomStart", function(e) {
                e.preventDefault();
            });
            chart._unsetActivePoint = function() {
                ok(false);
            };
            triggerMousewheel(1);

            chart._unsetActivePoint = noop;
        });

        it("suspends surface tracking", () => {
            chart.surface.suspendTracking = function() {
                ok(true);
            };
            triggerMousewheel(1);
        });

        it("does not suspend surface tracking if zoomStart is prevented", 0, () => {
            chart.bind("zoomStart", function(e) {
                e.preventDefault();
            });
            chart.surface.suspendTracking = function() {
                ok(false);
            };
            triggerMousewheel(1);
        });

    });

    // ------------------------------------------------------------
    describe('MousewheelZoom / event handling / end', () => {
        it("resumes surface tracking on zoomEnd", (done) => {

            setup(chartOptions);
            let zoomEndTriggered = false;
            chart.bind("zoomEnd", () => {
                zoomEndTriggered = true;
            });

            chart.surface.resumeTracking = function() {
                ok(zoomEndTriggered);
                destroyChart(chart);
                done();
            };
            triggerMousewheel(1);
        });
    });

    // ------------------------------------------------------------
    describe('MousewheelZoom / destroy', () => {

        it("removes chart reference", () => {
            zoom = new MousewheelZoom({});
            zoom.destroy();
            ok(!zoom.chart);
        });
    });

})();

(function() {
    const eventArg = createEventArg();
    const chartOptions = {
        categoryAxis: {
            categories: ["A", "B", "C", "D"],
            name: "foo",
            min: 1,
            max: 2
        }
    };
    let chart, plotArea, pane, zoom;

    function createEventArg(options) {
        return deepExtend({
            originalEvent: { },
            pageX: 0,
            pageY: 0,
            x: {
                startLocation: 0
            },
            y: {
                startLocation: 0
            }
        }, options);
    }

    function setup(options, zoomOptions){
        chart = createChart(options);

        plotArea = chart._plotArea;
        pane = plotArea.panes[0];
        pane.clipBox = function() {
            return new Box(0, 0, 300, 300);
        };
        plotArea.paneByPoint = function() {
            return pane;
        };

        zoom = new ZoomSelection(chart, deepExtend({
            key: "none"
        }, zoomOptions));
        zoom._elementOffset = function() {
            return {
                left: 0,
                top: 0
            };
        };
    }

    // ------------------------------------------------------------
    describe('ZoomSelection / start', () => {
        afterEach(() => {
            destroyChart(chart);
            zoom.destroy();
        });

        it("start sets zoom pane", () => {
            setup(chartOptions);

            zoom.start(eventArg);

            ok(zoom._zoomPane === plotArea.panes[0]);
        });

        it("start returns true if a pane is found based on the event", () => {
            setup(chartOptions);

            equal(zoom.start(eventArg), true);
        });

        it("start returns false if a pane is not found based on the event", () => {
            setup(chartOptions);
            plotArea.paneByPoint = noop;

            equal(zoom.start(eventArg), false);
        });

        it("start returns true if the set key is pressed", () => {
            setup(chartOptions, {
                key: "shift"
            });

            equal(zoom.start(createEventArg({
                originalEvent: {
                    shiftKey: true
                }
            })), true);
        });

        it("start returns false if the set key is not pressed", () => {
            setup(chartOptions, {
                key: "shift"
            });

            equal(zoom.start(createEventArg({
                originalEvent: {
                    shiftKey: false
                }
            })), false);
        });
    });

    // ------------------------------------------------------------
    describe('ZoomSelection / move', () => {

        afterEach(() => {
            destroyChart(chart);
            zoom.destroy();
        });

        it("move updates the selection marquee", () => {
            setup(chartOptions);
            zoom.start(createEventArg());

            zoom.move(createEventArg({
                pageX: 10,
                pageY: 10,
                x: {
                    startLocation: 110
                },
                y: {
                    startLocation: 110
                }
            }));

            const marquee = $(zoom._marquee);
            equal(marquee.width(), 100);
            equal(marquee.height(), 100);
            equal(parseInt(marquee.css("left"), 10), 10);
            equal(parseInt(marquee.css("top"), 10), 10);
        });

        it("move limits the selection marquee to the pane clipbox", () => {
            setup(chartOptions);
            zoom.start(createEventArg());

            zoom.move(createEventArg({
                pageX: 500,
                pageY: 500,
                x: {
                    startLocation: 100
                },
                y: {
                    startLocation: 100
                }
            }));

            const marquee = $(zoom._marquee);
            equal(marquee.width(), 200);
            equal(marquee.height(), 200);
            equal(parseInt(marquee.css("left"), 10), 100);
            equal(parseInt(marquee.css("top"), 10), 100);
        });

        it("move takes the size and position from the pane clipbox if an axis is locked", () => {
            setup(chartOptions, {
                lock: "y"
            });
            zoom.start(createEventArg());

            zoom.move(createEventArg({
                pageX: 10,
                pageY: 10,
                x: {
                    startLocation: 110
                },
                y: {
                    startLocation: 110
                }
            }));

            const marquee = $(zoom._marquee);
            equal(marquee.width(), 100);
            equal(marquee.height(), 300);
            equal(parseInt(marquee.css("left"), 10), 10);
            equal(parseInt(marquee.css("top"), 10), 0);
        });
    });

    // ------------------------------------------------------------
    describe('ZoomSelection / end', () => {

        afterEach(() => {
            destroyChart(chart);
            zoom.destroy();
        });

        it("returns updated axis limits based on the selected area", () => {
            setup(chartOptions);
            zoom.start(createEventArg());

            const ranges = zoom.end(createEventArg({
                pageX: 100,
                pageY: 100
            }));

            const categoryAxis = plotArea.categoryAxis;
            const axisRange = categoryAxis.pointsRange({x: 0, y: 0}, {x: 100, y: 100});
            equal(axisRange.min, ranges.foo.min);
            equal(axisRange.max, ranges.foo.max);
        });

        it("does not update axis limits if it is locked", () => {
            setup(chartOptions, {
                lock: "x"
            });
            zoom.start(createEventArg());

            const ranges = zoom.end(createEventArg({
                pageX: 100,
                pageY: 100
            }));

            ok(!ranges.foo);
        });
    });

    // ------------------------------------------------------------
    describe('ZoomSelection / destroy', () => {
        afterEach(() => {
            destroyChart(chart);
        });

        it("removes marquee and references", () => {
            setup();
            const marquee = zoom._marquee;
            zoom.start(createEventArg());
            zoom.destroy();
            ok(!$.contains(document.body, marquee));
            ok(!zoom._marquee);
            ok(!zoom.chart);
        });
    });
})();
