(function(e, a) { for(var i in a) e[i] = a[i]; }(exports, /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(28);


/***/ },
/* 1 */,
/* 2 */
/***/ function(module, exports) {

	module.exports = require("./utils");

/***/ },
/* 3 */,
/* 4 */,
/* 5 */
/***/ function(module, exports) {

	module.exports = require("@angular/core");

/***/ },
/* 6 */,
/* 7 */,
/* 8 */
/***/ function(module, exports) {

	module.exports = require("./detail-template.directive");

/***/ },
/* 9 */,
/* 10 */,
/* 11 */,
/* 12 */,
/* 13 */,
/* 14 */,
/* 15 */,
/* 16 */,
/* 17 */,
/* 18 */,
/* 19 */,
/* 20 */,
/* 21 */,
/* 22 */,
/* 23 */,
/* 24 */,
/* 25 */,
/* 26 */,
/* 27 */,
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	__webpack_require__(29);
	var core_1 = __webpack_require__(5);
	__webpack_require__(34);
	__webpack_require__(35);
	var column_component_1 = __webpack_require__(36);
	var detail_template_directive_1 = __webpack_require__(8);
	var utils_1 = __webpack_require__(2);
	var browser_support_service_1 = __webpack_require__(37);
	var data_collection_1 = __webpack_require__(38);
	var selection_service_1 = __webpack_require__(39);
	var details_service_1 = __webpack_require__(40);
	var columns_container_1 = __webpack_require__(41);
	/**
	 * Represents the Kendo UI Grid component for Angular.
	 *
	 * @example <caption>Basic Usage</caption>
	 * ```ts-preview
	 * @@Component({
	 *    selector: 'my-app',
	 *    template: `
	 *        <kendo-grid [data]="gridData">
	 *        </kendo-grid>
	 *    `
	 * })
	 * class AppComponent {
	 *    private gridData: any[] = products;
	 * }
	 *
	 * const products = [{
	 *    "ProductID": 1,
	 *    "ProductName": "Chai",
	 *    "UnitPrice": 18.0000,
	 *    "Discontinued": true
	 *  }, {
	 *    "ProductID": 2,
	 *    "ProductName": "Chang",
	 *    "UnitPrice": 19.0000,
	 *    "Discontinued": false
	 *  }
	 * ];
	 * ```
	 */
	var GridComponent = (function () {
	    function GridComponent(supportService, selectionService, wrapper) {
	        var _this = this;
	        this.selectionService = selectionService;
	        this.wrapper = wrapper;
	        /**
	         * Sets the data of the Grid. If an array is provided, the Grid automatically gets the total count.
	         */
	        this.data = [];
	        /**
	         * Defines the number of records to be skipped by the pager.
	         * It is required by the [paging functionality]({% slug overview_grid_kendouiforangular %}#paging).
	         */
	        this.skip = 0;
	        /**
	         * Defines the scroll mode used by the Grid. The available options are:
	         *  - `none`&mdash;Renders no scrollbar.
	         *  - `scrollable`&mdash;This is the default scroll mode. It requires the setting of the `height` option.
	         *  - `virtual`&mdash;Displays no pager and renders a portion of data (optimized rendering) while the user is scrolling the content.
	         */
	        this.scrollable = 'scrollable';
	        /**
	         * Enables the single-row [selection]({% slug overview_grid_kendouiforangular %}#selection) of the Grid.
	         */
	        this.selectable = false;
	        /**
	         * Enables the [sorting]({% slug overview_grid_kendouiforangular %}#sorting) of the Grid columns that have their `field` option set.
	         */
	        this.sortable = false;
	        /**
	         * Configures the pager of the Grid. The available options of the `PagerSettings` are:
	         *
	         * - `buttonCount: Number`&mdash;Sets the maximum numeric buttons count before the buttons are collapsed.
	         * - `info: Boolean`&mdash;Toggles the information about the current page and the total number of records.
	         * - `type: PagerType`&mdash;Accepts the `numeric` (buttons with numbers) and `input` (input for typing the page number) values.
	         * - `pageSizes: Boolean` or `Array<number>`&mdash;Shows a menu for selecting the page size.
	         * - `previousNext: Boolean`&mdash;Toggles the **Previous** and **Next** buttons.
	         */
	        this.pageable = false;
	        /**
	         * The `pageChange` event is trigged when the page of the Grid is changed. You have to handle the event yourself and sort the data.
	         */
	        this.pageChange = new core_1.EventEmitter();
	        /**
	         * The `sortChange` event is trigged when the sorting of the Grid is changed. You have to handle the event yourself and sort the data.
	         */
	        this.sortChange = new core_1.EventEmitter();
	        /**
	         * The `selectionChange` event is trigged when the user selects a Grid row.
	         */
	        this.selectionChange = new core_1.EventEmitter();
	        /**
	         * The `dataStateChange` event is trigged when the data state of the Grid is changed.
	         */
	        this.dataStateChange = new core_1.EventEmitter();
	        this.columns = new core_1.QueryList();
	        this.columnsContainer = new columns_container_1.ColumnsContainer(function () { return _this.columns; });
	        this.shouldGenerateColumns = true;
	        this.view = new data_collection_1.DataCollection(function () { return new data_collection_1.DataResultIterator(_this.data); });
	        this._sort = new Array();
	        this.scrollbarWidth = supportService.scrollbarWidth;
	        this.selectionSubscription = selectionService.changes.subscribe(function (event) {
	            _this.selectionChange.emit(event);
	        });
	        this.attachStateChangesEmitter();
	    }
	    Object.defineProperty(GridComponent.prototype, "sort", {
	        get: function () {
	            return this._sort;
	        },
	        /**
	         * Sorts the descriptors by which the data has to be sorted.
	         */
	        set: function (value) {
	            if (utils_1.isArray(value)) {
	                this._sort = value;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ;
	    ;
	    Object.defineProperty(GridComponent.prototype, "className", {
	        get: function () {
	            return [
	                'k-widget',
	                'k-grid',
	                this.lockedColumns.length && 'k-grid-lockedcolumns',
	                this.isVirtual && 'k-grid-virtual'
	            ].filter(Boolean).join(' ');
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridComponent.prototype, "showFooter", {
	        get: function () {
	            return this.columns.reduce(function (acc, column) { return column.footerTemplateRef ? acc + 1 : acc; }, 0) > 0;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridComponent.prototype, "isVirtual", {
	        get: function () {
	            return this.scrollable === 'virtual';
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridComponent.prototype, "isScrollable", {
	        get: function () {
	            return this.scrollable !== 'none';
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridComponent.prototype, "lockedColumns", {
	        get: function () {
	            return this.columnsContainer.lockedColumns;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridComponent.prototype, "nonLockedColumns", {
	        get: function () {
	            return this.columnsContainer.nonLockedColumns;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridComponent.prototype, "lockedWidth", {
	        get: function () {
	            return this.lockedColumns.reduce(function (prev, curr) { return prev + (curr.width || 0); }, 0);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridComponent.prototype, "nonLockedWidth", {
	        get: function () {
	            if (this.lockedColumns.length) {
	                return this.nonLockedColumns.reduce(function (prev, curr) { return prev + (curr.width || 0); }, 0);
	            }
	            return undefined;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    GridComponent.prototype.ngOnChanges = function (changes) {
	        if (utils_1.isChanged("data", changes)) {
	            this.autoGenerateColumns();
	        }
	    };
	    GridComponent.prototype.ngAfterContentChecked = function () {
	        this.columnsContainer.refresh();
	        this.verifySettings();
	    };
	    GridComponent.prototype.ngAfterContentInit = function () {
	        var _this = this;
	        this.shouldGenerateColumns = !this.columns.length;
	        this.autoGenerateColumns();
	        this.columns.changes.subscribe(function () { return _this.verifySettings(); });
	    };
	    GridComponent.prototype.ngOnDestroy = function () {
	        if (this.selectionSubscription) {
	            this.selectionSubscription.unsubscribe();
	        }
	        if (this.stateChangeSubscription) {
	            this.stateChangeSubscription.unsubscribe();
	        }
	    };
	    GridComponent.prototype.containerScroll = function (_a) {
	        var scrollLeft = _a.scrollLeft;
	        this.header.nativeElement.scrollLeft = scrollLeft;
	        if (this.footer) {
	            this.footer.nativeElement.scrollLeft = scrollLeft;
	        }
	    };
	    GridComponent.prototype.notifyPageChange = function (source, event) {
	        if (source === "list" && !this.isVirtual) {
	            return;
	        }
	        this.pageChange.emit(event);
	    };
	    GridComponent.prototype.verifySettings = function () {
	        if (core_1.isDevMode()) {
	            if (this.lockedColumns.length && this.detailTemplate) {
	                throw new Error('Having both detail template and locked columns is not supported');
	            }
	            if (this.lockedColumns.length && !this.nonLockedColumns.length) {
	                throw new Error('There should be at least one non locked column');
	            }
	            if (this.lockedColumns.length && this.columns.filter(function (x) { return !x.width; }).length) {
	                throw new Error('Locked columns feature requires all columns to have width set');
	            }
	            if (this.lockedColumns.length && !this.isScrollable) {
	                throw new Error('Locked columns are only supported when scrolling is enabled');
	            }
	        }
	    };
	    GridComponent.prototype.autoGenerateColumns = function () {
	        if (this.shouldGenerateColumns && !this.columns.length && this.view.length) {
	            this.columns.reset(Object.keys(this.view.first).map(function (x) { return new column_component_1.ColumnComponent(x); }));
	        }
	    };
	    GridComponent.prototype.attachStateChangesEmitter = function () {
	        var _this = this;
	        this.stateChangeSubscription =
	            this.pageChange.map(function (x) { return ({ skip: x.skip, sort: _this.sort, take: x.take }); })
	                .merge(this.sortChange.map(function (sort) { return ({ skip: _this.skip, sort: sort, take: _this.pageSize }); }))
	                .subscribe(function (x) { return _this.dataStateChange.emit(x); });
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], GridComponent.prototype, "data", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Number)
	    ], GridComponent.prototype, "pageSize", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Number)
	    ], GridComponent.prototype, "height", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Number)
	    ], GridComponent.prototype, "rowHeight", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Number)
	    ], GridComponent.prototype, "detailRowHeight", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Number)
	    ], GridComponent.prototype, "skip", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], GridComponent.prototype, "scrollable", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], GridComponent.prototype, "selectable", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Array), 
	        __metadata('design:paramtypes', [Array])
	    ], GridComponent.prototype, "sort", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], GridComponent.prototype, "sortable", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], GridComponent.prototype, "pageable", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], GridComponent.prototype, "pageChange", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], GridComponent.prototype, "sortChange", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], GridComponent.prototype, "selectionChange", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], GridComponent.prototype, "dataStateChange", void 0);
	    __decorate([
	        core_1.ContentChildren(column_component_1.ColumnComponent), 
	        __metadata('design:type', core_1.QueryList)
	    ], GridComponent.prototype, "columns", void 0);
	    __decorate([
	        core_1.HostBinding('class'), 
	        __metadata('design:type', String)
	    ], GridComponent.prototype, "className", null);
	    __decorate([
	        core_1.ContentChild(detail_template_directive_1.DetailTemplateDirective), 
	        __metadata('design:type', detail_template_directive_1.DetailTemplateDirective)
	    ], GridComponent.prototype, "detailTemplate", void 0);
	    __decorate([
	        core_1.ViewChild("header"), 
	        __metadata('design:type', Object)
	    ], GridComponent.prototype, "header", void 0);
	    __decorate([
	        core_1.ViewChild("footer"), 
	        __metadata('design:type', Object)
	    ], GridComponent.prototype, "footer", void 0);
	    GridComponent = __decorate([
	        core_1.Component({
	            providers: [browser_support_service_1.BrowserSupportService, selection_service_1.SelectionService, details_service_1.DetailsService],
	            selector: 'kendo-grid',
	            template: "\n        <ng-content select=\"kendo-grid-toolbar\"></ng-content>\n        <template [ngIf]=\"isScrollable\">\n            <div\n                class=\"k-grid-header\"\n                [style.paddingRight.px]=\"scrollbarWidth\">\n                <div class=\"k-grid-header-locked\"\n                    *ngIf=\"lockedColumns.length\"\n                     [style.width.px]=\"lockedWidth\">\n                    <table>\n                        <colgroup kendoGridColGroup\n                            [columns]=\"lockedColumns\"\n                            [detailTemplate]=\"detailTemplate\">\n                        </colgroup>\n                        <thead kendoGridHeader\n                            [scrollable]=\"true\"\n                            [columns]=\"lockedColumns\"\n                            [sort]=\"sort\"\n                            [sortable]=\"sortable\"\n                            (sortChange)=\"sortChange.emit($event)\"\n                            [detailTemplate]=\"detailTemplate\">\n                        </thead>\n                    </table>\n                </div><div class=\"k-grid-header-wrap\" #header\n                    [kendoGridResizableContainer]=\"lockedColumns.length\"\n                    [lockedWidth]=\"lockedWidth + scrollbarWidth + 3\">\n                    <table [style.width.px]=\"nonLockedWidth\">\n                        <colgroup kendoGridColGroup\n                            [columns]=\"nonLockedColumns\"\n                            [detailTemplate]=\"detailTemplate\">\n                        </colgroup>\n                        <thead kendoGridHeader\n                            [scrollable]=\"true\"\n                            [columns]=\"nonLockedColumns\"\n                            [sort]=\"sort\"\n                            [sortable]=\"sortable\"\n                            (sortChange)=\"sortChange.emit($event)\"\n                            [detailTemplate]=\"detailTemplate\">\n                        </thead>\n                    </table>\n                </div>\n            </div>\n            <kendo-grid-list\n                [data]=\"view\"\n                [height]=\"height\"\n                [rowHeight]=\"rowHeight\"\n                [detailRowHeight]=\"detailRowHeight\"\n                [total]=\"isVirtual ? view.total : pageSize\"\n                [take]=\"pageSize\"\n                [skip]=\"skip\"\n                [columns]=\"columnsContainer\"\n                [selectable]=\"selectable\"\n                [detailTemplate]=\"detailTemplate\"\n                (containerScroll)=\"containerScroll($event)\"\n                (pageChange)=\"notifyPageChange('list', $event)\">\n            </kendo-grid-list>\n            <div\n                *ngIf=\"showFooter\"\n                class=\"k-grid-footer\"\n                [style.paddingRight.px]=\"scrollbarWidth\">\n                <div\n                    *ngIf=\"lockedColumns.length\"\n                    class=\"k-grid-footer-locked\"\n                    [style.width.px]=\"lockedWidth\">\n                    <table>\n                        <colgroup kendoGridColGroup\n                            [columns]=\"lockedColumns\"\n                            [detailTemplate]=\"detailTemplate\">\n                        </colgroup>\n                        <tfoot kendoGridFooter\n                            [scrollable]=\"true\"\n                            [columns]=\"lockedColumns\"\n                            [detailTemplate]=\"detailTemplate\">\n                        </tfoot>\n                    </table>\n                </div><div #footer\n                    class=\"k-grid-footer-wrap\"\n                    [kendoGridResizableContainer]=\"lockedColumns.length\"\n                    [lockedWidth]=\"lockedWidth + scrollbarWidth + 3\">\n                    <table>\n                        <colgroup kendoGridColGroup\n                            [columns]=\"nonLockedColumns\"\n                            [detailTemplate]=\"detailTemplate\">\n                        </colgroup>\n                        <tfoot kendoGridFooter\n                            [scrollable]=\"true\"\n                            [columns]=\"nonLockedColumns\"\n                            [detailTemplate]=\"detailTemplate\">\n                        </tfoot>\n                    </table>\n                </div>\n            </div>\n        </template>\n        <template [ngIf]=\"!isScrollable\">\n            <table>\n                <colgroup kendoGridColGroup\n                    [columns]=\"columns\"\n                    [detailTemplate]=\"detailTemplate\">\n                </colgroup>\n                <thead kendoGridHeader\n                    [scrollable]=\"false\"\n                    [columns]=\"columns\"\n                    [sort]=\"sort\"\n                    [sortable]=\"sortable\"\n                    (sortChange)=\"sortChange.emit($event)\"\n                    [detailTemplate]=\"detailTemplate\">\n                </thead>\n                <tbody kendoGridTableBody\n                    [data]=\"view\"\n                    [skip]=\"skip\"\n                    [columns]=\"columns\"\n                    [selectable]=\"selectable\"\n                    [detailTemplate]=\"detailTemplate\">\n                </tbody>\n                <tfoot kendoGridFooter\n                    *ngIf=\"showFooter\"\n                    [scrollable]=\"false\"\n                    [columns]=\"columns\"\n                    [detailTemplate]=\"detailTemplate\">\n                </tfoot>\n            </table>\n        </template>\n        <kendo-pager\n            *ngIf=\"!isVirtual && pageable\"\n            [pageSize]=\"pageSize\"\n            [total]=\"view.total\"\n            [skip]=\"skip\"\n            [options]=\"pageable\"\n            (pageChange)=\"notifyPageChange('pager', $event)\">\n        </kendo-pager>\n    "
	        }), 
	        __metadata('design:paramtypes', [browser_support_service_1.BrowserSupportService, selection_service_1.SelectionService, core_1.ElementRef])
	    ], GridComponent);
	    return GridComponent;
	}());
	exports.GridComponent = GridComponent;


/***/ },
/* 29 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 30 */,
/* 31 */,
/* 32 */,
/* 33 */,
/* 34 */
/***/ function(module, exports) {

	module.exports = require("rxjs/add/operator/map");

/***/ },
/* 35 */
/***/ function(module, exports) {

	module.exports = require("rxjs/add/operator/merge");

/***/ },
/* 36 */
/***/ function(module, exports) {

	module.exports = require("./column.component");

/***/ },
/* 37 */
/***/ function(module, exports) {

	module.exports = require("./browser-support.service");

/***/ },
/* 38 */
/***/ function(module, exports) {

	module.exports = require("./data.collection");

/***/ },
/* 39 */
/***/ function(module, exports) {

	module.exports = require("./selection.service");

/***/ },
/* 40 */
/***/ function(module, exports) {

	module.exports = require("./details.service");

/***/ },
/* 41 */
/***/ function(module, exports) {

	module.exports = require("./columns-container");

/***/ }
/******/ ])));
//# sourceMappingURL=grid.component.js.map