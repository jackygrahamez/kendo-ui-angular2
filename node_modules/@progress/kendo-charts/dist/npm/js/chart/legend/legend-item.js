module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(172);


/***/ },

/***/ 5:
/***/ function(module, exports) {

	module.exports = require("../../common/constants");

/***/ },

/***/ 23:
/***/ function(module, exports) {

	module.exports = require("@progress/kendo-drawing");

/***/ },

/***/ 24:
/***/ function(module, exports) {

	module.exports = require("../constants");

/***/ },

/***/ 50:
/***/ function(module, exports) {

	module.exports = require("../../common/deep-extend");

/***/ },

/***/ 55:
/***/ function(module, exports) {

	module.exports = require("../../core");

/***/ },

/***/ 172:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _kendoDrawing = __webpack_require__(23);

	var _core = __webpack_require__(55);

	var _constants = __webpack_require__(24);

	var _constants2 = __webpack_require__(5);

	var _deepExtend = __webpack_require__(50);

	var _deepExtend2 = _interopRequireDefault(_deepExtend);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var LegendItem = function (_BoxElement) {
	    _inherits(LegendItem, _BoxElement);

	    function LegendItem(options) {
	        _classCallCheck(this, LegendItem);

	        var _this = _possibleConstructorReturn(this, (LegendItem.__proto__ || Object.getPrototypeOf(LegendItem)).call(this, options));

	        _this.createContainer();
	        _this.createMarker();
	        _this.createLabel();
	        return _this;
	    }

	    _createClass(LegendItem, [{
	        key: 'createContainer',
	        value: function createContainer() {
	            this.container = new _core.FloatElement({ vertical: false, wrap: false, align: _constants2.CENTER });
	            this.append(this.container);
	        }
	    }, {
	        key: 'createMarker',
	        value: function createMarker() {
	            this.container.append(new _core.ShapeElement(this.markerOptions()));
	        }
	    }, {
	        key: 'markerOptions',
	        value: function markerOptions() {
	            var options = this.options;
	            var markerColor = options.markerColor;
	            return (0, _deepExtend2.default)({}, options.markers, {
	                background: markerColor,
	                border: {
	                    color: markerColor
	                }
	            });
	        }
	    }, {
	        key: 'createLabel',
	        value: function createLabel() {
	            var options = this.options;
	            var labelOptions = (0, _deepExtend2.default)({}, options.labels);

	            this.container.append(new _core.TextBox(options.text, labelOptions));
	        }
	    }, {
	        key: 'renderComplete',
	        value: function renderComplete() {
	            _get(LegendItem.prototype.__proto__ || Object.getPrototypeOf(LegendItem.prototype), 'renderComplete', this).call(this);

	            var cursor = this.options.cursor || {};
	            var eventSink = this._itemOverlay = _kendoDrawing.drawing.Path.fromRect(this.container.box.toRect(), {
	                fill: {
	                    color: _constants2.WHITE,
	                    opacity: 0
	                },
	                stroke: null,
	                cursor: cursor.style || cursor
	            });

	            this.appendVisual(eventSink);
	        }
	    }, {
	        key: 'click',
	        value: function click(widget, e) {
	            var args = this.eventArgs(e);

	            if (!widget.trigger(_constants.LEGEND_ITEM_CLICK, args)) {
	                e.preventDefault();
	            }
	        }
	    }, {
	        key: 'hover',
	        value: function hover(widget, e) {
	            var args = this.eventArgs(e);

	            if (!widget.trigger(_constants.LEGEND_ITEM_HOVER, args)) {
	                e.preventDefault();
	                widget._legendItemHover(args.seriesIndex, args.pointIndex);
	            }

	            // Don't trigger point hover for legend items
	            return true;
	        }
	    }, {
	        key: 'leave',
	        value: function leave(widget) {
	            widget._unsetActivePoint();
	        }
	    }, {
	        key: 'eventArgs',
	        value: function eventArgs(e) {
	            var options = this.options;

	            return {
	                element: e.target,
	                text: options.text,
	                series: options.series,
	                seriesIndex: options.series.index,
	                pointIndex: options.pointIndex
	            };
	        }
	    }, {
	        key: 'renderVisual',
	        value: function renderVisual() {
	            var _this2 = this;

	            var options = this.options;
	            var customVisual = options.visual;

	            if (customVisual) {
	                this.visual = customVisual({
	                    active: options.active,
	                    series: options.series,
	                    pointIndex: options.pointIndex,
	                    options: {
	                        markers: this.markerOptions(),
	                        labels: options.labels
	                    },
	                    createVisual: function createVisual() {
	                        _this2.createVisual();
	                        _this2.renderChildren();
	                        _this2.renderComplete();

	                        var defaultVisual = _this2.visual;

	                        delete _this2.visual;

	                        return defaultVisual;
	                    }
	                });
	                this.addVisual();
	            } else {
	                _get(LegendItem.prototype.__proto__ || Object.getPrototypeOf(LegendItem.prototype), 'renderVisual', this).call(this);
	            }
	        }
	    }]);

	    return LegendItem;
	}(_core.BoxElement);

	exports.default = LegendItem;

/***/ }

/******/ });