import { ConfigurationService } from '../common/configuration.service';
import { SettingsComponent } from '../common/settings.component';
import { Border, Overlay, SeriesStack, SeriesVisualArgs } from '../common/property-types';
/**
 * @hidden
 */
export declare abstract class SeriesDefaultsComponentGenerated extends SettingsComponent {
    configurationService: ConfigurationService;
    /**
     * The border of the series.
     */
    border: Border;
    /**
     * The distance between category clusters.
     */
    gap: number;
    /**
     * The Chart series overlay options.
     */
    overlay: Overlay;
    /**
     * The space between the Chart series as proportion of the series width.
     *
     * The spacing option is supported when `series.type` is set to `"bar"`, `"column"`, `"candlestick"`, `"ohlc"`,
     * and ``"candlestick"`.
     */
    spacing: number;
    /**
     * A Boolean value indicating if the series has to be stacked.
     *
     * The stack option is supported when `series.type` is set to `"bar"`, `"column"`, `"line"`, `"area"`,
     * `"verticalLine"`, `"verticalArea"`, `"radarLine"`, `"radarArea"`, and `"radarColumn"`.
     */
    stack: SeriesStack;
    /**
     * The default type of the series.
     *
     * The supported values are:
     *
     * - `area`
     * - `bar`
     * - `bubble`
     * - `bullet`
     * - `candlestick`
     * - `column`
     * - `donut`
     * - `funnel`
     * - `line`
     * - `ohlc`
     * - `pie`
     * - `polarArea`
     * - `polarLine`
     * - `polarScatter`
     * - `radarArea`
     * - `radarColumn`
     * - `radarLine`
     * - `scatter`
     * - `scatterLine`
     * - `waterfall`
     * - `verticalArea`
     * - `verticalBullet`
     * - `verticalLine`
     */
    type: string;
    /**
     * A function that can be used to create a custom visual for the points. Applicable for the Bar and Column
     * series.
     *
     * The available argument fields are:
     *
     * - `rect`&mdash;The `kendo.geometry.Rect` that defines where the visual has to be rendered.
     * - `options`&mdash;The point options.
     * - `createVisual`&mdash;A function that can be used to get the default visual.
     * - `category`&mdash;The point category.
     * - `dataItem`&mdash;The point `dataItem`.
     * - `value`&mdash;The point value.
     * - `sender`&mdash;The Chart instance.
     * - `series`&mdash;The point series.
     */
    visual: (e: SeriesVisualArgs) => void;
    /**
     * The Chart series label configuration.
     *
     * The Chart displays the series labels when the `seriesDefaults.labels.visible` option is set to `true`.
     */
    labels: any;
    /**
     * The `seriesDefaults` notes configuration.
     */
    notes: any;
    /**
     * The configuration options of the chart series tooltip.
     *
     * The chart series tooltip is displayed when the `seriesDefaults.tooltip.visible` option is set to `true`.
     */
    tooltip: any;
    constructor(configurationService: ConfigurationService);
}
