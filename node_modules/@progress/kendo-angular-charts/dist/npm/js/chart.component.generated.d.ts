import { OnChanges, SimpleChange } from '@angular/core';
import { EventEmitter } from '@angular/core';
import { ConfigurationService } from './common/configuration.service';
import { DragAction } from './common/property-types';
/**
 * @hidden
 */
export declare abstract class ChartComponentGenerated implements OnChanges {
    configurationService: ConfigurationService;
    /**
     * Specifies if it is possible to pan the Chart.
     */
    pannable: DragAction;
    /**
     * Sets the preferred rendering engine.
     * If it is not supported by the browser, the Chart will switch to the first available mode.
     *
     * The supported values are:
     *
     * - `"svg"`&mdash;If available, renders the widget as an inline SVG document.
     * - `"vml"`&mdash;If available, renders the widget as a VML.
     * - `"canvas"`&mdash;If available, renders the widget as a Canvas element.
     */
    renderAs: string;
    /**
     * The default colors for the Chart series. When all colors are used, new colors are pulled from the
     * start again.
     */
    seriesColors: string[];
    /**
     * The Chart title configuration options or text.
     */
    title: string | any;
    /**
     * If set to `true`, the Chart will play animations when displaying the series. By default, animations are
     * enabled.
     */
    transitions: boolean;
    /**
     * Specifies if the Chart can be zoomed.
     */
    zoomable: boolean | any;
    /**
     * The default options for all Chart axes. Accepts the options supported by `categoryAxis`, `valueAxis`,
     * `xAxis`, and `yAxis`.
     */
    axisDefaults: any;
    /**
     * The category axis configuration options.
     */
    categoryAxis: any;
    /**
     * The Chart area configuration options. Represents the entire visible area of the Chart.
     */
    chartArea: any;
    /**
     * The Chart legend configuration options.
     */
    legend: any;
    /**
     * The Chart panes configuration.
     *
     * Panes are used to split the Chart in two or more parts. The panes are ordered from top to bottom.
     *
     * Each axis can be associated with a pane by setting its pane option to the name of the desired pane.
     * Axis that do not have a specified pane are placed in the top (default) pane.
     *
     * Series are moved to the desired pane by associating them with an axis.
     */
    panes: any;
    /**
     * The plot area configuration options. The plot area is the area which displays the series.
     */
    plotArea: any;
    /**
     * The configuration of the Chart series.
     *
     * The series type is determined by the value of the type field.
     * If a type value is missing, the type is assumed to be the one specified in `seriesDefaults`.
     *
     * Some options accept functions as an argument. They will be evaluated for each point (supplied as
     * parameter). If no value is returned, the `theme` or `seriesDefaults` value are used.
     */
    series: any;
    /**
     * The default options for all series.
     */
    seriesDefaults: any;
    /**
     * The configuration options of the chart series tooltips.
     *
     * The chart series tooltip is displayed when the `tooltip.visible` option is set to `true`.
     */
    tooltip: any;
    /**
     * The value axis configuration options.
     */
    valueAxis: any;
    /**
     * The x-axis configuration options of the Scatter Chart. Supports all `valueAxis` options.
     */
    xAxis: any;
    /**
     * The y-axis configuration options of the Scatter Chart. Supports all `valueAxis` options.
     */
    yAxis: any;
    /**
     * Fired when the user clicks an axis label.
     *
     * The event handler function context (available via the `this` keyword) will be set to the widget
     * instance.
     */
    axisLabelClick: EventEmitter<any>;
    /**
     * Fired as long as the user is dragging the Chart using the mouse or swipe gestures.
     *
     * The event handler function context (available via the `this` keyword) will be set to the widget
     * instance.
     */
    drag: EventEmitter<any>;
    /**
     * Fired when the user stops dragging the Chart.
     *
     * The event handler function context (available via the this keyword) will be set to the widget
     * instance.
     */
    dragEnd: EventEmitter<any>;
    /**
     * Fired when the user starts dragging the Chart.
     *
     * The event handler function context (available via the `this` keyword) will be set to the widget
     * instance.
     */
    dragStart: EventEmitter<any>;
    /**
     * Fires when a legend item is hovered.
     */
    legendItemHover: EventEmitter<any>;
    /**
     * Fired when the user clicks one of the notes.
     *
     * The event handler function context (available via the `this` keyword) will be set to the widget
     * instance.
     */
    noteClick: EventEmitter<any>;
    /**
     * Fired when the user hovers one of the notes.
     *
     * The event handler function context (available via the `this` keyword) will be set to the widget
     * instance.
     */
    noteHover: EventEmitter<any>;
    /**
     * Fired when the user clicks the plot area.
     *
     * The click event will be triggered by the `tap` and `contextmenu` events. The `e.originalEvent.type` field can
     * be inspected to distinguish between the original events.
     */
    plotAreaClick: EventEmitter<any>;
    /**
     * Fired when the user hovers the plot area.
     */
    plotAreaHover: EventEmitter<any>;
    /**
     * Fired when the Chart is ready to render on screen.
     *
     * For example, it is possible to use it to remove loading indicators.
     * Changes to options will be ignored.
     *
     * The event handler function context (available via the `this` keyword) will be set to the widget
     * instance.
     */
    render: EventEmitter<any>;
    /**
     * Fired when the user modifies the selection.
     *
     * The range units are:
     *
     * - Generic axis&mdash;Category index (0-based).
     * - Date axis&mdash;Date instance.
     *
     * The event handler function context (available via the `this` keyword) will be set to the widget
     * instance.
     */
    select: EventEmitter<any>;
    /**
     * Fired when the user completes modifying the selection.
     *
     * The range units are:
     *
     * - Generic axis&mdash;Category index (0-based).
     * - Date axis&mdash;Date instance.
     *
     * The event handler function context (available via the this keyword) will be set to the widget
     * instance.
     */
    selectEnd: EventEmitter<any>;
    /**
     * Fired when the user starts modifying the axis selection.
     *
     * The range units are:
     *
     * - Generic axis&mdash;Category index (0-based).
     * - Date axis&mdash;Date instance.
     *
     * The event handler function context (available via the `this` keyword) will be set to the widget
     * instance.
     */
    selectStart: EventEmitter<any>;
    /**
     * Fired when the user clicks the Chart series.
     *
     * The click event will be triggered by the `tap` and `contextmenu` events. To distinguish between the original events,
     * inspect the `e.originalEvent.type` field.
     */
    seriesClick: EventEmitter<any>;
    /**
     * Fired when the user hovers the Chart series.
     *
     * The event handler function context (available via the `this` keyword) will be set to the widget
     * instance.
     */
    seriesHover: EventEmitter<any>;
    /**
     * Fired as long as the user is zooming the Chart using the mousewheel operation.
     *
     * The event handler function context (available via the `this` keyword) will be set to the widget
     * instance.
     */
    zoom: EventEmitter<any>;
    /**
     * Fired when the user stops zooming the Chart.
     *
     * The event handler function context (available via the `this` keyword) will be set to the widget
     * instance.
     */
    zoomEnd: EventEmitter<any>;
    /**
     * Fired when the user uses the mousewheel to zoom the Chart.
     *
     * The event handler function context (available via the `this` keyword) will be set to the widget
     * instance.
     */
    zoomStart: EventEmitter<any>;
    protected instance: any;
    private handlers;
    constructor(configurationService: ConfigurationService);
    ngOnChanges(changes: {
        [propertyName: string]: SimpleChange;
    }): void;
    protected bindEvents(): void;
    protected unbindEvents(): void;
    private bindHandler(name, handler);
    private unbindHandler(name);
}
