import 'core-js/es6';

import { drawing as draw } from '@progress/kendo-drawing';

import CategoricalPlotArea from '../../src/chart/plotarea/categorical-plotarea';
import OHLCChart from '../../src/chart/ohlc-chart/ohlc-chart';
import OHLCPoint from '../../src/chart/ohlc-chart/ohlc-point';
import ClipAnimation from '../../src/chart/animations/clip-animation';
import { RootElement, Box } from '../../src/core';
import { deepExtend, autoFormat } from '../../src/common';
import categoriesCount from '../../src/chart/utils/categories-count';

import { ok, equal, sameBox, sameLinePath } from '../../test/test-helpers';
import { createChart, destroyChart }  from '../test-helpers';

const SANS = "Arial,Helvetica,sans-serif";
const SANS12 = "12px " + SANS;
const chartBox = new Box(0, 0, 800, 600);
const TOLERANCE = 1;
let ohlcChart, root, firstPoint, firstLine;

function setupOHLCChart(plotArea, options, rootOptions) {
    ohlcChart = new OHLCChart(plotArea, options);

    root = new RootElement(rootOptions);
    root.append(ohlcChart);

    root.reflow();
    root.renderVisual();

    firstPoint = ohlcChart.points[0];
    const visual = firstPoint.visual;
    const mainVisual = visual.children[0];
    firstLine = mainVisual.children[0];
}

function stubPlotArea(getCategorySlot, getValueSlot, options) {
    return new function() {
        this.categoryAxis = this.primaryCategoryAxis = {
            getSlot: getCategorySlot,
            options: {
                axisCrossingValue: 0,
                categories: options.categoryAxis.categories
            }
        };

        this.valueAxis = {
            getSlot: getValueSlot,
            options: {
                axisCrossingValue: 0
            },
            startValue: function() {
                return 0;
            }
        };

        this.namedCategoryAxes = { };
        this.namedValueAxes = {};

        this.seriesCategoryAxis = function(series) {
            return series.categoryAxis ?
                this.namedCategoryAxes[series.categoryAxis] : this.primaryCategoryAxis;
        };

        this.options = options;
    };
}

(function() {
    const series = { data: [[3,4,1,2]], type: "ohlc" };
    const VALUE_AXIS_MAX = 4;
    const CATEGORY_AXIS_Y = 2;

    const getCategorySlot = function(categoryIndex) {
        return new Box(categoryIndex, CATEGORY_AXIS_Y, categoryIndex + 1, CATEGORY_AXIS_Y);
    };

    const getValueSlot = function(value = 0) {        
        const valueY = VALUE_AXIS_MAX - value;
        const slotTop = Math.min(CATEGORY_AXIS_Y, valueY);
        const slotBottom = Math.max(CATEGORY_AXIS_Y, valueY);

        return new Box(0, slotTop, 0, slotBottom);
    };

    const plotArea = stubPlotArea(getCategorySlot, getValueSlot, {
            categoryAxis: {
                categories: ["A", "B"]
            }
        }
    );

    // ------------------------------------------------------------
    describe('OHLC Chart', () => {
        beforeEach(() => {
            setupOHLCChart(plotArea, { series: [ series ] });
        });

        it("removes the series points if the visible is set to false", () => {
            const chart = createChart({
                seriesDefaults: {
                    type: "ohlc"
                },
                series: [{
                    data: [[2,4,1,3]],
                    visible: false
                },{
                    data: [[2,4,1,3]]
                }]
            });

            const points = chart._plotArea.charts[0].points;
            ok(points.length === 1);

            destroyChart(chart);
        });

        it("creates points for ohlcChart data points", () => {
            equal(ohlcChart.points.length, series.data.length);
        });

        it("creates empty points for null values", () => {
            setupOHLCChart(plotArea, { series: [{
                data: [[2,4,1,3], null], type: "ohlc"
            }]});
            equal(ohlcChart.points[1], undefined);
        });

        it("creates empty points for undefined values", () => {
            setupOHLCChart(plotArea, { series: [{
                data: [[2,4,1,3], undefined], type: "ohlc"
            }]});
            equal(ohlcChart.points[1], undefined);
        });

        it("creates empty points for partially undefined values", () => {
            setupOHLCChart(plotArea, { series: [{
                data: [[2,4,1,3], [0, 1, undefined, 2]], type: "ohlc"
            }]});
            equal(ohlcChart.points[1], undefined);
        });

        it("empty points are not collapsed", () => {
            setupOHLCChart(plotArea, { series: [{
                data: [[2,4,1,3], null, [2, 4, 1, 3]], type: "ohlc"
            }]});
            equal(ohlcChart.points[2].box.x1, 2);
        });

        it("reports minimum series value for default axis", () => {
            equal(ohlcChart.valueAxisRanges[undefined].min, series.data[0][2]);
        });

        it("reports maximum series value for default axis", () => {
            equal(ohlcChart.valueAxisRanges[undefined].max, series.data[0][1]);
        });

        it("reports number of categories", () => {
            setupOHLCChart(plotArea, { series: [ series ]});
            equal(categoriesCount(ohlcChart.options.series), series.data.length);
        });

        it("sets point owner", () => {
            ok(ohlcChart.points[0].owner === ohlcChart);
        });

        it("sets point series", () => {
            ok(ohlcChart.points[0].series === series);
        });

        it("sets point series index", () => {
            ok(ohlcChart.points[0].seriesIx === 0);
        });

        it("sets point category", () => {
            equal(ohlcChart.points[0].category, "A");
        });

        it("sets correct category if multiple categoryAxis are used", () => {
            const plotArea = new CategoricalPlotArea([{
                categoryAxis: "A",
                type: "ohlc",
                data: [[2,4,1,3]]
            }, {
                type: "ohlc",
                categoryAxis: "B",
                data: [[1,2,3,4]]
            }], {
                categoryAxis: [{
                    name: "A",
                    categories: [1]
                }, {
                    name: "B",
                    categories: [2]
                }]
            });

            equal(plotArea.charts.length, 2);
            equal(plotArea.charts[0].points[0].category, 1);
            equal(plotArea.charts[1].points[0].category, 2);
        });

        it("sets point dataItem", () => {
            equal(typeof ohlcChart.points[0].dataItem, "object");
        });
    });

    // ------------------------------------------------------------
    describe('OHLC Chart / Rendering', () => {
        beforeEach(() => {
            setupOHLCChart(plotArea, {
                series: [ deepExtend({
                    line: {
                        width: 4,
                        dashType: "dot"
                    },
                    color: "lineColor",
                    opacity: 0.5
                },
                series)]
            });
        });

        it("sets line width", () => {
            equal(firstLine.options.stroke.width, 4);
        });

        it("sets line color", () => {
            equal(firstLine.options.stroke.color, "lineColor");
        });

        it("sets line opacity", () => {
            equal(firstLine.options.stroke.opacity, 0.5);
        });

        it("sets line dashType", () => {
            equal(firstLine.options.stroke.dashType, "dot");
        });

        it("creates visual", () => {
            ok(ohlcChart.visual);
        });

        it("creates clip animation", () => {
            ok(ohlcChart.animation);
            ok(ohlcChart.animation instanceof ClipAnimation);
            sameBox(ohlcChart.animation.options.box, root.box);
            sameLinePath(ohlcChart.animation.element, draw.Path.fromRect(root.box.toRect()));
        });

        it("does not create clip animation if transitions are disabled", () => {
            setupOHLCChart(plotArea, { series: [ series ] }, {
                transitions: false
            });

            ok(!ohlcChart.animation);
            ok(!ohlcChart.visual.clip());
        });

        it("does not set clip on points by default", () => {
            const points = ohlcChart.points;
            for (let idx = 0; idx < points.length; idx++) {
                ok(!points[idx].visual.clip());
            }
        });

        it("sets animation clip path to points with zIndex", () => {
            setupOHLCChart(plotArea, {
                series: [{
                    type: "ohlc",
                    data: [[3,4,1,2]],
                    zIndex: 1
                }]
            });

            const clip = ohlcChart.points[0].visual.clip();
            ok(clip);
            ok(clip === ohlcChart.animation.element);
        });
    });

    // ------------------------------------------------------------
    describe('OHLC Chart / Rendering / Highlight', () => {
        beforeEach(() => {
            setupOHLCChart(plotArea, {
                series: [series]
            });
        });

        it("createHighlight renders default line width", () => {
            const line = firstPoint.createHighlight().children[0];

            equal(line.options.stroke.width, 1);
        });

        it("createHighlight renders custom line width", () => {
            firstPoint.options.highlight.line.width = 2;
            const line = firstPoint.createHighlight().children[0];

            equal(line.options.stroke.width, 2);
        });

        it("createHighlight renders default line color (computed)", () => {
            firstPoint.color = "#ffffff";
            const line = firstPoint.createHighlight().children[0];

            equal(line.options.stroke.color, "#cccccc");
        });

        it("createHighlight renders custom line color", () => {
            firstPoint.options.highlight.line.color = "red";
            const line = firstPoint.createHighlight().children[0];

            equal(line.options.stroke.color, "red");
        });

        it("createHighlight renders default line opacity", () => {
            const line = firstPoint.createHighlight().children[0];

            equal(line.options.stroke.opacity, 1);
        });

        it("createHighlight renders custom line opacity", () => {
            firstPoint.options.highlight.line.opacity = 0.5;
            const line = firstPoint.createHighlight().children[0];

            equal(line.options.stroke.opacity, 0.5);
        });
    });

})();

(function() {
    const MARGIN = 5;
    const PADDING = 5;
    const BORDER = 5;
    let ohlcChart, ohlcPoint;

    const plotArea = stubPlotArea(
        function(categoryIndex) {
            return new Box();
        },
        function(value) {
            return new Box();
        },
        {
            categoryAxis: { }
        }
    );

    function createOHLCChart(options) {
        ohlcChart = new OHLCChart(plotArea, {
            series: [deepExtend({
                name: "ohlcSeries",
                data: [[3,4,2,1]],
                dashType: "dashType",
                color: "lineColor",
                opacity: 0.7,
                width: 0.2,
                type: "ohlc"
            }, options)]
        });
        ohlcPoint = ohlcChart.points[0];
    }

    // ------------------------------------------------------------
    describe('OHLC Chart / Configuration', () => {
        beforeEach(() => {
            createOHLCChart();
        });

        it("applies series color to point border", () => {
            equal(ohlcPoint.color, "lineColor");
        });

        it("applies opacity to point", () => {
            equal(ohlcPoint.options.opacity, 0.7);
        });

        it("applies dashType", () => {
            equal(ohlcPoint.options.dashType, "dashType");
        });

        it("applies line width", () => {
            equal(ohlcPoint.options.width, 0.2);
        });

        it("applies color function", () => {
            createOHLCChart({
                color: function(p) { return "#f00" }
            });

            equal(ohlcPoint.color, "#f00");
        });

        it("applies color function for each point", 2, () => {
            createOHLCChart({
                data: [[3,4,2,1], [3,4,2,1]],
                color: function() { ok(true); }
            });
        });

        it("color fn argument contains value", 1, () => {
            createOHLCChart({
                color: function(p) { equal(p.value.open, 3); }
            });
        });

        it("color fn argument contains dataItem", 1, () => {
            createOHLCChart({
                color: function(p) {
                    equal(p.dataItem, [3,4,2,1]);
                }
            });
        });

        it("color fn argument contains series", 1, () => {
            createOHLCChart({
                color: function(p) { equal(p.series.name, "ohlcSeries"); }
            });
        });
    });

})();

(function() {

    const VALUE = {
        open: 2,
        high: 4,
        low: 1,
        close: 3

    };
    const TOOLTIP_OFFSET = 5;
    const CATEGORY = "A";
    const SERIES_NAME = "series";
    let point, box, label, root;

    function createPoint(options) {
        point = new OHLCPoint(VALUE,
            deepExtend({
                labels: { font: SANS12 }
            }, options)
        );

        point.category = CATEGORY;
        point.dataItem = { value: VALUE };
        point.series = { name: SERIES_NAME };

        point.owner = {
            formatPointValue: function(point, tooltipFormat) {
                return autoFormat(tooltipFormat, point.value);
            },
            seriesValueAxis: function(series) {
                return {
                    getSlot: function(a,b) {
                        return new Box();
                    }
                };
            },
            pane: {
                clipBox: function() {
                    return new Box(0, 0, 100, 100);
                }
            }
        }

        box = new Box(0, 0, 100, 100);
        point.reflow(box);

        root = new RootElement();
        root.append(point);
    }

    // ------------------------------------------------------------
    describe('OHLC Point', () => {
        beforeEach(() => {
            createPoint();
        });

        it("sets point border width", () => {
            createPoint({ border: { width: 4 } });
            equal(point.options.border.width, 4);
        });

        it("sets point opacity", () => {
            createPoint({ opacity: 0.5 });
            equal(point.options.opacity, 0.5);
        });

        it("tooltipAnchor is at top right of point", () => {
            const { point: anchor, align } = point.tooltipAnchor();
            equal([anchor.x, anchor.y], [point.box.x2 + TOOLTIP_OFFSET, point.box.y1 + TOOLTIP_OFFSET], TOLERANCE);
            equal(align.horizontal, "left");
            equal(align.vertical, "top");
        });
    });

})();

(function() {
    const COLOR = "red";
    
    const data = [{
        open: 2,
        high: 4,
        low: 1,
        close: 3,
        color: COLOR
    }];
    let chart, point;

    function createOHLCChart(candlestickSeries) {
        chart = createChart({            
            series: [deepExtend({
                type: "ohlc",
                data: data
            }, candlestickSeries)]
        });

        point = chart._plotArea.charts[0].points[0];
    }

    // ------------------------------------------------------------
    describe('OHLC Chart / Data Binding', () => {
        afterEach(() => {
            destroyChart(chart);
        });

        it("binds to 4-element array", () => {
            createOHLCChart({
                data: [[2, 4, 0, 3]]
            });

            equal(point.value, { open: 2, high: 4, low: 0, close: 3 });
        });

        it("binds open, high, low and close field", () => {
            createOHLCChart({
                openField: "open",
                highField: "high",
                lowField: "low",
                closeField: "close"
            });

            equal(point.value, { open: 2, high: 4, low: 1, close: 3 });
        });

        it("binds color field", () => {
            createOHLCChart({
                openField: "open",
                highField: "high",
                lowField: "low",
                closeField: "close",
                colorField: "color"
            });

            equal(point.color, COLOR);
        });

        it("evaluates color function", () => {
            createOHLCChart({
                openField: "open",
                highField: "high",
                lowField: "low",
                closeField: "close",
                colorField: "color",
                color: function() {
                    return "foo";
                }
            });

            equal(point.color, "foo");
        });
    });

})();
