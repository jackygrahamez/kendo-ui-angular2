module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(208);


/***/ },

/***/ 104:
/***/ function(module, exports) {

	module.exports = require("../mixins/observers-mixin");

/***/ },

/***/ 160:
/***/ function(module, exports) {

	module.exports = require("./point");

/***/ },

/***/ 193:
/***/ function(module, exports) {

	module.exports = require("../common/to-matrix");

/***/ },

/***/ 194:
/***/ function(module, exports) {

	module.exports = require("./matrix");

/***/ },

/***/ 208:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _observersMixin = __webpack_require__(104);

	var _observersMixin2 = _interopRequireDefault(_observersMixin);

	var _toMatrix = __webpack_require__(193);

	var _toMatrix2 = _interopRequireDefault(_toMatrix);

	var _matrix2 = __webpack_require__(194);

	var _matrix3 = _interopRequireDefault(_matrix2);

	var _point = __webpack_require__(160);

	var _point2 = _interopRequireDefault(_point);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Transformation = function () {
	    function Transformation() {
	        var matrix = arguments.length <= 0 || arguments[0] === undefined ? _matrix3.default.unit() : arguments[0];

	        _classCallCheck(this, Transformation);

	        this._matrix = matrix;
	    }

	    _createClass(Transformation, [{
	        key: 'clone',
	        value: function clone() {
	            return new Transformation(this._matrix.clone());
	        }
	    }, {
	        key: 'equals',
	        value: function equals(other) {
	            return other && other._matrix.equals(this._matrix);
	        }
	    }, {
	        key: 'translate',
	        value: function translate(x, y) {
	            this._matrix = this._matrix.multiplyCopy(_matrix3.default.translate(x, y));

	            this._optionsChange();
	            return this;
	        }
	    }, {
	        key: 'scale',
	        value: function scale(scaleX) {
	            var scaleY = arguments.length <= 1 || arguments[1] === undefined ? scaleX : arguments[1];
	            var origin = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];

	            var originPoint = origin;

	            if (originPoint) {
	                originPoint = _point2.default.create(originPoint);
	                this._matrix = this._matrix.multiplyCopy(_matrix3.default.translate(originPoint.x, originPoint.y));
	            }

	            this._matrix = this._matrix.multiplyCopy(_matrix3.default.scale(scaleX, scaleY));

	            if (originPoint) {
	                this._matrix = this._matrix.multiplyCopy(_matrix3.default.translate(-originPoint.x, -originPoint.y));
	            }

	            this._optionsChange();
	            return this;
	        }
	    }, {
	        key: 'rotate',
	        value: function rotate(angle, origin) {
	            var originPoint = _point2.default.create(origin) || _point2.default.ZERO;

	            this._matrix = this._matrix.multiplyCopy(_matrix3.default.rotate(angle, originPoint.x, originPoint.y));

	            this._optionsChange();
	            return this;
	        }
	    }, {
	        key: 'multiply',
	        value: function multiply(transformation) {
	            var matrix = (0, _toMatrix2.default)(transformation);

	            this._matrix = this._matrix.multiplyCopy(matrix);

	            this._optionsChange();
	            return this;
	        }
	    }, {
	        key: 'matrix',
	        value: function matrix(_matrix) {
	            if (_matrix) {
	                this._matrix = _matrix;
	                this._optionsChange();
	                return this;
	            }

	            return this._matrix;
	        }
	    }, {
	        key: '_optionsChange',
	        value: function _optionsChange() {
	            this.optionsChange({
	                field: "transform",
	                value: this
	            });
	        }
	    }]);

	    return Transformation;
	}();

	_observersMixin2.default.extend(Transformation.prototype);

	exports.default = Transformation;

/***/ }

/******/ });