module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(424);


/***/ },

/***/ 385:
/***/ function(module, exports) {

	module.exports = require("./is-function");

/***/ },

/***/ 424:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _isFunction = __webpack_require__(385);

	var _isFunction2 = _interopRequireDefault(_isFunction);

	var _htmlEncode = __webpack_require__(425);

	var _htmlEncode2 = _interopRequireDefault(_htmlEncode);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var argumentNameRegExp = /^\w+/;
	var encodeRegExp = /\$\{([^}]*)\}/g;
	var escapedCurlyRegExp = /\\\}/g;
	var curlyRegExp = /__CURLY__/g;
	var escapedSharpRegExp = /\\#/g;
	var sharpRegExp = /__SHARP__/g;

	function compilePart(part, stringPart) {
	    if (stringPart) {
	        return "'" + part.split("'").join("\\'").split('\\"').join('\\\\\\"').replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/\t/g, "\\t") + "'";
	    }

	    var first = part.charAt(0);
	    var rest = part.substring(1);

	    if (first === "=") {
	        return "+(" + rest + ")+";
	    } else if (first === ":") {
	        return "+this.$kendoHtmlEncode(" + rest + ")+";
	    }

	    return ";" + part + ";$kendoOutput+=";
	}
	var TEMPLATE_SCOPE = {
	    $kendoHtmlEncode: _htmlEncode2.default
	};
	var Template = {

	    paramName: "data", // name of the parameter of the generated template

	    useWithBlock: true, // whether to wrap the template in a with() block

	    render: function render(template, data) {
	        var html = "";

	        for (var idx = 0, length = data.length; idx < length; idx++) {
	            html += template(data[idx]);
	        }

	        return html;
	    },

	    compile: function compile(template, options) {
	        if ((0, _isFunction2.default)(template)) {
	            return template;
	        }

	        var settings = Object.assign({}, this, options);
	        var paramName = settings.paramName;
	        var useWithBlock = settings.useWithBlock;

	        var argumentName = paramName.match(argumentNameRegExp)[0];
	        var functionBody = "var $kendoOutput;";

	        functionBody += useWithBlock ? "with(" + paramName + "){" : "";
	        functionBody += "$kendoOutput=";

	        var parts = template.replace(escapedCurlyRegExp, "__CURLY__").replace(encodeRegExp, "#=this.$kendoHtmlEncode($1)#").replace(curlyRegExp, "}").replace(escapedSharpRegExp, "__SHARP__").split("#");

	        for (var idx = 0; idx < parts.length; idx++) {
	            functionBody += compilePart(parts[idx], idx % 2 === 0);
	        }

	        functionBody += useWithBlock ? ";}" : ";";
	        functionBody += "return $kendoOutput;";
	        functionBody = functionBody.replace(sharpRegExp, "#");

	        try {
	            var fn = new Function(argumentName, functionBody).bind(TEMPLATE_SCOPE);
	            fn._slotCount = Math.floor(parts.length / 2);
	            return fn;
	        } catch (e) {
	            throw new Error('Invalid template:\'' + template + '\' Generated code:\' ' + functionBody + '\'');
	        }
	    }
	};

	var template = Template.compile.bind(Template);

	exports.default = template;

/***/ },

/***/ 425:
/***/ function(module, exports) {

	module.exports = require("./html-encode");

/***/ }

/******/ });