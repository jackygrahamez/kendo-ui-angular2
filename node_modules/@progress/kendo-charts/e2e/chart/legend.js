import 'core-js/es6';

import { createChart, destroyChart, clickChart, triggerEvent } from '../test-helpers';

import { ok, equal, createSpy } from '../../test/test-helpers';

// ------------------------------------------------------------
let chart, legend, legendItem, legendItemOverlay;

function setupLegendItemEvent(options, itemIndex) {
    chart = createChart(Object.assign(true, {
        series: [{
            type: "line",
            data: [1,2,3],
            name: "test",
            color: "color"
        }]
    }, options));

    legend = chart._model.children[0];
    legendItem = legend.children[0].children[0].children[itemIndex || 0];

    legendItemOverlay = legendItem._itemOverlay.observers()[0].element;
}

describe('LegendItem / Events / click', () => {
    afterEach(() => {
        destroyChart(chart);
    });

    it("fires when clicking item overlay", () => {
        const options = createSpy({
            legendItemClick: function() { ok(true); }
        }, "legendItemClick");
        setupLegendItemEvent(options);
        clickChart(chart, legendItemOverlay);
        expect(options.legendItemClick).toHaveBeenCalledTimes(1);
    });

    it("event arguments contain DOM element", () => {
        setupLegendItemEvent({
            legendItemClick: function(e) {
                ok(e.element === legendItemOverlay);
            }
        });
        clickChart(chart, legendItemOverlay);
    });

    it("event arguments contain series name as text", () => {
        setupLegendItemEvent({
            legendItemClick: function(e) {
                equal(e.text, "test");
            }
        });
        clickChart(chart, legendItemOverlay);
    });

    it("event arguments contain series", () => {
        setupLegendItemEvent({
            legendItemClick: function(e) {
                equal(e.series.type, "line");
            }
        });
        clickChart(chart, legendItemOverlay);
    });

    it("event arguments contain seriesIndex", () => {
        setupLegendItemEvent({
            series: [{
                name: "series1"
            }, {
                name: "series2"
            }],
            legendItemClick: function(e) {
                equal(e.seriesIndex, 1);
            }
        }, 1);
        clickChart(chart, legendItemOverlay);
    });
});

// ------------------------------------------------------------
describe('LegendItem / Events / hover', () => {
    afterEach(() => {
        destroyChart(chart);
    });

    it("fires when hovering item overlay", () => {
        const options = createSpy({
            legendItemHover: function() { ok(true); }
        }, "legendItemHover");

        setupLegendItemEvent(options);

        triggerEvent("mouseover", legendItemOverlay);

        expect(options.legendItemHover).toHaveBeenCalledTimes(1);
    });

    it("event arguments contain DOM element", () => {
        setupLegendItemEvent({
            legendItemHover: function(e) {
                ok(e.element === legendItemOverlay);
            }
        });
        triggerEvent("mouseover", legendItemOverlay);
    });

    it("event arguments contain series name as text", () => {
        setupLegendItemEvent({
            legendItemHover: function(e) {
                equal(e.text, "test");
            }
        });
        triggerEvent("mouseover", legendItemOverlay);
    });

    it("event arguments contain series", () => {
        setupLegendItemEvent({
            legendItemHover: function(e) {
                equal(e.series.type, "line");
            }
        });
        triggerEvent("mouseover", legendItemOverlay);
    });

    it("event arguments contain seriesIndex", () => {
        setupLegendItemEvent({
            series: [{
                name: "series1"
            }, {
                name: "series2"
            }],
            legendItemHover: function(e) {
                equal(e.seriesIndex, 1);
            }
        }, 1);
        triggerEvent("mouseover", legendItemOverlay);
    });
});