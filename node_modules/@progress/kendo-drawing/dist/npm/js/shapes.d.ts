import { Transformation, Point, Circle as GeometryCircle, Arc as GeometryArc, Rect as GeometryRect } from './geometry';

export class OptionsStore {

    observer: any;

    constructor(options?: any);

    get(field: string): any;
    set(field: string, value: any): void;

}

export interface ElementOptions {
    clip?: Path;
    cursor?: string;
    opacity?: number;
    transform?: Transformation;
    visible?: boolean;
}

export interface TooltipOptions {
  // TODO
}

export class Element {

    options: OptionsStore;

    parent: Group;

    constructor(options?: ElementOptions);

    bbox(): GeometryRect;
    clip(): Path;
    clip(clip: Path): void;
    clippedBBox(): GeometryRect;
    containsPoint(point: Point): boolean;
    opacity(): number;
    opacity(opacity: number): void;
    transform(): Transformation;
    transform(transform: Transformation): void;
    visible(): boolean;
    visible(visible: boolean): void;

}

export class Group extends Element {

    options: OptionsStore;

    children: any;

    constructor(options?: GroupOptions);

    append(element: Element): void;
    clear(): void;
    clip(): Path;
    clip(clip: Path): void;
    clippedBBox(): GeometryRect;
    containsPoint(point: Point): boolean;
    insert(position: number, element: Element): void;
    opacity(): number;
    opacity(opacity: number): void;
    remove(element: Element): void;
    removeAt(index: number): void;
    visible(): boolean;
    visible(visible: boolean): void;

}

export interface GroupOptions {
    name?: string;
    clip?: Path;
    cursor?: string;
    opacity?: number;
    transform?: Transformation;
    visible?: boolean;
}

export interface FillOptions {
    color?: string;
    opacity?: number;
}

export interface StrokeOptions {

    color?: string;
    dashType?: string;
    lineCap?: string;
    lineJoin?: string;
    opacity?: number;
    width?: number;
}

export class Circle extends Element {

    options: OptionsStore;

    constructor(geometry: GeometryCircle, options?: CircleOptions);

    bbox(): GeometryRect;
    clip(): Path;
    clip(clip: Path): void;
    clippedBBox(): GeometryRect;
    containsPoint(point: Point): boolean;
    geometry(): GeometryCircle;
    geometry(value: GeometryCircle): void;
    fill(color: string, opacity?: number): Circle;
    opacity(): number;
    opacity(opacity: number): void;
    stroke(color: string, width?: number, opacity?: number): Circle;
    transform(): Transformation;
    transform(transform: Transformation): void;
    visible(): boolean;
    visible(visible: boolean): void;

}

export interface CircleOptions {
    name?: string;
    clip?: Path;
    cursor?: string;
    fill?: FillOptions;
    opacity?: number;
    stroke?: StrokeOptions; 
    transform?: Transformation;
    visible?: boolean;
}

export class Arc extends Element {

    options: OptionsStore;

    constructor(geometry: GeometryArc, options?: ArcOptions);

    bbox(): GeometryRect;
    clip(): Path;
    clip(clip: Path): void;
    clippedBBox(): GeometryRect;
    containsPoint(point: Point): boolean;
    geometry(): GeometryArc;
    geometry(value: GeometryArc): void;
    fill(color: string, opacity?: number): Arc;
    opacity(): number;
    opacity(opacity: number): void;
    stroke(color: string, width?: number, opacity?: number): Arc;
    transform(): Transformation;
    transform(transform: Transformation): void;
    visible(): boolean;
    visible(visible: boolean): void;

}

export interface ArcOptions {
    name?: string;
    clip?: Path;
    cursor?: string;
    fill?: FillOptions;
    opacity?: number;
    stroke?: StrokeOptions;
    transform?: Transformation;
    visible?: boolean;
}

export class Path extends Element {


    options: OptionsStore;

    segments: any;

    constructor(options?: PathOptions);

    static fromPoints(points: any): Path;
    static fromRect(rect: GeometryRect): Path;
    static parse(svgPath: string, options?: any): Path;

    bbox(): GeometryRect;
    clip(): Path;
    clip(clip: Path): void;
    clippedBBox(): GeometryRect;
    close(): Path;
    containsPoint(point: Point): boolean;
    curveTo(controlOut: any, controlIn: any, endPoint: any): Path;
    curveTo(controlOut: any, controlIn: any, endPoint: Point): Path;
    curveTo(controlOut: any, controlIn: Point, endPoint: any): Path;
    curveTo(controlOut: any, controlIn: Point, endPoint: Point): Path;
    curveTo(controlOut: Point, controlIn: any, endPoint: any): Path;
    curveTo(controlOut: Point, controlIn: any, endPoint: Point): Path;
    curveTo(controlOut: Point, controlIn: Point, endPoint: any): Path;
    curveTo(controlOut: Point, controlIn: Point, endPoint: Point): Path;
    fill(color: string, opacity?: number): Path;
    lineTo(x: number, y?: number): Path;
    lineTo(x: any, y?: number): Path;
    lineTo(x: Point, y?: number): Path;
    moveTo(x: number, y?: number): Path;
    moveTo(x: any, y?: number): Path;
    moveTo(x: Point, y?: number): Path;
    opacity(): number;
    opacity(opacity: number): void;
    stroke(color: string, width?: number, opacity?: number): Path;
    transform(): Transformation;
    transform(transform: Transformation): void;
    visible(): boolean;
    visible(visible: boolean): void;

}

export interface PathOptions {
    name?: string;
    clip?: Path;
    cursor?: string;
    fill?: FillOptions;
    opacity?: number;
    stroke?: StrokeOptions;
    tooltip?: TooltipOptions;
    transform?: Transformation;
    visible?: boolean;
}

export class MultiPath extends Element {

    options: OptionsStore;

    paths: any;

    constructor(options?: MultiPathOptions);

    bbox(): GeometryRect;
    clip(): Path;
    clip(clip: Path): void;
    clippedBBox(): GeometryRect;
    close(): MultiPath;
    containsPoint(point: Point): boolean;
    curveTo(controlOut: any, controlIn: any, endPoint: any): MultiPath;
    curveTo(controlOut: any, controlIn: any, endPoint: Point): MultiPath;
    curveTo(controlOut: any, controlIn: Point, endPoint: any): MultiPath;
    curveTo(controlOut: any, controlIn: Point, endPoint: Point): MultiPath;
    curveTo(controlOut: Point, controlIn: any, endPoint: any): MultiPath;
    curveTo(controlOut: Point, controlIn: any, endPoint: Point): MultiPath;
    curveTo(controlOut: Point, controlIn: Point, endPoint: any): MultiPath;
    curveTo(controlOut: Point, controlIn: Point, endPoint: Point): MultiPath;
    fill(color: string, opacity?: number): MultiPath;
    lineTo(x: number, y?: number): MultiPath;
    lineTo(x: any, y?: number): MultiPath;
    lineTo(x: Point, y?: number): MultiPath;
    moveTo(x: number, y?: number): MultiPath;
    moveTo(x: any, y?: number): MultiPath;
    moveTo(x: Point, y?: number): MultiPath;
    opacity(): number;
    opacity(opacity: number): void;
    stroke(color: string, width?: number, opacity?: number): MultiPath;
    transform(): Transformation;
    transform(transform: Transformation): void;
    visible(): boolean;
    visible(visible: boolean): void;

}

export interface MultiPathOptions {
    name?: string;
    clip?: Path;
    cursor?: string;
    fill?: FillOptions;
    opacity?: number;
    stroke?: StrokeOptions;
    tooltip?: TooltipOptions;
    transform?: Transformation;
    visible?: boolean;
}

export class Rect extends Element {

    options: OptionsStore;

    constructor(geometry: GeometryRect, options?: RectOptions);

    bbox(): GeometryRect;
    clip(): Path;
    clip(clip: Path): void;
    clippedBBox(): GeometryRect;
    containsPoint(point: Point): boolean;
    geometry(): GeometryRect;
    geometry(value: GeometryRect): void;
    fill(color: string, opacity?: number): Rect;
    opacity(): number;
    opacity(opacity: number): void;
    stroke(color: string, width?: number, opacity?: number): Rect;
    transform(): Transformation;
    transform(transform: Transformation): void;
    visible(): boolean;
    visible(visible: boolean): void;

}

export interface RectOptions {
    name?: string;
    clip?: Path;
    cursor?: string;
    fill?: FillOptions;
    opacity?: number;
    stroke?: StrokeOptions;
    tooltip?: TooltipOptions;
    transform?: Transformation;
    visible?: boolean;
}

export class Text extends Element {
    
    options: OptionsStore;

    constructor(content: string, position: Point, options?: TextOptions);

    bbox(): GeometryRect;
    clip(): Path;
    clip(clip: Path): void;
    clippedBBox(): GeometryRect;
    containsPoint(point: Point): boolean;
    content(): string;
    content(value: string): void;
    fill(color: string, opacity?: number): Text;
    opacity(): number;
    opacity(opacity: number): void;
    position(): Point;
    position(value: Point): void;
    stroke(color: string, width?: number, opacity?: number): Text;
    transform(): Transformation;
    transform(transform: Transformation): void;
    visible(): boolean;
    visible(visible: boolean): void;

}

export interface TextOptions {
    name?: string;
    clip?: Path;
    cursor?: string;
    fill?: FillOptions;
    font?: string;
    opacity?: number;
    stroke?: StrokeOptions;
    tooltip?: TooltipOptions;
    transform?: Transformation;
    visible?: boolean;
}

export class Image extends Element {

    options: OptionsStore;

    constructor(src: string, rect: GeometryRect);

    bbox(): GeometryRect;
    clip(): Path;
    clip(clip: Path): void;
    clippedBBox(): GeometryRect;
    containsPoint(point: Point): boolean;
    opacity(): number;
    opacity(opacity: number): void;
    src(): string;
    src(value: string): void;
    rect(): GeometryRect;
    rect(value: GeometryRect): void;
    transform(): Transformation;
    transform(transform: Transformation): void;
    visible(): boolean;
    visible(visible: boolean): void;

}

export interface ImageOptions {
    name?: string;
    clip?: Path;
    cursor?: string;
    opacity?: number;
    tooltip?: TooltipOptions;
    transform?: Transformation;
    visible?: boolean;
}

export class Layout extends Group {

    options: OptionsStore;

    constructor(rect: GeometryRect, options?: LayoutOptions);

    rect(): GeometryRect;
    rect(rect: GeometryRect): void;
    reflow(): void;

}

export interface LayoutOptions {
    name?: string;
    alignContent?: string;
    alignItems?: string;
    justifyContent?: string;
    lineSpacing?: number;
    spacing?: number;
    orientation?: string;
    wrap?: boolean;
}
