module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(476);


/***/ },

/***/ 23:
/***/ function(module, exports) {

	module.exports = require("@progress/kendo-drawing");

/***/ },

/***/ 60:
/***/ function(module, exports) {

	module.exports = require("../common/constants");

/***/ },

/***/ 112:
/***/ function(module, exports) {

	module.exports = require("../common/deep-extend");

/***/ },

/***/ 113:
/***/ function(module, exports) {

	module.exports = require("../common/defined");

/***/ },

/***/ 471:
/***/ function(module, exports) {

	module.exports = require("../common/value-or-default");

/***/ },

/***/ 476:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _kendoDrawing = __webpack_require__(23);

	var _constants = __webpack_require__(60);

	var _valueOrDefault = __webpack_require__(471);

	var _valueOrDefault2 = _interopRequireDefault(_valueOrDefault);

	var _defined = __webpack_require__(113);

	var _defined2 = _interopRequireDefault(_defined);

	var _deepExtend = __webpack_require__(112);

	var _deepExtend2 = _interopRequireDefault(_deepExtend);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var ChartElement = function () {
	    function ChartElement(options) {
	        _classCallCheck(this, ChartElement);

	        this.children = [];

	        this.options = (0, _deepExtend2.default)({}, this.options, options);
	    }

	    _createClass(ChartElement, [{
	        key: 'reflow',
	        value: function reflow(targetBox) {
	            var children = this.children;
	            var box = void 0;

	            for (var i = 0; i < children.length; i++) {
	                var currentChild = children[i];
	                currentChild.reflow(targetBox);

	                box = box ? box.wrap(currentChild.box) : currentChild.box.clone();
	            }

	            this.box = box || targetBox;
	        }
	    }, {
	        key: 'destroy',
	        value: function destroy() {
	            var children = this.children;

	            if (this.animation) {
	                this.animation.destroy();
	            }

	            for (var i = 0; i < children.length; i++) {
	                children[i].destroy();
	            }
	        }
	    }, {
	        key: 'getRoot',
	        value: function getRoot() {
	            var parent = this.parent;

	            return parent ? parent.getRoot() : null;
	        }
	    }, {
	        key: 'getChart',
	        value: function getChart() {
	            var root = this.getRoot();
	            if (root) {
	                return root.chart;
	            }
	        }
	    }, {
	        key: 'translateChildren',
	        value: function translateChildren(dx, dy) {
	            var children = this.children;
	            var childrenCount = children.length;

	            for (var i = 0; i < childrenCount; i++) {
	                children[i].box.translate(dx, dy);
	            }
	        }
	    }, {
	        key: 'append',
	        value: function append() {
	            for (var i = 0; i < arguments.length; i++) {
	                var item = arguments[i];
	                this.children.push(item);
	                item.parent = this;
	            }
	        }
	    }, {
	        key: 'renderVisual',
	        value: function renderVisual() {
	            if (this.options.visible === false) {
	                return;
	            }

	            this.createVisual();

	            this.addVisual();

	            this.renderChildren();

	            this.createAnimation();
	            this.renderComplete();
	        }
	    }, {
	        key: 'addVisual',
	        value: function addVisual() {
	            if (this.visual) {
	                this.visual.chartElement = this;

	                if (this.parent) {
	                    this.parent.appendVisual(this.visual);
	                }
	            }
	        }
	    }, {
	        key: 'renderChildren',
	        value: function renderChildren() {
	            var children = this.children;
	            var length = children.length;
	            for (var i = 0; i < length; i++) {
	                children[i].renderVisual();
	            }
	        }
	    }, {
	        key: 'createVisual',
	        value: function createVisual() {
	            this.visual = new _kendoDrawing.drawing.Group({
	                zIndex: this.options.zIndex,
	                visible: (0, _valueOrDefault2.default)(this.options.visible, true)
	            });
	        }
	    }, {
	        key: 'createAnimation',
	        value: function createAnimation() {
	            if (this.visual) {
	                this.animation = _kendoDrawing.drawing.Animation.create(this.visual, this.options.animation);
	            }
	        }
	    }, {
	        key: 'appendVisual',
	        value: function appendVisual(childVisual) {
	            if (!childVisual.chartElement) {
	                childVisual.chartElement = this;
	            }

	            if (childVisual.options.noclip) {
	                this.clipRoot().visual.append(childVisual);
	            } else if ((0, _defined2.default)(childVisual.options.zIndex)) {
	                this.stackRoot().stackVisual(childVisual);
	            } else if (this.visual) {
	                this.visual.append(childVisual);
	            } else {
	                // Allow chart elements without visuals to
	                // pass through child visuals
	                this.parent.appendVisual(childVisual);
	            }
	        }
	    }, {
	        key: 'clipRoot',
	        value: function clipRoot() {
	            if (this.parent) {
	                return this.parent.clipRoot();
	            }

	            return this;
	        }
	    }, {
	        key: 'stackRoot',
	        value: function stackRoot() {
	            if (this.parent) {
	                return this.parent.stackRoot();
	            }

	            return this;
	        }
	    }, {
	        key: 'stackVisual',
	        value: function stackVisual(childVisual) {
	            var zIndex = childVisual.options.zIndex || 0;
	            var visuals = this.visual.children;
	            var length = visuals.length;
	            var pos = void 0;

	            for (pos = 0; pos < length; pos++) {
	                var sibling = visuals[pos];
	                var here = (0, _valueOrDefault2.default)(sibling.options.zIndex, 0);
	                if (here > zIndex) {
	                    break;
	                }
	            }

	            this.visual.insert(pos, childVisual);
	        }
	    }, {
	        key: 'traverse',
	        value: function traverse(callback) {
	            var children = this.children;
	            var length = children.length;

	            for (var i = 0; i < length; i++) {
	                var child = children[i];

	                callback(child);
	                if (child.traverse) {
	                    child.traverse(callback);
	                }
	            }
	        }
	    }, {
	        key: 'closest',
	        value: function closest(match) {
	            var element = this;
	            var matched = false;

	            while (element && !matched) {
	                matched = match(element);

	                if (!matched) {
	                    element = element.parent;
	                }
	            }

	            if (matched) {
	                return element;
	            }
	        }
	    }, {
	        key: 'renderComplete',
	        value: function renderComplete() {}
	    }, {
	        key: 'hasHighlight',
	        value: function hasHighlight() {
	            var options = (this.options || {}).highlight;
	            return !(!this.createHighlight || options && options.visible === false);
	        }
	    }, {
	        key: 'toggleHighlight',
	        value: function toggleHighlight(show) {
	            var _this = this;

	            var options = (this.options || {}).highlight;
	            var customVisual = (options || {}).visual;
	            var highlight = this._highlight;

	            if (!highlight) {
	                var _ret = function () {
	                    var highlightOptions = {
	                        fill: {
	                            color: _constants.WHITE,
	                            opacity: 0.2
	                        },
	                        stroke: {
	                            color: _constants.WHITE,
	                            width: 1,
	                            opacity: 0.2
	                        }
	                    };

	                    if (customVisual) {
	                        highlight = _this._highlight = customVisual(Object.assign(_this.highlightVisualArgs(), {
	                            createVisual: function createVisual() {
	                                return _this.createHighlight(highlightOptions);
	                            },
	                            sender: _this.getChart(),
	                            series: _this.series,
	                            dataItem: _this.dataItem,
	                            category: _this.category,
	                            value: _this.value,
	                            percentage: _this.percentage,
	                            runningTotal: _this.runningTotal,
	                            total: _this.total
	                        }));

	                        if (!highlight) {
	                            return {
	                                v: void 0
	                            };
	                        }
	                    } else {
	                        highlight = _this._highlight = _this.createHighlight(highlightOptions);
	                    }

	                    highlight.options.zIndex = _this.options.zIndex;
	                    _this.appendVisual(highlight);
	                }();

	                if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
	            }

	            highlight.visible(show);
	        }
	    }, {
	        key: 'createGradientOverlay',
	        value: function createGradientOverlay(element, options, gradientOptions) {
	            var overlay = new _kendoDrawing.drawing.Path(Object.assign({
	                stroke: {
	                    color: "none"
	                },
	                fill: this.createGradient(gradientOptions),
	                closed: element.options.closed
	            }, options));

	            overlay.segments.elements(element.segments.elements());

	            return overlay;
	        }
	    }, {
	        key: 'createGradient',
	        value: function createGradient(options) {
	            if (this.parent) {
	                return this.parent.createGradient(options);
	            }
	        }
	    }]);

	    return ChartElement;
	}();

	ChartElement.prototype.options = {};

	exports.default = ChartElement;

/***/ }

/******/ });