import 'core-js/es6';
import { $ } from 'e2e-utils';

import Selection from '../../src/chart/selection';
import { deepExtend } from '../../src/common';

import { ok, equal, close, stubMethod } from '../../test/test-helpers';
import { triggerEvent, createChart, destroyChart }  from '../test-helpers';
import '../../test/text-measure';
import '../../test/intl';

let chart, categoryAxis, selection, sOpts;

function setup(options) {
    chart = createChart(deepExtend({
        series: [{
            data: new Array(100),
        }],
        categoryAxis: {
            name: "main"
        },
        chartArea: {
            width: 600,
            height: 400
        }
    }, options));

    categoryAxis = chart._plotArea.categoryAxis;
    selection = chart._selections[0];
    if (selection) {
        sOpts = selection.options;
    }
}

function stubArgs(x = 0, y = 0, options = {}) {
    const target = $("<div class='k-leftHandle' />")[0];
    return deepExtend({
        originalEvent: { target: target },
        pageX: x,
        pageY: y,
        preventDefault: function() {},
        target: target
    }, options);
}

function triggerMousewheel(delta) {
    selection._mousewheel({
        originalEvent: {},
        detail: delta * 3,
        preventDefault: function() {},
        stopPropagation: function() {}
    });
}

// ------------------------------------------------------------
describe('Selection / Configuration', () => {

    afterEach(() => {
        if ( chart) {
            destroyChart(chart);
        }
    });

    it("Selection is created for categoryAxis", () => {
        setup({
            categoryAxis: {
                select: {
                    from: 0,
                    to: 1
                }
            }
        });

        ok(chart._selections[0] instanceof Selection);
    });

    it("Selection is not created if not configured", () => {
        setup();

        ok(!categoryAxis.selection);
    });

    it("Selection is not created for vertical categoryAxis", () => {
        setup({
            seriesDefaults: {
                type: "bar"
            },
            categoryAxis: {
                select: {
                    from: 0,
                    to: 1
                }
            }
        });

        ok(!categoryAxis.selection);
    });

    it("selection is destroyed on chart destroy", () => {
        stubMethod(Selection.prototype, "destroy", () => {
            ok(true);
        }, () => {
            setup({
                categoryAxis: {
                    select: {
                        from: 0,
                        to: 1
                    }
                }
            });

            destroyChart(chart);
            chart = null;
        });
    });

    it("selection is destroyed on chart redraw", () => {
        stubMethod(Selection.prototype, "destroy", () => {
            ok(true);
        }, () => {
            setup({
                categoryAxis: {
                    select: {
                        from: 0,
                        to: 1
                    }
                }
            });

            chart.redraw();
        });
    });

    it("selection can reach last category for non-justified charts", () => {
        setup({
            series: [{
                type: "column",
                data: new Array(10)
            }],
            categoryAxis: {
                select: {
                    from: 0,
                    to: 10
                }
            }
        });

        close($(selection.selection).width(), selection.categoryAxis.lineBox().width(), 1);
    });

    it("selection can reach last category for justified charts", () => {
        setup({
            series: [{
                type: "area",
                data: new Array(10)
            }],
            categoryAxis: {
                select: {
                    from: 0,
                    to: 10
                }
            }
        });

        close($(selection.selection).width(), selection.categoryAxis.lineBox().width(), 1);
    });
});

// ------------------------------------------------------------
describe('Selection / Events', () => {
    function defaultSetup() {
        setup({
            categoryAxis: {
                select: {
                    from: 0,
                    to: 2
                }
            }
        });
    }

    afterEach(() => {
        destroyChart(chart);
    });

    it("selectStart fires on UserEvents start", () => {
        defaultSetup();
        chart.bind("selectStart", () => {
            ok(true);
        });

        selection._start(stubArgs());
    });

    it("selectStart fires on tap", () => {
        defaultSetup();
        chart.bind("selectStart", () => {
            ok(true);
        });

        selection._tap(stubArgs());
    });

    it("selectStart does not fire on right click", 0, () => {
        defaultSetup();
        chart.bind("selectStart", () => {
            ok(false);
        });

        selection._tap(stubArgs(0, 0, { originalEvent: { which: 3 } }));
    });

    it("selectStart fires on mousewheel", () => {
        defaultSetup();
        chart.bind("selectStart", () => {
            ok(true);
        });

        triggerMousewheel(1);
    });

    it("selectStart args contain range (from and to)", () => {
        defaultSetup();
        chart.bind("selectStart", function(e) {
            equal(e.from, 0);
            equal(e.to, 2);
        });

        selection._start(stubArgs());
    });

    it("selectStart args contain axis options", () => {
        defaultSetup();
        chart.bind("selectStart", function(e) {
            equal(e.axis.name, "main");
        });

        selection._start(stubArgs());
    });

    it("selectStart can be cancelled", 0, () => {
        defaultSetup();
        chart.bind("select", function(e) {
            ok(false);
        });

        selection.bind("selectStart", function(e) {
            e.preventDefault();
        });

        selection._start(stubArgs());

        selection._move(stubArgs(100, 0));
    });

    it("selectStart on tap can be cancelled", 0, () => {
        defaultSetup();
        chart.bind("select", function(e) {
            ok(false);
        });

        selection.bind("selectStart", function(e) {
            e.preventDefault();
        });

        selection._tap(stubArgs());
    });

    it("select fires on UserEvents move", 1, () => {
        defaultSetup();
        chart.bind("select", function(e) {
            ok(true);
        });

        selection._start(stubArgs());
        selection._move(stubArgs(100, 0));
    });

    it("select fires on tap", 1, () => {
        defaultSetup();
        chart.bind("select", function(e) {
            ok(true);
        });

        selection._tap(stubArgs());
    });

    it("select contains correct category on tap", 2, () => {
        setup({
            series: [{
                data: new Array(10),
            }],
            categoryAxis: {
                select: {
                    from: 0,
                    to: 1
                }
            }
        });

        chart.bind("select", function(e) {
            equal(e.from, 9);
            equal(e.to, 10);
        });

        selection._tap(stubArgs(550));
    });

    it("select contains correct category on tap for justified charts", 2, () => {
        setup({
            series: [{
                type: "area",
                data: new Array(10),
            }],
            categoryAxis: {
                select: {
                    from: 0,
                    to: 1
                }
            }
        });

        chart.bind("select", function(e) {
            equal(e.from, 8);
            equal(e.to, 9);
        });

        selection._tap(stubArgs(580));
    });

    it("select fires on mousewheel", 1, () => {
        defaultSetup();
        chart.bind("select", function(e) {
            ok(true);
        });

        triggerMousewheel(1);
    });

    it("select does not fire twice with the same range", 1, () => {
        defaultSetup();
        chart.bind("select", function(e) {
            ok(true);
        });

        triggerMousewheel(100);
        triggerMousewheel(100);
    });

    it("select args contain axis options on mousewheel", () => {
        defaultSetup();
        chart.bind("select", function(e) {
            equal(e.axis.name, "main");
        });

        triggerMousewheel(1);
    });

    it("select args contain axis options", () => {
        defaultSetup();
        chart.bind("select", function(e) {
            equal(e.axis.name, "main");
        });

        selection._start(stubArgs());
        selection._move(stubArgs(100, 0));
    });

    it("select args contain range (from and to)", () => {
        defaultSetup();
        chart.bind("select", function(e) {
            equal(e.from, 14);
            equal(e.to, 15);
        });

        selection._start(stubArgs());
        selection._move(stubArgs(80, 0));
    });

    it("select does not fire if range is not changed", 1, () => {
        defaultSetup();
        chart.bind("select", function(e) {
            ok(true);
        });

        selection._start(stubArgs());
        selection._move(stubArgs(100, 0));
        selection._move(stubArgs(100, 0));
    });

    it("selectEnd fires on UserEvents end", 1, () => {
        defaultSetup();
        chart.bind("selectEnd", function(e) {
            ok(true);
        });

        selection._start(stubArgs());
        selection._end();
    });

    it("selectEnd fires on tap", 1, () => {
        defaultSetup();
        chart.bind("selectEnd", function(e) {
            ok(true);
        });

        selection._tap(stubArgs());
    });

    it("selectEnd fires after mousewheel", (done) => {
        defaultSetup();
        chart.bind("selectEnd", function(e) {
            ok(true);
            done();
        });

        triggerMousewheel(1);
    });

    it("selectEnd args contain axis options", () => {
        defaultSetup();
        chart.bind("selectEnd", function(e) {
            equal(e.axis.name, "main");
        });

        selection._start(stubArgs());
        selection._end();
    });

    it("selectEnd updates final range on UserEvents end", 1, () => {
        defaultSetup();
        chart.bind("selectEnd", function(e) {
            equal(sOpts.from, 2);
        });

        selection._start(stubArgs());
        selection._move(stubArgs(10, 0));
        selection._end();
    });

    it("selectEnd updates final after mousewheel", (done) => {
        defaultSetup();
        chart.bind("selectEnd", function(e) {
            equal(sOpts.from, 1);
            equal(sOpts.to, 2);
            done();
        });

        triggerMousewheel(-1);
    });
});

// ------------------------------------------------------------
describe('Selection / Mousewheel', () => {

    function mousewheel(element, delta) {
        $(element).trigger($.Event("mousewheel", { originalEvent: { detail: delta * 3 }, preventDefault: function() {}, stopPropagation: function() {} }));
    }

    function defaultSetup() {
        setup({
            categoryAxis: {
                select: {
                    from: 40,
                    to: 60
                }
            }
        });
    }

    afterEach(() => {
        destroyChart(chart);
    });

    it("selection shrinks left on mousewheel up", () => {
        defaultSetup();
        sOpts.mousewheel.zoom = "left";
        triggerMousewheel(-1);

        equal(sOpts.from, 41);
        equal(sOpts.to, 60);
    });

    it("selection shrinks left on mousewheel down", () => {
        defaultSetup();
        sOpts.mousewheel.zoom = "left";
        sOpts.mousewheel.reverse = true;
        triggerMousewheel(1);

        equal(sOpts.from, 41);
        equal(sOpts.to, 60);
    });

    it("selection shrinks right on mousewheel up", () => {
        defaultSetup();
        sOpts.mousewheel.zoom = "right";
        triggerMousewheel(-1);

        equal(sOpts.from, 40);
        equal(sOpts.to, 59);
    });

    it("selection shrinks both sides on mousewheel up", () => {
        defaultSetup();
        triggerMousewheel(-1);

        equal(sOpts.from, 41);
        equal(sOpts.to, 59);
    });

    it("selection shrinking accelerates", () => {
        defaultSetup();
        triggerMousewheel(-10);

        equal(sOpts.from, 59);
    });

    it("selection expands left on mousewheel down", () => {
        defaultSetup();
        sOpts.mousewheel.zoom = "left";
        triggerMousewheel(1);

        equal(sOpts.from, 39);
        equal(sOpts.to, 60);
    });

    it("selection expands left on mousewheel up", () => {
        defaultSetup();
        sOpts.mousewheel.zoom = "left";
        sOpts.mousewheel.reverse = true;
        triggerMousewheel(-1);

        equal(sOpts.from, 39);
        equal(sOpts.to, 60);
    });

    it("selection expands right on mousewheel up", () => {
        defaultSetup();
        sOpts.mousewheel.zoom = "right";
        triggerMousewheel(1);

        equal(sOpts.from, 40);
        equal(sOpts.to, 61);
    });

    it("selection expands both on mousewheel up", () => {
        defaultSetup();
        triggerMousewheel(1);

        equal(sOpts.from, 39);
        equal(sOpts.to, 61);
    });

    it("selection expansion accelerates", () => {
        defaultSetup();
        triggerMousewheel(10);

        equal(sOpts.from, 10);
    });

    it("selection does not expand beyond axis bounds", () => {
        defaultSetup();
        triggerMousewheel(50);

        equal(sOpts.from, 0);
        equal(sOpts.to, 100);
    });

    it("selection does not expand beyond axis bounds for justified charts", () => {
        setup({
            series: [{
                type: "area",
                data: new Array(100)
            }],
            categoryAxis: {
                select: {
                    from: 0,
                    to: 10
                }
            }
        });

        triggerMousewheel(100);

        equal(sOpts.from, 0);
        equal(sOpts.to, 99);
    });

    it("selection does not expand beyond min/max range", () => {
        setup({
            categoryAxis: {
                select: {
                    from: 40,
                    to: 60,
                    min: 30,
                    max: 70
                }
            }
        });

        triggerMousewheel(100);

        equal(sOpts.from, 30);
        equal(sOpts.to, 70);
    });

    it("selection does not react to events when mousewheel is false", 0, () => {
        setup({
            series: [{
                type: "area",
                data: new Array(100)
            }],
            categoryAxis: {
                select: {
                    from: 0,
                    to: 10,
                    mousewheel: false
                }
            },
            selectStart: function() {
                ok(false);
            }
        });

        mousewheel(selection.wrapper, 100);
    });

    it("mousewheel events don't bubble when mousewheel is false", 0, () => {
        setup({
            series: [{
                type: "area",
                data: new Array(100)
            }],
            categoryAxis: {
                select: {
                    from: 0,
                    to: 10,
                    mousewheel: false
                }
            }
        });

        $(chart.element).on("mousewheel", function(e) {
            ok(false);
        });
        triggerEvent("mousewheel", selection.wrapper);

        $(chart.element).off("mousewheel");
    });
});

// ------------------------------------------------------------
describe('Selection / Date axis / Configuration', () => {
    function defaultSetup() {
        setup({
            series: [{
                data: [1,2,3]
            }],
            categoryAxis: {
                categories: [
                    new Date("2012/01/01 00:00"),
                    new Date("2012/01/30 00:00")
                ],
                baseUnit: "days",
                select: {
                    from: "2012/01/10 15:00",
                    to: "2012/01/15 15:00",
                    min: "2012/01/05 00:00",
                    max: "2012/01/15 00:00"
                }
            }
        });
    }

    afterEach(() => {
        destroyChart(chart);
    });

    it("from can be parsed from string", () => {
        defaultSetup();
        ok(sOpts.from instanceof Date);
    });

    it("to can be parsed from string", () => {
        defaultSetup();
        ok(sOpts.to instanceof Date);
    });

    it("min can be parsed from string", () => {
        defaultSetup();
        ok(sOpts.min instanceof Date);
    });

    it("max can be parsed from string", () => {
        defaultSetup();
        ok(sOpts.max instanceof Date);
    });

    it("from is rounded down to prev date", () => {
        defaultSetup();
        equal(sOpts.from, new Date("2012/01/10 00:00"));
    });

    it("to is rounded down to prev date", () => {
        defaultSetup();
        equal(sOpts.to, new Date("2012/01/15 00:00"));
    });

    it("selection can reach last category", () => {
        setup({
            series: [{
                type: "column",
                data: [1,2,3]
            }],
            categoryAxis: {
                categories: [
                    new Date("2012/01/01 00:00"),
                    new Date("2012/01/10 00:00")
                ],
                baseUnit: "days",
                select: {
                    from: "2012/01/01 00:00",
                    to: "2012/01/11 00:00"
                }
            }
        });

        close($(selection.selection).width(), selection.categoryAxis.lineBox().width(), 1);
    });

    it("selection can reach last category for justified charts", () => {
        setup({
            series: [{
                type: "area",
                data: [1,2,3]
            }],
                categoryAxis: {
                    categories: [
                        new Date("2012/01/01 00:00"),
                        new Date("2012/01/10 00:00")
                    ],
                    baseUnit: "days",
                    select: {
                        from: "2012/01/01 00:00",
                        to: "2012/01/10 00:00"
                    }
                }
        });

        close($(selection.selection).width(), selection.categoryAxis.lineBox().width(), 1);
    });
});

// ------------------------------------------------------------
describe('Selection / Date axis', () => {
    function defaultSetup() {
        setup({
            series: [{
                data: [1, 2, 3, 4]
            }],
            categoryAxis: {
                categories: [
                    new Date("2012/01/01 00:00"),
                    new Date("2012/01/02 00:00"),
                    new Date("2012/01/03 00:00"),
                    new Date("2012/01/04 00:00")
                ],
                select: {
                    from: new Date("2012/01/02 00:00"),
                    to: new Date("2012/01/03 00:00")
                }
            }
        });
    }

    afterEach(() => {
        destroyChart(chart);
    });

    it("selection is rendered at chosen location", () => {
        defaultSetup();
        close($(selection.leftMask).width(), 139, 1);
        close($(selection.selection).width(), 138, 1);
    });

    it("selectStart args contain date range", () => {
        defaultSetup();
        chart.bind("selectStart", function(e) {
            equal(e.from, new Date("2012/01/02 00:00"));
            equal(e.to, new Date("2012/01/03 00:00"));
        });

        selection._start(stubArgs());
    });

    it("select args contain date range", () => {
        defaultSetup();
        chart.bind("select", function(e) {
            equal(e.from, new Date("2012/01/01 00:00"));
            equal(e.to, new Date("2012/01/03 00:00"));
        });

        selection._start(stubArgs());
        selection._move(stubArgs(-100, 0));
    });

    it("selectEnd updates date range", 1, () => {
        defaultSetup();
        chart.bind("selectEnd", function(e) {
            equal(sOpts.from, new Date("2012/01/01 00:00"));
        });

        selection._start(stubArgs());
        selection._move(stubArgs(-100, 0));
        selection._end();
    });

    it("selectEnd updates date range after mousewheel", (done) => {
        defaultSetup();
        chart.bind("selectEnd", function(e) {
            equal(sOpts.from, new Date("2012/01/01 00:00"));
            equal(sOpts.to, new Date("2012/01/04 00:00"));
            done();
        });

        triggerMousewheel(1);
    });

    it("selection does not expand beyond axis bounds", () => {
        defaultSetup();
        triggerMousewheel(20);

        equal(sOpts.from, new Date("2012/01/01 00:00"));
        equal(sOpts.to, new Date("2012/01/05 00:00"));
    });

    it("selection does not expand beyond axis bounds for justified charts", () => {
        setup({
            series: [{
                type: "area",
                data: [1,2,3]
            }],
            categoryAxis: {
                categories: [
                    new Date("2012/01/01 00:00"),
                    new Date("2012/01/10 00:00")
                ],
                baseUnit: "days",
                select: {
                    from: "2012/01/01 00:00",
                    to: "2012/01/02 00:00"
                }
            }
        });

        triggerMousewheel(20);

        equal(sOpts.from, new Date("2012/01/01 00:00"));
        equal(sOpts.to, new Date("2012/01/10 00:00"));
    });

    it("selection does not expand beyond min/max range", () => {
        setup({
            series: [{
                type: "area",
                data: [1,2,3]
            }],
            categoryAxis: {
                categories: [
                    new Date("2012/01/01 00:00"),
                    new Date("2012/01/30 00:00")
                ],
                baseUnit: "days",
                select: {
                    from: new Date("2012/01/10 00:00"),
                    to: new Date("2012/01/11 00:00"),
                    min: new Date("2012/01/05 00:00"),
                    max: new Date("2012/01/15 00:00")
                }
            }
        });

        triggerMousewheel(1000);

        equal(sOpts.from, new Date("2012/01/05 00:00"));
        equal(sOpts.to, new Date("2012/01/15 00:00"));
    });

    it("selection expands to min/max range for partial categories", () => {
        setup({
            series: [{
                type: "area",
                data: [1,2]
            }],
            categoryAxis: {
                categories: [
                    new Date("2012/01/05"),
                    new Date("2012/02/05")
                ],
                baseUnit: "months",
                select: {
                    from: new Date("2012/01/10"),
                    to: new Date("2012/01/11"),
                    min: new Date("2012/01/01"),
                    max: new Date("2012/03/01")
                }
            }
        });

        triggerMousewheel(1000);

        equal(sOpts.from, new Date("2012/01/01"));
        equal(sOpts.to, new Date("2012/03/01"));
    });
});
