{"version":3,"sources":["webpack:///webpack/bootstrap 77ab829606301c35fc66?1c80*********************","webpack:///./src/pager-settings.ts"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;ACkBA;;IAEG;AACH,KAAM,iBAAiB,GAAG,UAAC,EAMX;SALZ,mBAAgB,EAAhB,qCAAgB,EAChB,YAAW,EAAX,gCAAW,EACX,YAA2B,EAA3B,qCAA2B,EAC3B,iBAAiB,EAAjB,sCAAiB,EACjB,oBAAmB,EAAnB,wCAAmB;KACa,QAAC;SACjC,wBAAW;SACX,UAAI;SACJ,UAAI;SACJ,SAAS,EAAE,SAAS,KAAK,IAAI,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,GAAG,SAAS;SACvD,0BAAY;MACf,CAAC;AANkC,EAMlC,CAAC;AAEH;;IAEG;AACU,kBAAS,GAAG,UAAC,QAAiC;KACvD,wBAAiB,CAAC,QAAQ,KAAK,IAAI,GAAG,EAAE,GAAG,QAAQ,CAAC;AAApD,EAAoD,CAAC","file":"src/pager-settings.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 77ab829606301c35fc66\n **/","/**\n * The type of the Grid pager. The available values are `numeric` (buttons with numbers) and `input` (input for typing the page number).\n *\n * @example <caption>Sample Configuration</caption>\n * ```ts-no-run\n *\n * <kendo-grid\n *    [pageable]=\"{\n *        type: 'numeric'\n *    }\">\n * </kendo-grid>\n * ```\n */\nexport type PagerType = 'numeric' | 'input';\n\n/**\n * The pager settings of the Grid.\n *\n * @example <caption>Sample Configuration</caption>\n * ```ts-no-run\n *\n * <kendo-grid\n *    [pageable]=\"{\n *        buttonCount: 2,\n *        info: false\n *    }\">\n * </kendo-grid>\n * ```\n */\nexport interface PagerSettings {\n    /**\n     * Sets the maximum numeric buttons count before the buttons are collapsed.\n     */\n    buttonCount?: number;\n\n    /**\n     * Toggles the information about the current page and the total number of records.\n     */\n    info?: boolean;\n\n    /**\n     * Defines the type of the Grid pager.\n     */\n    type?: PagerType;\n\n    /**\n     * Shows a menu for selecting the page size.\n     */\n    pageSizes?: boolean | Array<number>;\n\n    /**\n     * Toggles the **Previous** and **Next** buttons.\n     */\n    previousNext?: boolean;\n}\n\n/**\n * @hidden\n */\nconst normalizeSettings = ({\n    buttonCount = 10,\n    info = true,\n    type = <PagerType>'numeric',\n    pageSizes = false,\n    previousNext = true\n}: PagerSettings): PagerSettings => ({\n    buttonCount,\n    info,\n    type,\n    pageSizes: pageSizes === true ? [5, 10, 20] : pageSizes,\n    previousNext\n});\n\n/**\n * @hidden\n */\nexport const normalize = (settings: PagerSettings | boolean): PagerSettings =>\n    normalizeSettings(settings === true ? {} : settings);\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/pager-settings.ts\n **/"],"sourceRoot":""}