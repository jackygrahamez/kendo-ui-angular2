module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(99);


/***/ },

/***/ 5:
/***/ function(module, exports) {

	module.exports = require("../../common/constants");

/***/ },

/***/ 7:
/***/ function(module, exports) {

	module.exports = require("../../common/defined");

/***/ },

/***/ 23:
/***/ function(module, exports) {

	module.exports = require("@progress/kendo-drawing");

/***/ },

/***/ 24:
/***/ function(module, exports) {

	module.exports = require("../constants");

/***/ },

/***/ 25:
/***/ function(module, exports) {

	module.exports = require("../../common/set-default-options");

/***/ },

/***/ 50:
/***/ function(module, exports) {

	module.exports = require("../../common/deep-extend");

/***/ },

/***/ 55:
/***/ function(module, exports) {

	module.exports = require("../../core");

/***/ },

/***/ 63:
/***/ function(module, exports) {

	module.exports = require("../utils/color");

/***/ },

/***/ 64:
/***/ function(module, exports) {

	module.exports = require("../utils/has-gradient-overlay");

/***/ },

/***/ 65:
/***/ function(module, exports) {

	module.exports = require("../mixins/point-events-mixin");

/***/ },

/***/ 66:
/***/ function(module, exports) {

	module.exports = require("../mixins/note-mixin");

/***/ },

/***/ 67:
/***/ function(module, exports) {

	module.exports = require("../../common/align-path-to-pixel");

/***/ },

/***/ 68:
/***/ function(module, exports) {

	module.exports = require("../../common/value-or-default");

/***/ },

/***/ 99:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _kendoDrawing = __webpack_require__(23);

	var _core = __webpack_require__(55);

	var _pointEventsMixin = __webpack_require__(65);

	var _pointEventsMixin2 = _interopRequireDefault(_pointEventsMixin);

	var _noteMixin = __webpack_require__(66);

	var _noteMixin2 = _interopRequireDefault(_noteMixin);

	var _constants = __webpack_require__(24);

	var _hasGradientOverlay = __webpack_require__(64);

	var _hasGradientOverlay2 = _interopRequireDefault(_hasGradientOverlay);

	var _color = __webpack_require__(63);

	var _color2 = _interopRequireDefault(_color);

	var _constants2 = __webpack_require__(5);

	var _setDefaultOptions = __webpack_require__(25);

	var _setDefaultOptions2 = _interopRequireDefault(_setDefaultOptions);

	var _deepExtend = __webpack_require__(50);

	var _deepExtend2 = _interopRequireDefault(_deepExtend);

	var _alignPathToPixel = __webpack_require__(67);

	var _alignPathToPixel2 = _interopRequireDefault(_alignPathToPixel);

	var _valueOrDefault = __webpack_require__(68);

	var _valueOrDefault2 = _interopRequireDefault(_valueOrDefault);

	var _defined = __webpack_require__(7);

	var _defined2 = _interopRequireDefault(_defined);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Candlestick = function (_ChartElement) {
	    _inherits(Candlestick, _ChartElement);

	    function Candlestick(value, options) {
	        _classCallCheck(this, Candlestick);

	        var _this = _possibleConstructorReturn(this, (Candlestick.__proto__ || Object.getPrototypeOf(Candlestick)).call(this, options));

	        _this.value = value;
	        return _this;
	    }

	    _createClass(Candlestick, [{
	        key: 'reflow',
	        value: function reflow(box) {
	            var options = this.options;
	            var value = this.value;
	            var chart = this.owner;

	            var valueAxis = chart.seriesValueAxis(options);
	            var ocSlot = valueAxis.getSlot(value.open, value.close);
	            var lhSlot = valueAxis.getSlot(value.low, value.high);

	            ocSlot.x1 = lhSlot.x1 = box.x1;
	            ocSlot.x2 = lhSlot.x2 = box.x2;

	            this.realBody = ocSlot;

	            var mid = lhSlot.center().x;
	            var points = [];

	            points.push([[mid, lhSlot.y1], [mid, ocSlot.y1]]);
	            points.push([[mid, ocSlot.y2], [mid, lhSlot.y2]]);

	            this.lines = points;

	            this.box = lhSlot.clone().wrap(ocSlot);

	            if (!this._rendered) {
	                this._rendered = true;
	                this.createNote();
	            }

	            this.reflowNote();
	        }
	    }, {
	        key: 'reflowNote',
	        value: function reflowNote() {
	            if (this.note) {
	                this.note.reflow(this.box);
	            }
	        }
	    }, {
	        key: 'createVisual',
	        value: function createVisual() {
	            _get(Candlestick.prototype.__proto__ || Object.getPrototypeOf(Candlestick.prototype), 'createVisual', this).call(this);
	            this._mainVisual = this.mainVisual(this.options);
	            this.visual.append(this._mainVisual);

	            this.createOverlay();
	        }
	    }, {
	        key: 'mainVisual',
	        value: function mainVisual(options) {
	            var group = new _kendoDrawing.drawing.Group();

	            this.createBody(group, options);
	            this.createLines(group, options);

	            return group;
	        }
	    }, {
	        key: 'createBody',
	        value: function createBody(container, options) {
	            var body = _kendoDrawing.drawing.Path.fromRect(this.realBody.toRect(), {
	                fill: {
	                    color: this.color,
	                    opacity: options.opacity
	                },
	                stroke: null
	            });

	            if (options.border.width > 0) {
	                body.options.set("stroke", {
	                    color: this.getBorderColor(),
	                    width: options.border.width,
	                    dashType: options.border.dashType,
	                    opacity: (0, _valueOrDefault2.default)(options.border.opacity, options.opacity)
	                });
	            }

	            (0, _alignPathToPixel2.default)(body);
	            container.append(body);

	            if ((0, _hasGradientOverlay2.default)(options)) {
	                container.append(this.createGradientOverlay(body, { baseColor: this.color }, (0, _deepExtend2.default)({
	                    end: !options.vertical ? [0, 1] : undefined
	                }, options.overlay)));
	            }
	        }
	    }, {
	        key: 'createLines',
	        value: function createLines(container, options) {
	            this.drawLines(container, options, this.lines, options.line);
	        }
	    }, {
	        key: 'drawLines',
	        value: function drawLines(container, options, lines, lineOptions) {
	            if (!lines) {
	                return;
	            }

	            var lineStyle = {
	                stroke: {
	                    color: lineOptions.color || this.color,
	                    opacity: (0, _valueOrDefault2.default)(lineOptions.opacity, options.opacity),
	                    width: lineOptions.width,
	                    dashType: lineOptions.dashType,
	                    lineCap: "butt"
	                }
	            };

	            for (var i = 0; i < lines.length; i++) {
	                var line = _kendoDrawing.drawing.Path.fromPoints(lines[i], lineStyle);
	                (0, _alignPathToPixel2.default)(line);
	                container.append(line);
	            }
	        }
	    }, {
	        key: 'getBorderColor',
	        value: function getBorderColor() {
	            var border = this.options.border;
	            var borderColor = border.color;

	            if (!(0, _defined2.default)(borderColor)) {
	                borderColor = new _color2.default(this.color).brightness(border._brightness).toHex();
	            }

	            return borderColor;
	        }
	    }, {
	        key: 'createOverlay',
	        value: function createOverlay() {
	            var overlay = _kendoDrawing.drawing.Path.fromRect(this.box.toRect(), {
	                fill: {
	                    color: _constants2.WHITE,
	                    opacity: 0
	                },
	                stroke: null
	            });

	            this.visual.append(overlay);
	        }
	    }, {
	        key: 'createHighlight',
	        value: function createHighlight() {
	            var highlight = this.options.highlight;
	            var normalColor = this.color;

	            this.color = highlight.color || this.color;
	            var overlay = this.mainVisual((0, _deepExtend2.default)({}, this.options, {
	                line: {
	                    color: this.getBorderColor()
	                }
	            }, highlight));
	            this.color = normalColor;

	            return overlay;
	        }
	    }, {
	        key: 'highlightVisual',
	        value: function highlightVisual() {
	            return this._mainVisual;
	        }
	    }, {
	        key: 'highlightVisualArgs',
	        value: function highlightVisualArgs() {
	            return {
	                options: this.options,
	                rect: this.box.toRect(),
	                visual: this._mainVisual
	            };
	        }
	    }, {
	        key: 'tooltipAnchor',
	        value: function tooltipAnchor() {
	            var box = this.box;
	            var clipBox = this.owner.pane.clipBox() || box;

	            return {
	                point: new _core.Point(box.x2 + _constants.TOOLTIP_OFFSET, Math.max(box.y1, clipBox.y1) + _constants.TOOLTIP_OFFSET),
	                align: {
	                    horizontal: _constants2.LEFT,
	                    vertical: _constants2.TOP
	                }
	            };
	        }
	    }, {
	        key: 'formatValue',
	        value: function formatValue(format) {
	            return this.owner.formatPointValue(this, format);
	        }
	    }, {
	        key: 'overlapsBox',
	        value: function overlapsBox(box) {
	            return this.box.overlaps(box);
	        }
	    }]);

	    return Candlestick;
	}(_core.ChartElement);

	(0, _setDefaultOptions2.default)(Candlestick.prototype, {
	    vertical: true,
	    border: {
	        _brightness: 0.8
	    },
	    line: {
	        width: 2
	    },
	    overlay: {
	        gradient: _constants.GLASS
	    },
	    tooltip: {
	        format: '<table>\n                    <tr><th colspan=\'2\'>{4:d}</th></tr>\n                    <tr><td>Open:</td><td>{0:C}</td></tr>\n                    <tr><td>High:</td><td>{1:C}</td></tr>\n                    <tr><td>Low:</td><td>{2:C}</td></tr>\n                    <tr><td>Close:</td><td>{3:C}</td></tr>\n                </table>'
	    },
	    highlight: {
	        opacity: 1,
	        border: {
	            width: 1,
	            opacity: 1
	        },
	        line: {
	            width: 1,
	            opacity: 1
	        }
	    },
	    notes: {
	        visible: true,
	        label: {}
	    }
	});

	(0, _deepExtend2.default)(Candlestick.prototype, _pointEventsMixin2.default);
	(0, _deepExtend2.default)(Candlestick.prototype, _noteMixin2.default);

	exports.default = Candlestick;

/***/ }

/******/ });