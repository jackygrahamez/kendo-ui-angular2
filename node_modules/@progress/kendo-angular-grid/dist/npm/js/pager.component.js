(function(e, a) { for(var i in a) e[i] = a[i]; }(exports, /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(67);


/***/ },

/***/ 5:
/***/ function(module, exports) {

	module.exports = require("@angular/core");

/***/ },

/***/ 67:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(5);
	var pager_settings_1 = __webpack_require__(68);
	/**
	 * @hidden
	 */
	var navButton = function (_a) {
	    var buttonClass = _a.buttonClass, clickExpr = _a.clickExpr, disabledExpr = _a.disabledExpr, iconClass = _a.iconClass, message = _a.message;
	    return ("<a *ngIf=\"settings.previousNext\"\n        href=\"#\"\n        title='" + message + "'\n        (click)=\"" + clickExpr + "\"\n        [ngClass]=\"{\n            'k-link': true,\n            'k-pager-nav': true,\n            'k-state-disabled': " + disabledExpr + ",\n            '" + buttonClass + "': true\n        }\">\n        <span aria-label=\"" + message + "\"\n            [ngClass]=\"{\n                'k-icon':true,\n                '" + iconClass + "': true\n            }\">\n        </span>\n    </a>");
	};
	/**
	 * @hidden
	 */
	var PagerComponent = (function () {
	    function PagerComponent() {
	        this.total = 0;
	        this.skip = 1;
	        this.pageChange = new core_1.EventEmitter();
	        this.settings = pager_settings_1.normalize({});
	    }
	    Object.defineProperty(PagerComponent.prototype, "options", {
	        set: function (value) {
	            this.settings = pager_settings_1.normalize(value);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PagerComponent.prototype, "pagerWrapClass", {
	        get: function () {
	            return true;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PagerComponent.prototype, "gridPagerClass", {
	        get: function () {
	            return true;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PagerComponent.prototype, "widgetClass", {
	        get: function () {
	            return true;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PagerComponent.prototype, "prevButtonsDisabled", {
	        get: function () {
	            return this.currentPage === 1;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PagerComponent.prototype, "nextButtonsDisabled", {
	        get: function () {
	            return this.currentPage === this.totalPages;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PagerComponent.prototype, "showInitialPageSize", {
	        get: function () {
	            var _this = this;
	            return this.settings.pageSizes
	                .filter(function (num) { return num === Number(_this.pageSize); })
	                .length === 0;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    PagerComponent.prototype.pageSizeChange = function (value) {
	        this.pageSize = value;
	        this.changePage(0);
	    };
	    PagerComponent.prototype.changePage = function (page) {
	        this.pageChange.emit({ skip: page * this.pageSize, take: this.pageSize });
	        return false;
	    };
	    Object.defineProperty(PagerComponent.prototype, "currentPage", {
	        get: function () {
	            return Math.floor((this.skip || 0) / this.pageSize) + 1;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PagerComponent.prototype, "totalPages", {
	        get: function () {
	            return Math.ceil((this.total || 0) / this.pageSize);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    PagerComponent.prototype.onInputChange = function (value) {
	        var page = parseInt(value, 10);
	        if (isNaN(page) || page < 1 || page > this.totalPages) {
	            page = this.currentPage;
	        }
	        this.changePage(page - 1);
	    };
	    Object.defineProperty(PagerComponent.prototype, "buttons", {
	        get: function () {
	            var result = [];
	            for (var idx = this.start; idx <= this.end; idx++) {
	                result.push(idx);
	            }
	            return result;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PagerComponent.prototype, "end", {
	        get: function () {
	            return Math.min((this.start + this.settings.buttonCount) - 1, this.totalPages);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PagerComponent.prototype, "maxItems", {
	        get: function () {
	            return Math.min(this.currentPage * this.pageSize, this.total);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PagerComponent.prototype, "start", {
	        get: function () {
	            var page = this.currentPage;
	            var buttonCount = this.settings.buttonCount;
	            if (page > buttonCount) {
	                var reminder = (page % buttonCount);
	                return (reminder === 0) ? (page - buttonCount) + 1 : (page - reminder) + 1;
	            }
	            return 1;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Number)
	    ], PagerComponent.prototype, "total", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Number)
	    ], PagerComponent.prototype, "skip", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Number)
	    ], PagerComponent.prototype, "pageSize", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object), 
	        __metadata('design:paramtypes', [Object])
	    ], PagerComponent.prototype, "options", null);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], PagerComponent.prototype, "pageChange", void 0);
	    __decorate([
	        core_1.HostBinding('class.k-pager-wrap'), 
	        __metadata('design:type', Boolean)
	    ], PagerComponent.prototype, "pagerWrapClass", null);
	    __decorate([
	        core_1.HostBinding('class.k-grid-pager'), 
	        __metadata('design:type', Boolean)
	    ], PagerComponent.prototype, "gridPagerClass", null);
	    __decorate([
	        core_1.HostBinding('class.k-widget'), 
	        __metadata('design:type', Boolean)
	    ], PagerComponent.prototype, "widgetClass", null);
	    PagerComponent = __decorate([
	        core_1.Component({
	            selector: 'kendo-pager',
	            template: "\n        " + navButton({
	                buttonClass: "k-pager-first",
	                clickExpr: "currentPage !== 1 ? changePage(0) : false",
	                disabledExpr: "prevButtonsDisabled",
	                iconClass: "k-i-seek-w",
	                message: "Go to the first page"
	            }) + "\n        " + navButton({
	                buttonClass: "",
	                clickExpr: "currentPage !== 1 ? changePage(currentPage-2) : false",
	                disabledExpr: "prevButtonsDisabled",
	                iconClass: "k-i-arrow-w",
	                message: "Go to the previous page"
	            }) + "\n        <ul [ngClass]=\"{'k-pager-numbers': true, 'k-reset': true}\" *ngIf=\"settings.type === 'numeric'\">\n            <li *ngIf=\"start > 1\"><a class=\"k-link\" href=\"#\" (click)=\"changePage(start - 2)\">...</a></li>\n            <li *ngFor=\"let num of buttons\">\n                <a href=\"#\"\n                    [ngClass]=\"{'k-link': true, 'k-state-selected':currentPage == num}\"\n                    (click)=\"changePage(num - 1)\">\n                    {{num}}\n                </a>\n            </li>\n            <li *ngIf=\"end < totalPages\"><a class=\"k-link\" href=\"#\" (click)=\"changePage(end)\">...</a></li>\n        </ul>\n        <span *ngIf=\"settings.type === 'input'\" [ngClass]=\"{'k-pager-input': true, 'k-label': true}\">\n            Page\n            <input [class.k-textbox]=\"true\" [value]=\"currentPage\" #inputPager (change)=\"onInputChange(inputPager.value)\" />\n            of {{totalPages}}\n        </span>\n        " + navButton({
	                buttonClass: "",
	                clickExpr: "currentPage !== totalPages ? changePage(currentPage) : false",
	                disabledExpr: "nextButtonsDisabled",
	                iconClass: "k-i-arrow-e",
	                message: "Go to the next page"
	            }) + "\n        " + navButton({
	                buttonClass: "k-pager-last",
	                clickExpr: "currentPage !== totalPages ? changePage(totalPages-1) : false",
	                disabledExpr: "nextButtonsDisabled",
	                iconClass: "k-i-seek-e",
	                message: "Go to the last page"
	            }) + "\n        <span *ngIf='settings.info' [ngClass]=\"{'k-pager-info': true, 'k-label': true}\">\n            {{(currentPage - 1) * pageSize + 1}} - {{maxItems}} of {{total}} items\n        </span>\n        <span *ngIf=\"settings.pageSizes\" [ngClass]=\"{'k-pager-sizes': true, 'k-label': true}\">\n            <select #pageSizes (change)=\"pageSizeChange(pageSizes.value)\">\n                <option *ngIf=\"showInitialPageSize\" [value]=\"pageSize\">{{pageSize}}</option>\n                <option *ngFor=\"let page of settings.pageSizes\" [value]=\"page\" [selected]=\"page === pageSize ? true : undefined\">\n                    {{page}}\n                </option>\n            </select>\n            items per page\n        </span>\n  "
	        }), 
	        __metadata('design:paramtypes', [])
	    ], PagerComponent);
	    return PagerComponent;
	}());
	exports.PagerComponent = PagerComponent;


/***/ },

/***/ 68:
/***/ function(module, exports) {

	module.exports = require("./pager-settings");

/***/ }

/******/ })));
//# sourceMappingURL=pager.component.js.map