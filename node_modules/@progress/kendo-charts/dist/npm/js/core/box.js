module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(465);


/***/ },

/***/ 23:
/***/ function(module, exports) {

	module.exports = require("@progress/kendo-drawing");

/***/ },

/***/ 60:
/***/ function(module, exports) {

	module.exports = require("../common/constants");

/***/ },

/***/ 113:
/***/ function(module, exports) {

	module.exports = require("../common/defined");

/***/ },

/***/ 465:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _kendoDrawing = __webpack_require__(23);

	var _point = __webpack_require__(466);

	var _point2 = _interopRequireDefault(_point);

	var _constants = __webpack_require__(60);

	var _getSpacing = __webpack_require__(467);

	var _getSpacing2 = _interopRequireDefault(_getSpacing);

	var _defined = __webpack_require__(113);

	var _defined2 = _interopRequireDefault(_defined);

	var _inArray = __webpack_require__(468);

	var _inArray2 = _interopRequireDefault(_inArray);

	var _rad = __webpack_require__(469);

	var _rad2 = _interopRequireDefault(_rad);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Box = function () {
	    function Box() {
	        var x1 = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];
	        var y1 = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];
	        var x2 = arguments.length <= 2 || arguments[2] === undefined ? 0 : arguments[2];
	        var y2 = arguments.length <= 3 || arguments[3] === undefined ? 0 : arguments[3];

	        _classCallCheck(this, Box);

	        this.x1 = x1;
	        this.y1 = y1;
	        this.x2 = x2;
	        this.y2 = y2;
	    }

	    _createClass(Box, [{
	        key: 'width',
	        value: function width() {
	            return this.x2 - this.x1;
	        }
	    }, {
	        key: 'height',
	        value: function height() {
	            return this.y2 - this.y1;
	        }
	    }, {
	        key: 'translate',
	        value: function translate(dx, dy) {
	            this.x1 += dx;
	            this.x2 += dx;
	            this.y1 += dy;
	            this.y2 += dy;

	            return this;
	        }
	    }, {
	        key: 'move',
	        value: function move(x, y) {
	            var height = this.height();
	            var width = this.width();

	            if ((0, _defined2.default)(x)) {
	                this.x1 = x;
	                this.x2 = this.x1 + width;
	            }

	            if ((0, _defined2.default)(y)) {
	                this.y1 = y;
	                this.y2 = this.y1 + height;
	            }

	            return this;
	        }
	    }, {
	        key: 'wrap',
	        value: function wrap(targetBox) {
	            this.x1 = Math.min(this.x1, targetBox.x1);
	            this.y1 = Math.min(this.y1, targetBox.y1);
	            this.x2 = Math.max(this.x2, targetBox.x2);
	            this.y2 = Math.max(this.y2, targetBox.y2);

	            return this;
	        }
	    }, {
	        key: 'wrapPoint',
	        value: function wrapPoint(point) {
	            this.wrap(new Box(point.x, point.y, point.x, point.y));

	            return this;
	        }
	    }, {
	        key: 'snapTo',
	        value: function snapTo(targetBox, axis) {

	            if (axis === _constants.X || !axis) {
	                this.x1 = targetBox.x1;
	                this.x2 = targetBox.x2;
	            }

	            if (axis === _constants.Y || !axis) {
	                this.y1 = targetBox.y1;
	                this.y2 = targetBox.y2;
	            }

	            return this;
	        }
	    }, {
	        key: 'alignTo',
	        value: function alignTo(targetBox, anchor) {
	            var height = this.height();
	            var width = this.width();
	            var axis = anchor === _constants.TOP || anchor === _constants.BOTTOM ? _constants.Y : _constants.X;
	            var offset = axis === _constants.Y ? height : width;

	            if (anchor === _constants.CENTER) {
	                var targetCenter = targetBox.center();
	                var center = this.center();

	                this.x1 += targetCenter.x - center.x;
	                this.y1 += targetCenter.y - center.y;
	            } else if (anchor === _constants.TOP || anchor === _constants.LEFT) {
	                this[axis + 1] = targetBox[axis + 1] - offset;
	            } else {
	                this[axis + 1] = targetBox[axis + 2];
	            }

	            this.x2 = this.x1 + width;
	            this.y2 = this.y1 + height;

	            return this;
	        }
	    }, {
	        key: 'shrink',
	        value: function shrink(dw, dh) {

	            this.x2 -= dw;
	            this.y2 -= dh;

	            return this;
	        }
	    }, {
	        key: 'expand',
	        value: function expand(dw, dh) {
	            this.shrink(-dw, -dh);
	            return this;
	        }
	    }, {
	        key: 'pad',
	        value: function pad(padding) {
	            var spacing = (0, _getSpacing2.default)(padding);

	            this.x1 -= spacing.left;
	            this.x2 += spacing.right;
	            this.y1 -= spacing.top;
	            this.y2 += spacing.bottom;

	            return this;
	        }
	    }, {
	        key: 'unpad',
	        value: function unpad(padding) {
	            var spacing = (0, _getSpacing2.default)(padding);

	            spacing.left = -spacing.left;
	            spacing.top = -spacing.top;
	            spacing.right = -spacing.right;
	            spacing.bottom = -spacing.bottom;

	            return this.pad(spacing);
	        }
	    }, {
	        key: 'clone',
	        value: function clone() {
	            return new Box(this.x1, this.y1, this.x2, this.y2);
	        }
	    }, {
	        key: 'center',
	        value: function center() {
	            return new _point2.default(this.x1 + this.width() / 2, this.y1 + this.height() / 2);
	        }
	    }, {
	        key: 'containsPoint',
	        value: function containsPoint(point) {

	            return point.x >= this.x1 && point.x <= this.x2 && point.y >= this.y1 && point.y <= this.y2;
	        }
	    }, {
	        key: 'points',
	        value: function points() {
	            return [new _point2.default(this.x1, this.y1), new _point2.default(this.x2, this.y1), new _point2.default(this.x2, this.y2), new _point2.default(this.x1, this.y2)];
	        }
	    }, {
	        key: 'getHash',
	        value: function getHash() {
	            return [this.x1, this.y1, this.x2, this.y2].join(",");
	        }
	    }, {
	        key: 'overlaps',
	        value: function overlaps(box) {
	            return !(box.y2 < this.y1 || this.y2 < box.y1 || box.x2 < this.x1 || this.x2 < box.x1);
	        }
	    }, {
	        key: 'rotate',
	        value: function rotate(rotation) {
	            var width = this.width();
	            var height = this.height();

	            var _center = this.center();

	            var cx = _center.x;
	            var cy = _center.y;


	            var r1 = rotatePoint(0, 0, cx, cy, rotation);
	            var r2 = rotatePoint(width, 0, cx, cy, rotation);
	            var r3 = rotatePoint(width, height, cx, cy, rotation);
	            var r4 = rotatePoint(0, height, cx, cy, rotation);

	            width = Math.max(r1.x, r2.x, r3.x, r4.x) - Math.min(r1.x, r2.x, r3.x, r4.x);
	            height = Math.max(r1.y, r2.y, r3.y, r4.y) - Math.min(r1.y, r2.y, r3.y, r4.y);

	            this.x2 = this.x1 + width;
	            this.y2 = this.y1 + height;

	            return this;
	        }
	    }, {
	        key: 'toRect',
	        value: function toRect() {
	            return new _kendoDrawing.geometry.Rect([this.x1, this.y1], [this.width(), this.height()]);
	        }
	    }, {
	        key: 'hasSize',
	        value: function hasSize() {
	            return this.width() !== 0 && this.height() !== 0;
	        }
	    }, {
	        key: 'align',
	        value: function align(targetBox, axis, alignment) {
	            var c1 = axis + 1;
	            var c2 = axis + 2;
	            var sizeFunc = axis === _constants.X ? _constants.WIDTH : _constants.HEIGHT;
	            var size = this[sizeFunc]();

	            if ((0, _inArray2.default)(alignment, [_constants.LEFT, _constants.TOP])) {
	                this[c1] = targetBox[c1];
	                this[c2] = this[c1] + size;
	            } else if ((0, _inArray2.default)(alignment, [_constants.RIGHT, _constants.BOTTOM])) {
	                this[c2] = targetBox[c2];
	                this[c1] = this[c2] - size;
	            } else if (alignment === _constants.CENTER) {
	                this[c1] = targetBox[c1] + (targetBox[sizeFunc]() - size) / 2;
	                this[c2] = this[c1] + size;
	            }
	        }
	    }]);

	    return Box;
	}();

	function rotatePoint(x, y, cx, cy, angle) {
	    var theta = (0, _rad2.default)(angle);

	    return new _point2.default(cx + (x - cx) * Math.cos(theta) + (y - cy) * Math.sin(theta), cy - (x - cx) * Math.sin(theta) + (y - cy) * Math.cos(theta));
	}

	exports.default = Box;

/***/ },

/***/ 466:
/***/ function(module, exports) {

	module.exports = require("./point");

/***/ },

/***/ 467:
/***/ function(module, exports) {

	module.exports = require("../common/get-spacing");

/***/ },

/***/ 468:
/***/ function(module, exports) {

	module.exports = require("../common/in-array");

/***/ },

/***/ 469:
/***/ function(module, exports) {

	module.exports = require("../common/rad");

/***/ }

/******/ });