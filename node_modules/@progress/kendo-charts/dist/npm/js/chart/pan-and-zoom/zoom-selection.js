module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(201);


/***/ },

/***/ 5:
/***/ function(module, exports) {

	module.exports = require("../../common/constants");

/***/ },

/***/ 147:
/***/ function(module, exports) {

	module.exports = require("../../common");

/***/ },

/***/ 197:
/***/ function(module, exports) {

	module.exports = require("./to-chart-axis-ranges");

/***/ },

/***/ 199:
/***/ function(module, exports) {

	module.exports = require("./accept-key");

/***/ },

/***/ 201:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _acceptKey = __webpack_require__(199);

	var _acceptKey2 = _interopRequireDefault(_acceptKey);

	var _toChartAxisRanges = __webpack_require__(197);

	var _toChartAxisRanges2 = _interopRequireDefault(_toChartAxisRanges);

	var _constants = __webpack_require__(5);

	var _common = __webpack_require__(147);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var ZoomSelection = function () {
	    function ZoomSelection(chart, options) {
	        _classCallCheck(this, ZoomSelection);

	        this.chart = chart;
	        this.options = (0, _common.deepExtend)({}, this.options, options);
	        this.createElement();
	    }

	    _createClass(ZoomSelection, [{
	        key: 'createElement',
	        value: function createElement() {
	            var marquee = this._marquee = document.createElement("div");
	            marquee.className = "k-marquee";
	            var marqueeColor = document.createElement("div");
	            marqueeColor.className = "k-marquee-color";
	            marquee.appendChild(marqueeColor);
	        }
	    }, {
	        key: 'removeElement',
	        value: function removeElement() {
	            if (this._marquee.parentNode) {
	                this._marquee.parentNode.removeChild(this._marquee);
	            }
	        }
	    }, {
	        key: 'setStyles',
	        value: function setStyles(styles) {
	            (0, _common.elementStyles)(this._marquee, styles);
	        }
	    }, {
	        key: 'start',
	        value: function start(e) {
	            if ((0, _acceptKey2.default)(e, this.options.key)) {
	                var chart = this.chart;
	                var point = chart._toModelCoordinates(e.pageX, e.pageY);
	                var zoomPane = this._zoomPane = chart._plotArea.paneByPoint(point);
	                if (zoomPane && zoomPane.clipBox()) {
	                    var clipBox = zoomPane.clipBox().clone();
	                    var offset = this._elementOffset();

	                    clipBox.translate(offset.left, offset.top);
	                    this._zoomPaneClipBox = clipBox;

	                    document.body.appendChild(this._marquee);
	                    this.setStyles({
	                        left: e.pageX + 1,
	                        top: e.pageY + 1,
	                        width: 0,
	                        height: 0
	                    });

	                    return true;
	                }
	            }
	            return false;
	        }
	    }, {
	        key: '_elementOffset',
	        value: function _elementOffset() {
	            var chartElement = this.chart.element;

	            var _elementStyles = (0, _common.elementStyles)(chartElement, ["paddingLeft", "paddingTop"]);

	            var paddingLeft = _elementStyles.paddingLeft;
	            var paddingTop = _elementStyles.paddingTop;

	            var offset = (0, _common.elementOffset)(chartElement);

	            return {
	                left: paddingLeft + offset.left,
	                top: paddingTop + offset.top
	            };
	        }
	    }, {
	        key: 'move',
	        value: function move(e) {
	            var zoomPane = this._zoomPane;
	            if (zoomPane) {
	                this.setStyles(this._selectionPosition(e));
	            }
	        }
	    }, {
	        key: 'end',
	        value: function end(e) {
	            var zoomPane = this._zoomPane;
	            if (zoomPane) {
	                var _elementOffset2 = this._elementOffset();
	                var selectionPosition = this._selectionPosition(e);
	                selectionPosition.left -= _elementOffset2.left;
	                selectionPosition.top -= _elementOffset2.top;

	                var start = { x: selectionPosition.left, y: selectionPosition.top };
	                var end = { x: selectionPosition.left + selectionPosition.width, y: selectionPosition.top + selectionPosition.height };
	                this._updateAxisRanges(start, end);

	                this.removeElement();
	                delete this._zoomPane;

	                return (0, _toChartAxisRanges2.default)(this.axisRanges);
	            }
	        }
	    }, {
	        key: 'zoom',
	        value: function zoom() {
	            var axisRanges = this.axisRanges;
	            if (axisRanges && axisRanges.length) {
	                var plotArea = this.chart._plotArea;
	                for (var idx = 0; idx < axisRanges.length; idx++) {
	                    var axisRange = axisRanges[idx];
	                    plotArea.updateAxisOptions(axisRange.axis, axisRange.range);
	                }
	                plotArea.redraw(plotArea.panes);
	            }
	        }
	    }, {
	        key: 'destroy',
	        value: function destroy() {
	            this.removeElement();
	            delete this._marquee;
	            delete this.chart;
	        }
	    }, {
	        key: '_updateAxisRanges',
	        value: function _updateAxisRanges(start, end) {
	            var lock = (this.options.lock || "").toLowerCase();
	            var axisRanges = [];

	            var axes = this._zoomPane.axes;
	            for (var idx = 0; idx < axes.length; idx++) {
	                var axis = axes[idx];
	                var vertical = axis.options.vertical;
	                if (!(lock === _constants.X && !vertical) && !(lock === _constants.Y && vertical)) {
	                    var range = axis.pointsRange(start, end);
	                    axisRanges.push({
	                        axis: axis,
	                        range: range
	                    });
	                }
	            }

	            this.axisRanges = axisRanges;
	        }
	    }, {
	        key: '_selectionPosition',
	        value: function _selectionPosition(e) {
	            var clipBox = this._zoomPaneClipBox;
	            var startLocation = {
	                x: e.x.startLocation,
	                y: e.y.startLocation
	            };
	            var pageX = e.pageX;
	            var pageY = e.pageY;

	            var lock = (this.options.lock || "").toLowerCase();
	            var left = Math.min(startLocation.x, pageX);
	            var top = Math.min(startLocation.y, pageY);
	            var width = Math.abs(startLocation.x - pageX);
	            var height = Math.abs(startLocation.y - pageY);

	            if (lock === _constants.X) {
	                left = clipBox.x1;
	                width = clipBox.width();
	            }
	            if (lock === _constants.Y) {
	                top = clipBox.y1;
	                height = clipBox.height();
	            }

	            if (pageX > clipBox.x2) {
	                width = clipBox.x2 - startLocation.x;
	            }

	            if (pageX < clipBox.x1) {
	                width = startLocation.x - clipBox.x1;
	            }

	            if (pageY > clipBox.y2) {
	                height = clipBox.y2 - startLocation.y;
	            }

	            if (pageY < clipBox.y1) {
	                height = startLocation.y - clipBox.y1;
	            }

	            return {
	                left: Math.max(left, clipBox.x1),
	                top: Math.max(top, clipBox.y1),
	                width: width,
	                height: height
	            };
	        }
	    }]);

	    return ZoomSelection;
	}();

	ZoomSelection.prototype.options = {
	    key: "shift",
	    lock: "none"
	};

	exports.default = ZoomSelection;

/***/ }

/******/ });