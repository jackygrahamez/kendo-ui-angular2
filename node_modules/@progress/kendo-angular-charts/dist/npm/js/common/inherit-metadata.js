(function(e, a) { for(var i in a) e[i] = a[i]; }(exports, /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(395);


/***/ },

/***/ 395:
/***/ function(module, exports) {

	"use strict";
	/**
	 * See "Angular 2, decorators and class inheritance"
	 * https://medium.com/@ttemplier/angular2-decorators-and-class-inheritance-905921dbd1b7
	 *
	 */
	var METADATA = ['design:paramtypes', 'propMetadata', 'parameters'];
	/**
	 * @hidden
	 */
	function InheritMetadata() {
	    return function (target) {
	        var parentTarget = Object.getPrototypeOf(target.prototype).constructor;
	        METADATA.forEach(function (key) {
	            var parentMeta = Reflect.getMetadata(key, parentTarget);
	            if (parentMeta) {
	                var ownMeta = Reflect.getMetadata(key, target);
	                if (ownMeta) {
	                    Object.assign(ownMeta, parentMeta);
	                }
	                else {
	                    Reflect.defineMetadata(key, parentMeta, target);
	                }
	            }
	        });
	    };
	}
	exports.InheritMetadata = InheritMetadata;
	;


/***/ }

/******/ })));
//# sourceMappingURL=inherit-metadata.js.map