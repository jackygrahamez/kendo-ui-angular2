module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(282);


/***/ },

/***/ 3:
/***/ function(module, exports) {

	module.exports = require("../common/defined");

/***/ },

/***/ 6:
/***/ function(module, exports) {

	module.exports = require("../geometry/point");

/***/ },

/***/ 241:
/***/ function(module, exports) {

	module.exports = require("../common/last");

/***/ },

/***/ 244:
/***/ function(module, exports) {

	module.exports = require("../geometry/rect");

/***/ },

/***/ 261:
/***/ function(module, exports) {

	module.exports = require("../geometry/arc");

/***/ },

/***/ 262:
/***/ function(module, exports) {

	module.exports = require("./element");

/***/ },

/***/ 264:
/***/ function(module, exports) {

	module.exports = require("../mixins/paintable");

/***/ },

/***/ 265:
/***/ function(module, exports) {

	module.exports = require("../mixins/measurable");

/***/ },

/***/ 277:
/***/ function(module, exports) {

	module.exports = require("../geometry/size");

/***/ },

/***/ 281:
/***/ function(module, exports) {

	module.exports = require("./geometry-elements-array");

/***/ },

/***/ 282:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _geometryElementsArray = __webpack_require__(281);

	var _geometryElementsArray2 = _interopRequireDefault(_geometryElementsArray);

	var _element = __webpack_require__(262);

	var _element2 = _interopRequireDefault(_element);

	var _paintable = __webpack_require__(264);

	var _paintable2 = _interopRequireDefault(_paintable);

	var _measurable = __webpack_require__(265);

	var _measurable2 = _interopRequireDefault(_measurable);

	var _last = __webpack_require__(241);

	var _last2 = _interopRequireDefault(_last);

	var _arc = __webpack_require__(261);

	var _arc2 = _interopRequireDefault(_arc);

	var _rect = __webpack_require__(244);

	var _rect2 = _interopRequireDefault(_rect);

	var _segment = __webpack_require__(283);

	var _segment2 = _interopRequireDefault(_segment);

	var _point = __webpack_require__(6);

	var _point2 = _interopRequireDefault(_point);

	var _size = __webpack_require__(277);

	var _size2 = _interopRequireDefault(_size);

	var _rad = __webpack_require__(284);

	var _rad2 = _interopRequireDefault(_rad);

	var _lineIntersectionsCount = __webpack_require__(285);

	var _lineIntersectionsCount2 = _interopRequireDefault(_lineIntersectionsCount);

	var _defined = __webpack_require__(3);

	var _defined2 = _interopRequireDefault(_defined);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Path = function (_Element) {
	    _inherits(Path, _Element);

	    function Path(options) {
	        _classCallCheck(this, Path);

	        var _this = _possibleConstructorReturn(this, (Path.__proto__ || Object.getPrototypeOf(Path)).call(this, options));

	        _this.segments = new _geometryElementsArray2.default();
	        _this.segments.addObserver(_this);

	        if (!(0, _defined2.default)(_this.options.stroke)) {
	            _this.stroke("#000");

	            if (!(0, _defined2.default)(_this.options.stroke.lineJoin)) {
	                _this.options.set("stroke.lineJoin", "miter");
	            }
	        }
	        return _this;
	    }

	    _createClass(Path, [{
	        key: 'moveTo',
	        value: function moveTo(x, y) {
	            this.suspend();
	            this.segments.elements([]);
	            this.resume();

	            this.lineTo(x, y);

	            return this;
	        }
	    }, {
	        key: 'lineTo',
	        value: function lineTo(x, y) {
	            var point = (0, _defined2.default)(y) ? new _point2.default(x, y) : x;
	            var segment = new _segment2.default(point);

	            this.segments.push(segment);

	            return this;
	        }
	    }, {
	        key: 'curveTo',
	        value: function curveTo(controlOut, controlIn, point) {
	            if (this.segments.length > 0) {
	                var lastSegment = (0, _last2.default)(this.segments);
	                var segment = new _segment2.default(point, controlIn);
	                this.suspend();
	                lastSegment.controlOut(controlOut);
	                this.resume();

	                this.segments.push(segment);
	            }

	            return this;
	        }
	    }, {
	        key: 'arc',
	        value: function arc(startAngle, endAngle, radiusX, radiusY, anticlockwise) {
	            if (this.segments.length > 0) {
	                var lastSegment = (0, _last2.default)(this.segments);
	                var anchor = lastSegment.anchor();
	                var start = (0, _rad2.default)(startAngle);
	                var center = new _point2.default(anchor.x - radiusX * Math.cos(start), anchor.y - radiusY * Math.sin(start));
	                var arc = new _arc2.default(center, {
	                    startAngle: startAngle,
	                    endAngle: endAngle,
	                    radiusX: radiusX,
	                    radiusY: radiusY,
	                    anticlockwise: anticlockwise
	                });

	                this._addArcSegments(arc);
	            }

	            return this;
	        }
	    }, {
	        key: 'arcTo',
	        value: function arcTo(end, rx, ry, largeArc, swipe) {
	            if (this.segments.length > 0) {
	                var lastSegment = (0, _last2.default)(this.segments);
	                var anchor = lastSegment.anchor();
	                var arc = _arc2.default.fromPoints(anchor, end, rx, ry, largeArc, swipe);

	                this._addArcSegments(arc);
	            }
	            return this;
	        }
	    }, {
	        key: '_addArcSegments',
	        value: function _addArcSegments(arc) {
	            this.suspend();

	            var curvePoints = arc.curvePoints();

	            for (var i = 1; i < curvePoints.length; i += 3) {
	                this.curveTo(curvePoints[i], curvePoints[i + 1], curvePoints[i + 2]);
	            }

	            this.resume();
	            this.geometryChange();
	        }
	    }, {
	        key: 'close',
	        value: function close() {
	            this.options.closed = true;
	            this.geometryChange();

	            return this;
	        }
	    }, {
	        key: 'rawBBox',
	        value: function rawBBox() {
	            return this._bbox();
	        }
	    }, {
	        key: '_containsPoint',
	        value: function _containsPoint(point) {
	            var segments = this.segments;
	            var length = segments.length;
	            var intersectionsCount = 0;
	            var previous = void 0,
	                current = void 0;

	            for (var idx = 1; idx < length; idx++) {
	                previous = segments[idx - 1];
	                current = segments[idx];
	                intersectionsCount += previous._intersectionsTo(current, point);
	            }

	            if (this.options.closed || !segments[0].anchor().equals(segments[length - 1].anchor())) {
	                intersectionsCount += (0, _lineIntersectionsCount2.default)(segments[0].anchor(), segments[length - 1].anchor(), point);
	            }

	            return intersectionsCount % 2 !== 0;
	        }
	    }, {
	        key: '_isOnPath',
	        value: function _isOnPath(point, width) {
	            var segments = this.segments;
	            var length = segments.length;
	            var pathWidth = width || this.options.stroke.width;

	            if (length > 1) {
	                if (segments[0]._isOnPathTo(segments[1], point, pathWidth, "start")) {
	                    return true;
	                }

	                for (var idx = 2; idx <= length - 2; idx++) {
	                    if (segments[idx - 1]._isOnPathTo(segments[idx], point, pathWidth)) {
	                        return true;
	                    }
	                }

	                if (segments[length - 2]._isOnPathTo(segments[length - 1], point, pathWidth, "end")) {
	                    return true;
	                }
	            }
	            return false;
	        }
	    }, {
	        key: '_bbox',
	        value: function _bbox(matrix) {
	            var segments = this.segments;
	            var length = segments.length;
	            var boundingBox = void 0;

	            if (length === 1) {
	                var anchor = segments[0].anchor().transformCopy(matrix);
	                boundingBox = new _rect2.default(anchor, _size2.default.ZERO);
	            } else if (length > 0) {
	                for (var i = 1; i < length; i++) {
	                    var segmentBox = segments[i - 1].bboxTo(segments[i], matrix);
	                    if (boundingBox) {
	                        boundingBox = _rect2.default.union(boundingBox, segmentBox);
	                    } else {
	                        boundingBox = segmentBox;
	                    }
	                }
	            }

	            return boundingBox;
	        }
	    }], [{
	        key: 'fromRect',
	        value: function fromRect(rect, options) {
	            return new Path(options).moveTo(rect.topLeft()).lineTo(rect.topRight()).lineTo(rect.bottomRight()).lineTo(rect.bottomLeft()).close();
	        }
	    }, {
	        key: 'fromPoints',
	        value: function fromPoints(points, options) {
	            if (points) {
	                var path = new Path(options);

	                for (var i = 0; i < points.length; i++) {
	                    var point = _point2.default.create(points[i]);
	                    if (point) {
	                        if (i === 0) {
	                            path.moveTo(point);
	                        } else {
	                            path.lineTo(point);
	                        }
	                    }
	                }

	                return path;
	            }
	        }
	    }, {
	        key: 'fromArc',
	        value: function fromArc(arc, options) {
	            var path = new Path(options);
	            var startAngle = arc.startAngle;
	            var start = arc.pointAt(startAngle);
	            path.moveTo(start.x, start.y);
	            path.arc(startAngle, arc.endAngle, arc.radiusX, arc.radiusY, arc.anticlockwise);
	            return path;
	        }
	    }]);

	    return Path;
	}(_element2.default);

	Path.prototype.nodeType = "Path";

	_paintable2.default.extend(Path.prototype);
	_measurable2.default.extend(Path.prototype);

	exports.default = Path;

/***/ },

/***/ 283:
/***/ function(module, exports) {

	module.exports = require("../geometry/segment");

/***/ },

/***/ 284:
/***/ function(module, exports) {

	module.exports = require("../geometry/math/rad");

/***/ },

/***/ 285:
/***/ function(module, exports) {

	module.exports = require("../geometry/math/line-intersections-count");

/***/ }

/******/ });