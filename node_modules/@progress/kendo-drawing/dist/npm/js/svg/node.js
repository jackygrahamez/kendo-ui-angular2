module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(331);


/***/ },

/***/ 3:
/***/ function(module, exports) {

	module.exports = require("../common/defined");

/***/ },

/***/ 59:
/***/ function(module, exports) {

	module.exports = require("./node-map");

/***/ },

/***/ 73:
/***/ function(module, exports) {

	module.exports = require("../core/base-node");

/***/ },

/***/ 159:
/***/ function(module, exports) {

	module.exports = require("./constants");

/***/ },

/***/ 322:
/***/ function(module, exports) {

	module.exports = require("./utils/render-all-attributes");

/***/ },

/***/ 324:
/***/ function(module, exports) {

	module.exports = require("./utils/render-attribute");

/***/ },

/***/ 331:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _baseNode = __webpack_require__(73);

	var _baseNode2 = _interopRequireDefault(_baseNode);

	var _renderAllAttributes = __webpack_require__(322);

	var _renderAllAttributes2 = _interopRequireDefault(_renderAllAttributes);

	var _renderAttribute = __webpack_require__(324);

	var _renderAttribute2 = _interopRequireDefault(_renderAttribute);

	var _renderStyle2 = __webpack_require__(332);

	var _renderStyle3 = _interopRequireDefault(_renderStyle2);

	var _nodeMap = __webpack_require__(59);

	var _nodeMap2 = _interopRequireDefault(_nodeMap);

	var _renderSvg = __webpack_require__(333);

	var _renderSvg2 = _interopRequireDefault(_renderSvg);

	var _constants = __webpack_require__(159);

	var _isIe = __webpack_require__(334);

	var _isIe2 = _interopRequireDefault(_isIe);

	var _defined = __webpack_require__(3);

	var _defined2 = _interopRequireDefault(_defined);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var TRANSFORM = "transform";
	var DefinitionMap = {
	    clip: "clip-path",
	    fill: "fill"
	};

	function isDefinition(type, value) {
	    return type === "clip" || type === "fill" && (!value || value.nodeType === "Gradient");
	}

	function baseUrl() {
	    var base = document.getElementsByTagName("base")[0];
	    var href = document.location.href;
	    var hashIndex = href.indexOf("#");
	    var url = "";

	    if (base && !(0, _isIe2.default)()) {
	        if (hashIndex !== -1) {
	            href = href.substring(0, hashIndex);
	        }

	        url = href;
	    }

	    return url;
	}

	function refUrl(id) {
	    return "url(" + baseUrl() + "#" + id + ")";
	}

	var Node = function (_BaseNode) {
	    _inherits(Node, _BaseNode);

	    function Node(srcElement) {
	        _classCallCheck(this, Node);

	        var _this = _possibleConstructorReturn(this, (Node.__proto__ || Object.getPrototypeOf(Node)).call(this, srcElement));

	        _this.definitions = {};
	        return _this;
	    }

	    _createClass(Node, [{
	        key: 'destroy',
	        value: function destroy() {
	            if (this.element) {
	                this.element._kendoNode = null;
	                this.element = null;
	            }

	            this.clearDefinitions();
	            _get(Node.prototype.__proto__ || Object.getPrototypeOf(Node.prototype), 'destroy', this).call(this);
	        }
	    }, {
	        key: 'load',
	        value: function load(elements, pos) {
	            for (var i = 0; i < elements.length; i++) {
	                var srcElement = elements[i];
	                var children = srcElement.children;

	                var childNode = new _nodeMap2.default[srcElement.nodeType](srcElement);

	                if ((0, _defined2.default)(pos)) {
	                    this.insertAt(childNode, pos);
	                } else {
	                    this.append(childNode);
	                }

	                childNode.createDefinitions();

	                if (children && children.length > 0) {
	                    childNode.load(children);
	                }

	                var element = this.element;
	                if (element) {
	                    childNode.attachTo(element, pos);
	                }
	            }
	        }
	    }, {
	        key: 'root',
	        value: function root() {
	            var root = this;

	            while (root.parent) {
	                root = root.parent;
	            }

	            return root;
	        }
	    }, {
	        key: 'attachTo',
	        value: function attachTo(domElement, pos) {
	            var container = document.createElement("div");
	            (0, _renderSvg2.default)(container, "<svg xmlns='" + _constants.SVG_NS + "' version='1.1'>" + this.render() + "</svg>");

	            var element = container.firstChild.firstChild;
	            if (element) {
	                if ((0, _defined2.default)(pos)) {
	                    domElement.insertBefore(element, domElement.childNodes[pos] || null);
	                } else {
	                    domElement.appendChild(element);
	                }
	                this.setElement(element);
	            }
	        }
	    }, {
	        key: 'setElement',
	        value: function setElement(element) {
	            if (this.element) {
	                this.element._kendoNode = null;
	            }

	            this.element = element;
	            this.element._kendoNode = this;

	            var nodes = this.childNodes;
	            for (var i = 0; i < nodes.length; i++) {
	                var childElement = element.childNodes[i];
	                nodes[i].setElement(childElement);
	            }
	        }
	    }, {
	        key: 'clear',
	        value: function clear() {
	            this.clearDefinitions();

	            if (this.element) {
	                this.element.innerHTML = "";
	            }

	            var children = this.childNodes;
	            for (var i = 0; i < children.length; i++) {
	                children[i].destroy();
	            }

	            this.childNodes = [];
	        }
	    }, {
	        key: 'removeSelf',
	        value: function removeSelf() {
	            if (this.element) {
	                var parentNode = this.element.parentNode;
	                if (parentNode) {
	                    parentNode.removeChild(this.element);
	                }
	                this.element = null;
	            }

	            _get(Node.prototype.__proto__ || Object.getPrototypeOf(Node.prototype), 'removeSelf', this).call(this);
	        }
	    }, {
	        key: 'template',
	        value: function template() {
	            return this.renderChildren();
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            return this.template();
	        }
	    }, {
	        key: 'renderChildren',
	        value: function renderChildren() {
	            var nodes = this.childNodes;
	            var output = "";

	            for (var i = 0; i < nodes.length; i++) {
	                output += nodes[i].render();
	            }

	            return output;
	        }
	    }, {
	        key: 'optionsChange',
	        value: function optionsChange(e) {
	            var field = e.field;
	            var value = e.value;


	            if (field === "visible") {
	                this.css("display", value ? "" : _constants.NONE);
	            } else if (DefinitionMap[field] && isDefinition(field, value)) {
	                this.updateDefinition(field, value);
	            } else if (field === "opacity") {
	                this.attr("opacity", value);
	            }

	            _get(Node.prototype.__proto__ || Object.getPrototypeOf(Node.prototype), 'optionsChange', this).call(this, e);
	        }
	    }, {
	        key: 'attr',
	        value: function attr(name, value) {
	            if (this.element) {
	                this.element.setAttribute(name, value);
	            }
	        }
	    }, {
	        key: 'allAttr',
	        value: function allAttr(attrs) {
	            for (var i = 0; i < attrs.length; i++) {
	                this.attr(attrs[i][0], attrs[i][1]);
	            }
	        }
	    }, {
	        key: 'css',
	        value: function css(name, value) {
	            if (this.element) {
	                this.element.style[name] = value;
	            }
	        }
	    }, {
	        key: 'allCss',
	        value: function allCss(styles) {
	            for (var i = 0; i < styles.length; i++) {
	                this.css(styles[i][0], styles[i][1]);
	            }
	        }
	    }, {
	        key: 'removeAttr',
	        value: function removeAttr(name) {
	            if (this.element) {
	                this.element.removeAttribute(name);
	            }
	        }
	    }, {
	        key: 'mapTransform',
	        value: function mapTransform(transform) {
	            var attrs = [];
	            if (transform) {
	                attrs.push([TRANSFORM, "matrix(" + transform.matrix().toString(6) + ")"]);
	            }

	            return attrs;
	        }
	    }, {
	        key: 'renderTransform',
	        value: function renderTransform() {
	            return (0, _renderAllAttributes2.default)(this.mapTransform(this.srcElement.transform()));
	        }
	    }, {
	        key: 'transformChange',
	        value: function transformChange(value) {
	            if (value) {
	                this.allAttr(this.mapTransform(value));
	            } else {
	                this.removeAttr(TRANSFORM);
	            }
	        }
	    }, {
	        key: 'mapStyle',
	        value: function mapStyle() {
	            var options = this.srcElement.options;
	            var style = [["cursor", options.cursor]];

	            if (options.visible === false) {
	                style.push(["display", _constants.NONE]);
	            }

	            return style;
	        }
	    }, {
	        key: 'renderStyle',
	        value: function renderStyle() {
	            return (0, _renderAttribute2.default)("style", (0, _renderStyle3.default)(this.mapStyle(true)));
	        }
	    }, {
	        key: 'renderOpacity',
	        value: function renderOpacity() {
	            return (0, _renderAttribute2.default)("opacity", this.srcElement.options.opacity);
	        }
	    }, {
	        key: 'createDefinitions',
	        value: function createDefinitions() {
	            var srcElement = this.srcElement;
	            var definitions = this.definitions;
	            if (srcElement) {
	                var options = srcElement.options;
	                var hasDefinitions = void 0;

	                for (var field in DefinitionMap) {
	                    var definition = options.get(field);
	                    if (definition && isDefinition(field, definition)) {
	                        definitions[field] = definition;
	                        hasDefinitions = true;
	                    }
	                }
	                if (hasDefinitions) {
	                    this.definitionChange({
	                        action: "add",
	                        definitions: definitions
	                    });
	                }
	            }
	        }
	    }, {
	        key: 'definitionChange',
	        value: function definitionChange(e) {
	            if (this.parent) {
	                this.parent.definitionChange(e);
	            }
	        }
	    }, {
	        key: 'updateDefinition',
	        value: function updateDefinition(type, value) {
	            var definitions = this.definitions;
	            var current = definitions[type];
	            var attr = DefinitionMap[type];
	            var definition = {};
	            if (current) {
	                definition[type] = current;
	                this.definitionChange({
	                    action: "remove",
	                    definitions: definition
	                });
	                delete definitions[type];
	            }

	            if (!value) {
	                if (current) {
	                    this.removeAttr(attr);
	                }
	            } else {
	                definition[type] = value;
	                this.definitionChange({
	                    action: "add",
	                    definitions: definition
	                });
	                definitions[type] = value;
	                this.attr(attr, refUrl(value.id));
	            }
	        }
	    }, {
	        key: 'clearDefinitions',
	        value: function clearDefinitions() {
	            var definitions = this.definitions;

	            this.definitionChange({
	                action: "remove",
	                definitions: definitions
	            });
	            this.definitions = {};
	        }
	    }, {
	        key: 'renderDefinitions',
	        value: function renderDefinitions() {
	            return (0, _renderAllAttributes2.default)(this.mapDefinitions());
	        }
	    }, {
	        key: 'mapDefinitions',
	        value: function mapDefinitions() {
	            var definitions = this.definitions;
	            var attrs = [];

	            for (var field in definitions) {
	                attrs.push([DefinitionMap[field], refUrl(definitions[field].id)]);
	            }

	            return attrs;
	        }
	    }]);

	    return Node;
	}(_baseNode2.default);

	exports.default = Node;

/***/ },

/***/ 332:
/***/ function(module, exports) {

	module.exports = require("./utils/render-style");

/***/ },

/***/ 333:
/***/ function(module, exports) {

	module.exports = require("./utils/render-svg");

/***/ },

/***/ 334:
/***/ function(module, exports) {

	module.exports = require("../common/is-ie");

/***/ }

/******/ });