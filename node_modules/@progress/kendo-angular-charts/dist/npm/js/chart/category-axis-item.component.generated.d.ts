import { CollectionService } from '../common/collection.service';
import { CollectionItemComponent } from '../common/collection-item.component';
import { ConfigurationService } from '../common/configuration.service';
import { AxisLine, AxisTicks, GridLines, PlotBand } from '../common/property-types';
/**
 * @hidden
 */
export declare abstract class CategoryAxisItemComponentGenerated extends CollectionItemComponent {
    protected configurationService: ConfigurationService;
    protected collectionService: CollectionService;
    /**
     * The category index at which the first value axis crosses this axis (when set as an object).
     *
     * The category indices at which the value axes cross the category axis (when set as an array).
     *
     * To denote the far end of the axis, set an index greater than or equal to the number of categories.
     */
    axisCrossingValue: any[];
    /**
     * The background color of the axis.
     */
    background: string;
    /**
     * The base time interval for the date axis. The default base unit is determined automatically from the
     * minimum difference between subsequent categories.
     *
     * The supported values are:
     *
     * - `"fit"`
     * - `"milliseconds"`
     * - `"seconds"`
     * - `"minutes"`
     * - `"hours"`
     * - `"days"`
     * - `"weeks"`
     * - `"months"`
     * - `"years"`
     *
     * Setting `baseUnit` to `"fit"` will set such a base unit and `categoryAxis.baseUnitStep`
     * so that the total number of categories does not exceed `categoryAxis.maxDateGroups`.
     *
     * Series data is aggregated for the specified base unit by using the `series.aggregate` function.
     */
    baseUnit: string;
    /**
     * The step (interval) between the categories in base units. Setting it to `"auto"` sets the step to such
     * a value that the total number of categories does not exceed `categoryAxis.maxDateGroups`.
     *
     * This option is ignored if `categoryAxis.baseUnit` is set to `"fit"`.
     */
    baseUnitStep: any;
    /**
     * The category names. The Chart will create a category for every item of the array.
     */
    categories: any[];
    /**
     * The color to apply to all axis elements. Accepts a valid CSS color string, including hex and rgb.
     * Can be overridden by `categoryAxis.labels.color` and `categoryAxis.line.color`.
     */
    color: string;
    /**
     * If set to `true`, the Chart will position categories and series points on major ticks. This removes the
     * empty space before and after the series.
     *
     * The default value is `false` except for `"area"` and `"verticalArea"`.
     *
     * This option is ignored if the `series.type` option is set to `"bar"`, `"column"`, `"boxPlot"`, `"ohlc"`,
     * `"candlestick"`, or `"waterfall"`.
     */
    justified: boolean;
    /**
     * The configuration of the axis lines. Also affects the major and minor ticks, but not the grid lines.
     */
    line: AxisLine;
    /**
     * The configuration of the major grid lines. These are the lines that are an extension of the major
     * ticks through the body of the Chart.
     */
    majorGridLines: GridLines;
    /**
     * The configuration of the category axis major ticks.
     */
    majorTicks: AxisTicks;
    /**
     * The last date displayed on the category date axis. By default, the minimum date is the same as the
     * last category.
     * This is often used in combination with the `categoryAxis.min` and `categoryAxis.roundToBaseUnit` options
     * to set up a fixed date range.
     */
    max: any;
    /**
     * The maximum number of groups (categories) to display when
     * `categoryAxis.baseUnit` is set to `"fit"` or
     * `categoryAxis.baseUnitStep` is set to `"auto"`.
     */
    maxDateGroups: number;
    /**
     * The first date displayed on the category date axis. By default, the minimum date is the same as the
     * first category.
     * This is often used in combination with the `categoryAxis.min` and `categoryAxis.roundToBaseUnit` options
     * to set up a fixed date range.
     */
    min: any;
    /**
     * The configuration of the minor grid lines. These are the lines that are an extension of the minor
     * ticks through the body of the Chart.
     */
    minorGridLines: GridLines;
    /**
     * The configuration of the category axis minor ticks.
     */
    minorTicks: AxisTicks;
    /**
     * The unique axis name. Used to associate a series with a category axis using the `series.categoryAxis`
     * option.
     */
    name: string;
    /**
     * The name of the pane that the category axis has to be rendered in.
     * If not set, the axis will be rendered in the first (default) pane.
     */
    pane: string;
    /**
     * The plot bands of the category axis.
     */
    plotBands: PlotBand[];
    /**
     * If set to `true`, the category axis direction is reversed. By default, categories are listed from
     * left to right and from bottom to top.
     */
    reverse: boolean;
    /**
     * If set to `true`, the Chart rounds the first and last date to the nearest base unit.
     *
     * The `roundToBaseUnit` option will be ignored if `series.type` is set to `"bar"`, `"column"`, `"boxPlot"`,
     * `"ohlc"`, `"candlestick"`, or `"waterfall"`.
     */
    roundToBaseUnit: boolean;
    /**
     * The angle (degrees) of the first category on the axis.
     *
     * Angles increase clockwise and zero is to the left. Negative values are acceptable.
     */
    startAngle: number;
    /**
     * The category axis type.
     *
     * The supported values are:
     *
     * - `"category"`&mdash;Discrete category axis.
     * - `"date"`&mdash;Specialized axis for displaying chronological data.
     */
    type: string;
    /**
     * If set to `true`, the Chart displays the category axis. By default, the category axis is visible.
     */
    visible: boolean;
    /**
     * The week start day when `categoryAxis.baseUnit` is set to `"weeks"`.
     *
     * The supported values are:
     *
     * - `kendo.days.Sunday`&mdash;Equal to 0.
     * - `kendo.days.Monday`&mdash;Equal to 1.
     * - `kendo.days.Tuesday`&mdash;Equal to 2.
     * - `kendo.days.Wednesday`&mdash;Equal to 3.
     * - `kendo.days.Thursday`&mdash;Equal to 4.
     * - `kendo.days.Friday`&mdash;Equal to 5.
     * - `kendo.days.Saturday`&mdash;Equal to 6.
     */
    weekStartDay: number;
    /**
     * The crosshair configuration options.
     *
     * The crosshair is displayed when the `categoryAxis.crosshair.visible` option is set to `true`.
     */
    crosshair: any;
    /**
     * The axis labels configuration.
     */
    labels: any;
    /**
     * The category axis notes configuration.
     */
    notes: any;
    /**
     * The selected axis range. If set, the axis selection will be enabled.
     *
     * The range is index-based, starting from 0.
     * Categories with indexes in the range [`select.from`, `select.to`) will be selected.
     * That is, the last category in the range will not be included in the selection.
     *
     * If the categories are dates, the range has to be also specified with date values.
     *
     * Selection is only supported if the axis is horizontal.
     */
    select: any;
    /**
     * The title configuration of the category axis.
     *
     * To display the title, set the `categoryAxis.title.text` option.
     */
    title: any;
    constructor(configurationService: ConfigurationService, collectionService: CollectionService);
}
